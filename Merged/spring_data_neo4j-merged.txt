

package org.springframework.data.neo4j.repository.query;

import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

import org.neo4j.ogm.session.Session;
import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.mapping.Neo4jMappingContext;
import org.springframework.data.neo4j.repository.query.derived.DerivedGraphRepositoryQuery;
import org.springframework.data.repository.core.RepositoryMetadata;
import org.springframework.data.repository.query.QueryMethod;
import org.springframework.data.repository.query.RepositoryQuery;


public class GraphQueryMethod extends QueryMethod {

    private final Session session;
    private final Method method;
    private final Query queryAnnotation;
    private final RepositoryMetadata metadata;
    private final Neo4jMappingContext mappingContext;

    public GraphQueryMethod(Method method, RepositoryMetadata metadata, Session session, Neo4jMappingContext mappingContext) {
        super(method, metadata);
        this.method = method;
        this.session = session;
        this.queryAnnotation = method.getAnnotation(Query.class);
        this.metadata = metadata;
        this.mappingContext = mappingContext;
    }

    public String getQuery() {
        return queryAnnotation.value();
    }

    public Method getMethod() {
        return method;
    }

    @Override
    public String getNamedQueryName() {
        throw new UnsupportedOperationException("OGM does not currently support named queries.");
    }


    public Class<?> resolveConcreteReturnType() {
        Class<?> type = this.method.getReturnType();
        Type genericType = this.method.getGenericReturnType();

        if (Iterable.class.isAssignableFrom(type)) {
            if (genericType instanceof ParameterizedType) {
                ParameterizedType returnType = (ParameterizedType) genericType;
                Type componentType = returnType.getActualTypeArguments()[0];

                return componentType instanceof ParameterizedType ?
                        (Class<?>) ((ParameterizedType) componentType).getRawType() :
                        (Class<?>) componentType;
            } else {
                return Object.class;
            }
        }

        return type;
    }

    public RepositoryQuery createQuery() {
        if (method.getAnnotation(Query.class) != null) {
            if (resolveConcreteReturnType().isAnnotationPresent(QueryResult.class)) {
                return new QueryResultGraphRepositoryQuery(this, session);
            }
            return new GraphRepositoryQuery(this, session);
        }
        return new DerivedGraphRepositoryQuery(this, session, mappingContext);

    }
}

<code block>


package org.springframework.data.neo4j.repository.query;

import java.util.HashMap;
import java.util.Map;

import org.neo4j.ogm.session.Session;
import org.springframework.data.repository.query.Parameter;
import org.springframework.data.repository.query.Parameters;
import org.springframework.data.repository.query.RepositoryQuery;



public class GraphRepositoryQuery implements RepositoryQuery {

    private final GraphQueryMethod graphQueryMethod;

    protected final Session session;

    public GraphRepositoryQuery(GraphQueryMethod graphQueryMethod, Session session) {
        this.graphQueryMethod = graphQueryMethod;
        this.session = session;
    }

    @Override
    public final Object execute(Object[] parameters) {
        Class<?> returnType = graphQueryMethod.getMethod().getReturnType();
        Class<?> concreteType = graphQueryMethod.resolveConcreteReturnType();

        Map<String, Object> params = resolveParams(parameters);

        return execute(returnType, concreteType, getQueryString(), params);
    }

    protected Object execute(Class<?> returnType, Class<?> concreteType, String cypherQuery, Map<String, Object> queryParams) {
        if (returnType.equals(Void.class)) {
            session.execute(cypherQuery, queryParams);
            return null;
        }

        if (Iterable.class.isAssignableFrom(returnType)) {


            if (Map.class.isAssignableFrom(concreteType)) {
                return session.query(cypherQuery, queryParams);
            }
            return session.query(concreteType, cypherQuery, queryParams);
        }

        return session.queryForObject(returnType, cypherQuery, queryParams);
    }

    private Map<String, Object> resolveParams(Object[] parameters) {
        Map<String, Object> params = new HashMap<>();
        Parameters<?, ?> methodParameters = graphQueryMethod.getParameters();

        for (int i = 0; i < parameters.length; i++) {
            Parameter parameter = methodParameters.getParameter(i);

            if (parameter.isNamedParameter()) {
                params.put(parameter.getName(), parameters[i]);
            } else {
                params.put("" + i, parameters[i]);
            }
        }
        return params;
    }

    @Override
    public GraphQueryMethod getQueryMethod() {
        return graphQueryMethod;
    }

    protected String getQueryString() {
        return getQueryMethod().getQuery();
    }

}
<code block>
package org.springframework.data.neo4j.repository.support;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.session.Session;
import org.springframework.aop.framework.Advised;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.neo4j.repository.GraphRepositoryImpl;
import org.springframework.transaction.annotation.Transactional;




@RunWith(MockitoJUnitRunner.class)
public class GraphRepositoryFactoryTest {

    GraphRepositoryFactory factory;

    @Mock org.neo4j.ogm.session.Session session;
    @Mock org.springframework.data.neo4j.mapping.Neo4jMappingContext mappingContext;

    @Before
    public void setUp() {

        factory = new GraphRepositoryFactory(session, mappingContext) {

        };
    }


    @Test
    public void setsUpBasicInstanceCorrectly() throws Exception {
        assertNotNull(factory.getRepository(ObjectRepository.class));
    }

    @Test
    public void allowsCallingOfObjectMethods() {

        ObjectRepository repository = factory.getRepository(ObjectRepository.class);

        repository.hashCode();
        repository.toString();
        repository.equals(repository);
    }

    @Test
    public void usesConfiguredRepositoryBaseClass() {
        factory.setRepositoryBaseClass(CustomGraphRepository.class);
        ObjectRepository repository = factory.getRepository(ObjectRepository.class);
        assertEquals(CustomGraphRepository.class, ((Advised) repository).getTargetClass());
    }

    private interface ObjectRepository extends GraphRepository<Object> {
        @Transactional
        Object findOne(Long id);
    }

    static class CustomGraphRepository<T> extends GraphRepositoryImpl<T> {
        public CustomGraphRepository(Class<T> clazz, Session session) {
            super(clazz, session);
        }
    }
}

<code block>


package org.springframework.data.neo4j.integration.helloworld;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.cypher.query.Pagination;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.neo4j.integration.helloworld.context.HelloWorldContext;
import org.springframework.data.neo4j.integration.helloworld.domain.World;
import org.springframework.data.neo4j.integration.helloworld.service.GalaxyService;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static org.hamcrest.core.AnyOf.anyOf;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.StringContains.containsString;
import static org.junit.Assert.*;



@ContextConfiguration(classes = {HelloWorldContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class GalaxyServiceTest {

    @Autowired
    private GalaxyService galaxyService;

    @Before
    public void setUp() {
        galaxyService.deleteAll();
        assertEquals(0, galaxyService.getNumberOfWorlds());
    }

    @Test
    public void shouldAllowDirectWorldCreation() {

        World myWorld = galaxyService.createWorld("mine", 0);
        Collection<World> foundWorlds = (Collection<World>) galaxyService.getAllWorlds();

        assertEquals(1, foundWorlds.size());
        World mine = foundWorlds.iterator().next();

        assertEquals(myWorld.getName(), mine.getName());

    }

    @Test
    public void shouldHaveCorrectNumberOfWorlds() {
        galaxyService.makeSomeWorlds();
        assertEquals(13, galaxyService.getNumberOfWorlds());
    }

    @Test
    public void createAllWorldsAtOnce() {
        galaxyService.makeAllWorldsAtOnce();
        assertEquals(13, galaxyService.getNumberOfWorlds());

        World earth = galaxyService.findWorldByName("Earth");
        World mars = galaxyService.findWorldByName("Mars");

        assertTrue(mars.canBeReachedFrom(earth));
        assertTrue(earth.canBeReachedFrom(mars));
    }

    @Test
    public void shouldFindWorldsById() {
        galaxyService.makeSomeWorlds();

        for (World world : galaxyService.getAllWorlds()) {
            World foundWorld = galaxyService.findWorldById(world.getId());
            assertNotNull(foundWorld);
        }
    }


    @Test
    public void shouldFindWorldsByName() {
        galaxyService.makeSomeWorlds();
        for (World world : galaxyService.getAllWorlds()) {
            World foundWorld = galaxyService.findWorldByName(world.getName());
            assertNotNull(foundWorld);
        }
    }

    @Test
    public void shouldReachMarsFromEarth() {
        galaxyService.makeSomeWorlds();

        World earth = galaxyService.findWorldByName("Earth");
        World mars = galaxyService.findWorldByName("Mars");

        assertTrue(mars.canBeReachedFrom(earth));
        assertTrue(earth.canBeReachedFrom(mars));
    }

    @Test
    public void shouldFindAllWorlds() {

        Collection<World> madeWorlds = galaxyService.makeSomeWorlds();
        Iterable<World> foundWorlds = galaxyService.getAllWorlds();

        int countOfFoundWorlds = 0;
        for (World foundWorld : foundWorlds) {
            assertTrue(madeWorlds.contains(foundWorld));
            countOfFoundWorlds++;
        }

        assertEquals(madeWorlds.size(), countOfFoundWorlds);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void shouldFindWorldsWith1Moon() {
        galaxyService.makeSomeWorlds();

        for (World worldWithOneMoon : galaxyService.findAllByNumberOfMoons(1)) {
            assertThat(
                    worldWithOneMoon.getName(),
                    is(anyOf(containsString("Earth"), containsString("Midgard"))));
        }
    }

    @Test
    public void shouldNotFindKrypton() {
        galaxyService.makeSomeWorlds();
        World krypton = galaxyService.findWorldByName("Krypton");
        assertNull(krypton);
    }

    @Test
    public void shouldSupportPaging() {

        List<World>  worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();

        int count = worlds.size();
        int PAGE_SIZE = 3;
        int pages = count / PAGE_SIZE + 1;
        long n = 0;
        for (World world : worlds) {
            n += world.getId();
        }

        for (int page = 0; page < pages; page++) {
            Iterable<World> paged = galaxyService.findAllWorlds(new Pagination(page, PAGE_SIZE));
            for (World world : paged) {
                System.out.println(world.getName() + ":" + world.getId());
                n -= world.getId();
            }
        }

        assertEquals(0L, n);

    }

    @Test
    public void shouldDetectNotOnLastPage() {

        int count = galaxyService.makeAllWorldsAtOnce().size();

        assertEquals(count, 13);

        Pageable pageable = new PageRequest(2, 3);
        Page<World> worlds = galaxyService.findAllWorlds(pageable);


        for ( World world : worlds) {
            System.out.println(world.getName() + ": " + world.getId());
        }
        assertTrue(worlds.hasNext());

    }

    @Test
    public void shouldDetectLastPage() {

        int count = galaxyService.makeAllWorldsAtOnce().size();

        assertEquals(count, 13);

        Pageable pageable = new PageRequest(4, 3);
        Page<World> worlds = galaxyService.findAllWorlds(pageable);


        for ( World world : worlds) {
            System.out.println(world.getName() + ": " + world.getId());
        }
        assertFalse(worlds.hasNext());

    }

    @Test
    public void shouldPageAllWorlds() {

        long sum = 0;
        List<World> worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();
        for (World world : worlds) {
            sum += world.getId();
        }



        Pageable pageable = new PageRequest(0, 3);

        for(;;) {
            Page<World> page = galaxyService.findAllWorlds(pageable);
            for ( World world : page) {
                System.out.println(world.getName() + ":" + world.getId());
                sum-=world.getId();
            }
            if (!page.hasNext()) {
                break;
            }
            pageable = pageable.next();
        }

        assertEquals(0, sum);
    }

    @Test
    public void shouldPageAllWorldsSorted() {

        List<World> worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();
        int count = worlds.size();
        assertEquals(count, 13);

        String[] sortedNames = getNamesSorted(worlds);

        Pageable pageable = new PageRequest(0, 3, Sort.Direction.ASC, "name");

        int i = 0;
        for(;;) {
            Page<World> page = galaxyService.findAllWorlds(pageable);
            for ( World world : page ) {
                assertEquals(sortedNames[i], world.getName());
                count--;
                i++;
            }
            if (!page.hasNext()) {
                break;
            }
            pageable = pageable.next();
        }

        assertEquals(0, count);
    }

    @Test
    public void shouldIterateAllWorldsSorted() {

        List<World> worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();
        int count = worlds.size();
        assertEquals(count, 13);

        String[] sortedNames = getNamesSorted(worlds);

        Sort sort = new Sort(Sort.Direction.ASC, "name");
        int i = 0;
        for (World world : galaxyService.findAllWorlds(sort)) {
            assertEquals(sortedNames[i], world.getName());
            count--;
            i++;
        }

        assertEquals(0, count);
    }

    private String[] getNamesSorted(List<World> worlds) {
        List<String> names = new ArrayList();

        for (World world : worlds) {
            names.add(world.getName());
        }

        String[] sortedNames = names.toArray(new String[]{});
        Arrays.sort(sortedNames);
        return sortedNames;
    }

}

<code block>


package org.springframework.data.neo4j.integration.helloworld.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.helloworld.*"})
@PropertySource("classpath:helloworld.properties")
@EnableNeo4jRepositories("org.springframework.data.neo4j.integration.helloworld.repo")
@EnableTransactionManagement
public class HelloWorldContext extends Neo4jConfiguration {


    @Autowired
    private Environment environment;

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();



    }

    @Bean
    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.helloworld.domain");
    }

}

<code block>


package org.springframework.data.neo4j.integration.helloworld.domain;

import org.neo4j.ogm.annotation.Relationship;

import java.util.HashSet;
import java.util.Set;


public class World {

    private final static String REACHABLE_BY_ROCKET = "REACHABLE_BY_ROCKET";

    private Long id;

    private String name;

    private int moons;

    private Set<World> reachableByRocket = new HashSet<>();

    public World(String name, int moons) {
        this.name = name;
        this.moons = moons;
    }

    public World() {
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getMoons() {
        return moons;
    }

    public void addRocketRouteTo(World otherWorld) {
        reachableByRocket.add(otherWorld);

        otherWorld.reachableByRocket.add(this); 
    }

    @Relationship(type=REACHABLE_BY_ROCKET)
    public Set<World> getReachableByRocket() {
        return this.reachableByRocket;
    }

    @Relationship(type=REACHABLE_BY_ROCKET)
    public void setReachableByRocket(Set<World> reachableByRocket) {
        this.reachableByRocket.clear();
        this.reachableByRocket = reachableByRocket;
    }

    public boolean canBeReachedFrom(World otherWorld) {
        return reachableByRocket.contains(otherWorld);
    }

    @Override
    public int hashCode() {
        return (id == null) ? 0 : id.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        World other = (World) obj;
        if (id == null) return other.id == null;
        return id.equals(other.id);
    }

    @Override
    public String toString() {
        return String.format("World{name='%s', moons=%d}", name, moons);
    }
}

<code block>


package org.springframework.data.neo4j.integration.helloworld.repo;

import org.neo4j.ogm.model.Property;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.helloworld.domain.World;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface WorldRepository extends GraphRepository<World> {

}

<code block>


package org.springframework.data.neo4j.integration.helloworld.service;

import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.cypher.query.Pagination;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.neo4j.integration.helloworld.domain.World;
import org.springframework.data.neo4j.integration.helloworld.repo.WorldRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collection;


@Service
@Transactional
public class GalaxyService {

    @Autowired
    private WorldRepository worldRepository;

    @Autowired
    Session session;

    public long getNumberOfWorlds() {
        return worldRepository.count();
    }

    public World createWorld(String name, int moons) {
        return worldRepository.save(new World(name, moons));
    }

    public Iterable<World> getAllWorlds() {
        return worldRepository.findAll();
    }

    public World findWorldById(Long id) {
        return worldRepository.findOne(id);
    }

    public World findWorldByName(String name) {
        Iterable<World> worlds = findByProperty("name", name);
        if (worlds.iterator().hasNext()) {
            return worlds.iterator().next();
        } else {
            return null;
        }
    }

    public Iterable<World> findAllByNumberOfMoons(int numberOfMoons) {
        return findByProperty("moons", numberOfMoons);
    }

    public Collection<World> makeSomeWorlds() {

        Collection<World> worlds = new ArrayList<World>();


        worlds.add(createWorld("Mercury", 0));
        worlds.add(createWorld("Venus", 0));

        World earth = createWorld("Earth", 1);
        World mars = createWorld("Mars", 2);

        mars.addRocketRouteTo(earth);






        worldRepository.save(mars);




        worlds.add(earth);
        worlds.add(mars);

        worlds.add(createWorld("Jupiter", 63));
        worlds.add(createWorld("Saturn", 62));
        worlds.add(createWorld("Uranus", 27));
        worlds.add(createWorld("Neptune", 13));


        worlds.add(createWorld("Alfheimr", 0));
        worlds.add(createWorld("Midgard", 1));
        worlds.add(createWorld("Muspellheim", 2));
        worlds.add(createWorld("Asgard", 63));
        worlds.add(createWorld("Hel", 62));

        return worlds;
    }


    public Collection<World> makeAllWorldsAtOnce() {

        Collection<World> worlds = new ArrayList<World>();
        

        
        worlds.add(new World("Mercury", 0));
        worlds.add(new World("Venus", 0));

        World earth = new World("Earth", 1);
        World mars = new World("Mars", 2);

        mars.addRocketRouteTo(earth);
        earth.addRocketRouteTo(mars);

        worlds.add(earth);
        worlds.add(mars);

        worlds.add(new World("Jupiter", 63));
        worlds.add(new World("Saturn", 62));
        worlds.add(new World("Uranus", 27));
        worlds.add(new World("Neptune", 13));


        worlds.add(new World("Alfheimr", 0));
        worlds.add(new World("Midgard", 1));
        worlds.add(new World("Muspellheim", 2));
        worlds.add(new World("Asgard", 63));
        worlds.add(new World("Hel", 62));

        worldRepository.save(worlds);

        return worlds;
    }
    
    public void deleteAll() {
        worldRepository.deleteAll();
    }

    private Iterable<World> findByProperty(String propertyName, Object propertyValue) {
        return session.loadAll(World.class, new Filter(propertyName, propertyValue));
    }

    public Iterable<World> findByProperty(String propertyName, Object propertyValue, int depth) {
        return session.loadAll(World.class, new Filter(propertyName, propertyValue), depth);
    }


    public Iterable<World> findAllWorlds(Pagination paging) {
        return session.loadAll(World.class, paging, 0);

    }

    public Iterable<World> findAllWorlds(Sort sort) {
        return worldRepository.findAll(sort, 0);

    }

    public Page<World> findAllWorlds(Pageable pageable) {
        return worldRepository.findAll(pageable, 0);
    }

    public Iterable<World> findAllWorlds(Sort sort, int depth) {
        return worldRepository.findAll(sort, depth);
    }
}

<code block>

package org.springframework.data.neo4j.integration.extensions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.assertTrue;


@ContextConfiguration(classes = {CustomPersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class CustomGraphRepositoryTest {

    @Autowired
    private UserRepository repository;


    @Test
    public void shouldExposeCommonMethodOnExtendedRepository() {
        assertTrue(repository.sharedCustomMethod());
    }

}

<code block>

package org.springframework.data.neo4j.integration.extensions;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableNeo4jRepositories(repositoryBaseClass = CustomGraphRepositoryImpl.class)
@EnableTransactionManagement
public class CustomPersistenceContext extends Neo4jConfiguration {

    @Override
    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.extensions.domain");
    }

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }

}


<code block>

package org.springframework.data.neo4j.integration.extensions;

import org.neo4j.ogm.session.Session;
import org.springframework.data.neo4j.repository.GraphRepositoryImpl;
import org.springframework.stereotype.Repository;


@Repository
public class CustomGraphRepositoryImpl<T> extends GraphRepositoryImpl<T> implements CustomGraphRepository<T> {

    public CustomGraphRepositoryImpl(Class<T> clazz, Session session) {
        super(clazz, session);
    }

    @Override
    public boolean sharedCustomMethod() {
        return true;
    }
}

<code block>

package org.springframework.data.neo4j.integration.extensions;

import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.stereotype.Repository;


@Repository
public interface UserRepository extends CustomGraphRepository<User> {
}

<code block>

package org.springframework.data.neo4j.integration.extensions;

import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.repository.NoRepositoryBean;


@NoRepositoryBean
public interface CustomGraphRepository<T> extends GraphRepository<T> {

    boolean sharedCustomMethod();

}

<code block>
package org.springframework.data.neo4j.integration.extensions.domain;


public class User {
    Long id;
}

<code block>


package org.springframework.data.neo4j.integration.jsr303;

import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.jsr303.domain.Adult;
import org.springframework.data.neo4j.integration.jsr303.service.AdultService;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@ContextConfiguration(classes = {WebConfiguration.class, PersistenceConfiguration.class})
@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class JSR303Test {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private AdultService service;

    @Autowired
    WebApplicationContext wac;

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
    }

    @Test
    public void testCanCreateAnAdult() throws Exception {

        Adult adult = new Adult("Peter", 18);
        String json = objectMapper.writeValueAsString(adult);

        mockMvc.perform(
                post("/adults")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isOk());
    }

    @Test
    public void testCantCreateAnAdultUnderEighteen() throws Exception {

        Adult adult = new Adult("Peter", 16);
        String json = objectMapper.writeValueAsString(adult);

        mockMvc.perform(
                post("/adults")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isBadRequest());
    }

}

<code block>


package org.springframework.data.neo4j.integration.jsr303;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.jsr303.controller"})
@EnableWebMvc
public class WebConfiguration extends WebMvcConfigurerAdapter {

    @Bean(name="validator")
    public LocalValidatorFactoryBean validator() {
        return new LocalValidatorFactoryBean();
    }

}

<code block>


package org.springframework.data.neo4j.integration.jsr303;

import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.*;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan
@EnableNeo4jRepositories("org.springframework.data.neo4j.integration.jsr303.repo")
@EnableTransactionManagement
public class PersistenceConfiguration extends Neo4jConfiguration {

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.jsr303.domain");
    }

    @Override
    @Bean
    @Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
    public Session getSession() throws Exception {
        return super.getSession();
    }

}

<code block>


package org.springframework.data.neo4j.integration.jsr303.domain;

import javax.validation.constraints.Min;


public class Adult {

    private Long id;
    private String name;
    @Min(18)
    private Integer age;

    public Adult() {}

    public Adult(String name, Integer age) {
        this.name = name;
        this.age = age;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }
}

<code block>


package org.springframework.data.neo4j.integration.jsr303.repo;

import org.springframework.data.neo4j.integration.jsr303.domain.Adult;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface AdultRepository extends GraphRepository<Adult> {
}

<code block>


package org.springframework.data.neo4j.integration.jsr303.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.jsr303.domain.Adult;
import org.springframework.data.neo4j.integration.jsr303.repo.AdultRepository;
import org.springframework.stereotype.Service;


@Service
public class AdultService {

    @Autowired
    private AdultRepository repository;

    public Adult save(Adult adult) {
        return repository.save(adult);
    }
}

<code block>


package org.springframework.data.neo4j.integration.jsr303.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.jsr303.domain.Adult;
import org.springframework.data.neo4j.integration.jsr303.service.AdultService;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.ValidationException;


@Controller
public class AdultController {

    @Autowired
    private AdultService service;

    @RequestMapping(value = "/adults", method = RequestMethod.POST, consumes = "application/json")
    @ResponseBody
    public Adult create (@Valid @RequestBody Adult entity, BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            throw new ValidationException("oops");
        }
        return service.save(entity);
    }

    @ExceptionHandler(ValidationException.class)
    @ResponseBody
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public void handleException(ValidationException ve) { }

}

<code block>



package org.springframework.data.neo4j.integration.template;

import org.junit.After;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Test;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.graphdb.*;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.cypher.ComparisonOperator;
import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.cypher.Filters;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.session.Utils;
import org.neo4j.ogm.session.result.QueryStatistics;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.data.neo4j.integration.movies.domain.*;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.Neo4jTemplate;

import javax.persistence.PersistenceException;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;

import static org.junit.Assert.*;
import static org.neo4j.ogm.session.Utils.map;


public class Neo4jTemplateTest {

    @ClassRule
    public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule();

    private Neo4jOperations template;

    @Before
    public void setUpOgmSession() {
        SessionFactory sessionFactory = new SessionFactory("org.springframework.data.neo4j.integration.movies.domain");
        this.template = new Neo4jTemplate(sessionFactory.openSession(neo4jRule.url()));
        addArbitraryDataToDatabase();
    }

    @After
    public void clearDatabase() {
        neo4jRule.clearDatabase();
    }


    private void addArbitraryDataToDatabase() {
        try (Transaction tx = neo4jRule.getGraphDatabaseService().beginTx()) {
            Node arbitraryNode = neo4jRule.getGraphDatabaseService().createNode(DynamicLabel.label("NotAClass"));
            arbitraryNode.setProperty("name", "Colin");
            Node otherNode = neo4jRule.getGraphDatabaseService().createNode(DynamicLabel.label("NotAClass"));
            otherNode.setProperty("age", 39);
            arbitraryNode.createRelationshipTo(otherNode, DynamicRelationshipType.withName("TEST"));

            tx.success();
        }
    }

    @Test
    public void shouldSaveAndRetrieveNodeEntitiesWithoutExplicitTransactionManagement() {
        Genre filmGenre = new Genre();
        filmGenre.setName("Comedy");
        this.template.save(filmGenre);

        Genre loadedGenre = this.template.load(Genre.class, filmGenre.getId());
        assertNotNull("The entity loaded from the template shouldn't be null", loadedGenre);
        assertEquals("The loaded entity wasn't as expected", filmGenre, loadedGenre);

        Genre anotherGenre = new Genre();
        anotherGenre.setName("Action");
        this.template.save(anotherGenre);

        Collection<Genre> allGenres = this.template.loadAll(Genre.class);
        assertNotNull("The collection of all genres shouldn't be null", allGenres);
        assertEquals("The number of genres in the database wasn't as expected", 2, allGenres.size());
    }

    @Test
    public void shouldSaveAndRetrieveRelationshipEntitiesWithoutExplicitTransactionManagement() {
        User critic = new User("Gary");
        TempMovie film = new TempMovie("Fast and Furious XVII");
        Rating filmRating = critic.rate(film, 2, "They've made far too many of these films now!");

        this.template.save(filmRating);

        Rating loadedRating = this.template.load(Rating.class, filmRating.getId());
        assertNotNull("The loaded rating shouldn't be null", loadedRating);
        assertEquals("The relationship properties weren't saved correctly", filmRating.getStars(), loadedRating.getStars());
        assertEquals("The rated film wasn't saved correctly", film.getTitle(), loadedRating.getMovie().getTitle());
        assertEquals("The critic wasn't saved correctly", critic.getId(), loadedRating.getUser().getId());
    }

    @Test
    public void shouldExecuteArbitraryReadQuery() {
        User user = new User("Harmanpreet Singh");
        TempMovie bollywood = new TempMovie("Desi Boyz");
        TempMovie hollywood = new TempMovie("Mission Impossible");
        template.save(user.rate(bollywood, 1, "Bakwaas"));
        template.save(user.rate(hollywood, 4, "Pretty good"));

        Iterable<Map<String, Object>> queryResults =
                this.template.query("MATCH (u:User)-[r]->(m:Movie) RETURN AVG(r.stars) AS avg", Collections.<String, Object>emptyMap());
        Iterator<Map<String, Object>> queryResultIterator = queryResults.iterator();
        assertTrue("There should've been some query result returned", queryResultIterator.hasNext());
        assertEquals(2.5, (Double) queryResultIterator.next().get("avg"), 0.01);
    }

    @Test
    public void shouldQueryForSpecificObjectUsingBespokeParameterisedCypherQuery() {
        this.template.save(new Actor("ab", "Alec Baldwin"));
        this.template.save(new Actor("hm", "Helen Mirren"));
        this.template.save(new Actor("md", "Matt Damon"));

        Actor loadedActor = this.template.queryForObject(Actor.class, "MATCH (a:Actor) WHERE a.name={param} RETURN a",
                Collections.singletonMap("param", "Alec Baldwin"));
        assertNotNull("The entity wasn't loaded", loadedActor);
        assertEquals("Alec Baldwin", loadedActor.getName());
    }

    @Test
    public void shouldQueryForObjectCollectionUsingBespokeCypherQuery() {
        this.template.save(new User("Jeff"));
        this.template.save(new User("John"));
        this.template.save(new User("Colin"));

        Iterable<User> users = this.template.queryForObjects(User.class, "MATCH (u:User) WHERE u.name=~'J.*' RETURN u",
                Collections.<String, Object>emptyMap());
        assertNotNull("The entity wasn't loaded", users);
        assertTrue("The entity wasn't loaded", users.iterator().hasNext());
        for (User loadedUser : users) {
            assertTrue("Shouldn't've loaded " + loadedUser.getName(),
                    loadedUser.getName().equals("John") || loadedUser.getName().equals("Jeff"));
        }
    }

    @Test
    public void shouldRetrieveEntitiesByMatchingProperty() {
        this.template.save(new Genre("Thriller"));
        this.template.save(new Genre("Horror"));
        this.template.save(new Genre("Period Drama"));

        Genre loadedGenre = this.template.loadByProperty(Genre.class, "name", "Horror");
        assertNotNull("No genre was loaded", loadedGenre);
        assertEquals("Horror", loadedGenre.getName());
    }

    @Test
    public void shouldExecuteArbitraryUpdateQuery() {
        assertTrue("There shouldn't be any genres in the database", this.template.loadAll(Genre.class).isEmpty());

        this.template.execute("CREATE (:Genre {name:'Comedy'}), (:Genre {name:'Action'})");

        Iterator<Genre> genres = this.template.loadAll(Genre.class, 0).iterator();
        assertEquals("There weren't any genres created", 2, Utils.size(genres));
    }


    @Test(expected = java.lang.RuntimeException.class)
    public void shouldThrowExeceptionForExecuteQueryThatReturnsResults() {
        this.template.execute("CREATE (g1:Genre {name:'Comedy'}), (g2:Genre {name:'Action'}) return g1");
    }

    @Test
    public void shouldCountNumberOfEntitiesOfParticularTypeInGraphDatabase() {
        GraphDatabaseService database = neo4jRule.getGraphDatabaseService();
        try (Transaction tx = database.beginTx()) {

            Label genreTypeLabel = DynamicLabel.label(Genre.class.getSimpleName());
            for (int i = 0; i < 5; i++) {
                database.createNode(genreTypeLabel);
            }


            Label filmTypeLabel = DynamicLabel.label(TempMovie.class.getAnnotation(NodeEntity.class).label());
            for (int i = 0; i < 3; i++) {
                database.createNode(filmTypeLabel);
            }


            database.createNode(DynamicLabel.label(User.class.getSimpleName()));

            tx.success();
        }

        assertEquals(5, this.template.count(Genre.class));
        assertEquals(3, this.template.count(TempMovie.class));
    }

    @Test
    public void shouldDeleteExistingEntitiesByGraphId() {
        ExecutionEngine ee = new ExecutionEngine(neo4jRule.getGraphDatabaseService());
        Long genreId = ee.execute("CREATE (t:Genre {name:'Thriller'}), (r:Genre {name:'RomCom'}) RETURN id(r) AS gid")
                .<Long>columnAs("gid").next();

        Genre entity = this.template.load(Genre.class, genreId);
        assertEquals("RomCom", entity.getName());
        this.template.delete(entity);

        Collection<Genre> allGenres = this.template.loadAll(Genre.class, 0);
        assertEquals("The genre wasn't deleted", 1, allGenres.size());
        assertEquals("The wrong genre was deleted", "Thriller", allGenres.iterator().next().getName());
    }

    @Test(expected = PersistenceException.class)
    public void shouldConvertOGMExceptionsToPersistenceExceptions() {
        this.template.loadAll(Void.class);
    }


    @Test(expected = PersistenceException.class)
    public void shouldHandleErrorsOnExecute() {
        this.template.execute("CREAT (node:NODE)");
    }


    @Test
    public void shouldReturnQueryStats() {
        QueryStatistics stats = this.template.execute("CREATE (a:Actor {name:'Keanu Reeves'}) CREATE (m:Movie {title:'The Matrix'}) " +
                "CREATE (a)-[:ACTED_IN {role:'Neo'}]->(m)");
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesCreated());
        assertEquals(3, stats.getPropertiesSet());
        assertEquals(1, stats.getRelationshipsCreated());
        assertEquals(2, stats.getLabelsAdded());

        stats = this.template.execute("MATCH (a:Actor)-->(m:Movie) REMOVE a:Actor SET m.title=null");
        assertTrue(stats.containsUpdates());
        assertEquals(1, stats.getLabelsRemoved());
        assertEquals(1, stats.getPropertiesSet());

        stats = this.template.execute("MATCH n-[r]-(m:Movie) delete n,r,m");
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesDeleted());
        assertEquals(1, stats.getRelationshipsDeleted());
    }


    @Test
    public void shouldReturnSchemaQueryStats() {
        QueryStatistics stats = this.template.execute("CREATE INDEX ON :Actor(name)");
        assertEquals(1, stats.getIndexesAdded());

        stats = this.template.execute("CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE");
        assertEquals(1, stats.getConstraintsAdded());

        stats = this.template.execute("DROP CONSTRAINT ON (movie:Movie) ASSERT movie.title is UNIQUE");
        assertEquals(1, stats.getConstraintsRemoved());

        stats = this.template.execute("DROP INDEX ON :Actor(name)");
        assertEquals(1, stats.getIndexesRemoved());
    }


    @Test
    public void shouldReturnQueryStatsForQueryWithParams() {
        QueryStatistics stats = this.template.execute("CREATE (a:Actor {name:{actorName}}) CREATE (m:Movie {title:{movieTitle}}) " +
                "CREATE (a)-[:ACTED_IN {role:'Neo'}]->(m)",map("actorName","Keanu Reeves", "movieTitle","THe Matrix"));
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesCreated());
        assertEquals(3, stats.getPropertiesSet());
        assertEquals(1, stats.getRelationshipsCreated());
        assertEquals(2, stats.getLabelsAdded());

        stats = this.template.execute("MATCH (a:Actor)-->(m:Movie) REMOVE a:Actor SET m.title=null");
        assertTrue(stats.containsUpdates());
        assertEquals(1, stats.getLabelsRemoved());
        assertEquals(1, stats.getPropertiesSet());

        stats = this.template.execute("MATCH n-[r]-(m:Movie) delete n,r,m");
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesDeleted());
        assertEquals(1, stats.getRelationshipsDeleted());
    }


    @Test
    public void shouldRetrieveEntitiesByMatchingProperties() {
        this.template.save(new Cinema("Ritzy", 5000));
        this.template.save(new Cinema("Picturehouse", 7500));

        Filter name = new Filter("name", "Ritzy");
        Cinema loadedCinema = this.template.loadByProperties(Cinema.class, new Filters().add(name));
        assertNotNull("No cinema was loaded", loadedCinema);
        assertEquals("Ritzy", loadedCinema.getName());

        Filter capacity = new Filter("capacity", 1000);
        capacity.setComparisonOperator(ComparisonOperator.GREATER_THAN);
        Collection<Cinema> loadedCinemas = this.template.loadAllByProperties(Cinema.class, new Filters().add(capacity));
        assertNotNull(loadedCinemas);
        assertEquals(2, loadedCinemas.size());
        assertTrue(loadedCinemas.contains(new Cinema("Ritzy", 5000)));
        assertTrue(loadedCinemas.contains(new Cinema("Picturehouse", 7500)));
    }

}

<code block>


package org.springframework.data.neo4j.integration.template;

import org.springframework.context.ApplicationListener;
import org.springframework.data.neo4j.event.Neo4jDataManipulationEvent;


public abstract class TestNeo4jEventListener<E extends Neo4jDataManipulationEvent> implements ApplicationListener<E> {

    private Neo4jDataManipulationEvent event;

    @Override
    public void onApplicationEvent(E event) {
        this.event = event;
    }

    public boolean hasReceivedAnEvent() {
        return this.event != null;
    }

    public Neo4jDataManipulationEvent getEvent() {
        return event;
    }

}

<code block>


package org.springframework.data.neo4j.integration.template;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.event.AfterDeleteEvent;
import org.springframework.data.neo4j.event.AfterSaveEvent;
import org.springframework.data.neo4j.event.BeforeDeleteEvent;
import org.springframework.data.neo4j.event.BeforeSaveEvent;
import org.springframework.data.neo4j.integration.movies.domain.Actor;
import org.springframework.data.neo4j.integration.template.context.DataManipulationEventConfiguration;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.Neo4jTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.*;

@ContextConfiguration(classes = DataManipulationEventConfiguration.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class TemplateApplicationEventTest {

    @Autowired
    private Neo4jOperations neo4jTemplate;

    @Autowired
    private TestNeo4jEventListener<BeforeSaveEvent> beforeSaveEventListener;
    @Autowired
    private TestNeo4jEventListener<AfterSaveEvent> afterSaveEventListener;
    @Autowired
    private TestNeo4jEventListener<BeforeDeleteEvent> beforeDeleteEventListener;
    @Autowired
    private TestNeo4jEventListener<AfterDeleteEvent> afterDeleteEventListener;

    @Test
    public void shouldCreateTemplateAndPublishAppropriateApplicationEventsOnSaveAndOnDelete() {
        assertNotNull("The Neo4jTemplate wasn't autowired into this test", this.neo4jTemplate);

        Actor entity = new Actor();
        entity.setName("John Abraham");

        assertFalse(this.beforeSaveEventListener.hasReceivedAnEvent());
        assertFalse(this.afterSaveEventListener.hasReceivedAnEvent());
        this.neo4jTemplate.save(entity);
        assertTrue(this.beforeSaveEventListener.hasReceivedAnEvent());
        assertSame(entity, this.beforeSaveEventListener.getEvent().getEntity());
        assertTrue(this.afterSaveEventListener.hasReceivedAnEvent());
        assertSame(entity, this.afterSaveEventListener.getEvent().getEntity());

        assertFalse(this.beforeDeleteEventListener.hasReceivedAnEvent());
        assertFalse(this.afterDeleteEventListener.hasReceivedAnEvent());
        this.neo4jTemplate.delete(entity);
        assertTrue(this.beforeDeleteEventListener.hasReceivedAnEvent());
        assertSame(entity, this.beforeDeleteEventListener.getEvent().getEntity());
        assertTrue(this.afterDeleteEventListener.hasReceivedAnEvent());
        assertSame(entity, this.afterDeleteEventListener.getEvent().getEntity());
    }

}

<code block>
package org.springframework.data.neo4j.integration.template;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.neo4j.integration.template.context.DataManipulationEventConfiguration;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

@ContextConfiguration(classes = DataManipulationEventConfiguration.class)
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class ExceptionTranslationTest {

    @Autowired
    private Neo4jOperations neo4jTemplate;


    @Before
    public void setUp()  {
        Assert.notNull(neo4jTemplate, "neo4jTemplate not properly wired in");
    }

    @Test(expected= DataAccessException.class)
    @Ignore("this isn't working as the docs say it should. We must be doing something wrong")
    public void testTemplateExceptionsAreIntercepted() {
        neo4jTemplate.loadAll(Void.class);

    }

}

<code block>


package org.springframework.data.neo4j.integration.template.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.event.AfterDeleteEvent;
import org.springframework.data.neo4j.event.AfterSaveEvent;
import org.springframework.data.neo4j.event.BeforeDeleteEvent;
import org.springframework.data.neo4j.event.BeforeSaveEvent;
import org.springframework.data.neo4j.integration.template.TestNeo4jEventListener;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.Neo4jTemplate;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableTransactionManagement
public class DataManipulationEventConfiguration extends Neo4jConfiguration {

    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.movies.domain");
    }

    @Bean
    public Neo4jOperations getNeo4jTemplate() throws Exception {
        return new Neo4jTemplate(getSession());
    }

    @Bean
    public ApplicationListener<BeforeSaveEvent> beforeSaveEventListener() {
        return new TestNeo4jEventListener<BeforeSaveEvent>() {};
    }

    @Bean
    public ApplicationListener<AfterSaveEvent> afterSaveEventListener() {
        return new TestNeo4jEventListener<AfterSaveEvent>() {};
    }

    @Bean
    public ApplicationListener<BeforeDeleteEvent> beforeDeleteEventListener() {
        return new TestNeo4jEventListener<BeforeDeleteEvent>() {};
    }

    @Bean
    public ApplicationListener<AfterDeleteEvent> afterDeleteEventListener() {
        return new TestNeo4jEventListener<AfterDeleteEvent>() {};
    }

}

<code block>


package org.springframework.data.neo4j.integration.web;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.data.neo4j.integration.web.context.WebPersistenceContext;
import org.springframework.data.neo4j.integration.web.context.WebAppContext;
import org.springframework.data.neo4j.integration.web.domain.User;
import org.springframework.data.neo4j.integration.web.repo.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@ContextConfiguration(classes = {WebAppContext.class, WebPersistenceContext.class})
@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class WebIntegrationTest {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    WebApplicationContext wac;

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();

        User adam = new User("Adam");
        User daniela = new User("Daniela");
        User michal = new User("Michal");
        User vince = new User("Vince");

        adam.befriend(daniela);
        daniela.befriend(michal);
        michal.befriend(vince);

        userRepository.save(adam);
    }

    @Test
    public void shouldNotShareSessionBetweenRequestsWithDifferentSession() throws Exception {
        mockMvc.perform(get("/user/{name}/friends", "Adam"))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Daniela"));

        mockMvc.perform(get("/user/{name}/friends", "Vince"))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Michal"));
    }

    @Test
    public void shouldShareSessionBetweenRequestsDuringSameSession() throws Exception {
        MockHttpSession session = new MockHttpSession();

        mockMvc.perform(get("/user/{name}/friends", "Adam").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Daniela"));

        mockMvc.perform(get("/user/{name}/friends", "Daniela").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Adam Michal"));

        mockMvc.perform(get("/user/{name}/friends", "Michal").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Daniela Vince"));

        mockMvc.perform(get("/user/{name}/friends", "Vince").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Michal"));

    }

    @Test
    public void shouldNotShareSessionBetweenMultiThreadedRequests() throws Exception {
        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int i = 0; i < 100; i++) {
            final int j = i;
            executor.submit(new Runnable() {
                @Override
                public void run() {
                    if (j % 2 == 0) {
                        try {
                            mockMvc.perform(get("/user/{name}/friends", "Adam"))
                                    .andExpect(status().isOk())
                                    .andExpect(MockMvcResultMatchers.content().string("Daniela"));
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    } else {

                        try {
                            mockMvc.perform(get("/user/{name}/friends", "Vince"))
                                    .andExpect(status().isOk())
                                    .andExpect(MockMvcResultMatchers.content().string("Michal"));
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }

                    }
                }
            });
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
    }

}

<code block>


package org.springframework.data.neo4j.integration.web.context;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.web.controller"})
@EnableWebMvc
public class WebAppContext extends WebMvcConfigurerAdapter {
}

<code block>


package org.springframework.data.neo4j.integration.web.context;

import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.context.annotation.*;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.web"})
@EnableNeo4jRepositories("org.springframework.data.neo4j.integration.web.repo")
@EnableTransactionManagement
public class WebPersistenceContext extends Neo4jConfiguration {

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.web.domain");
    }

    @Override
    @Bean
    @Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
    public Session getSession() throws Exception {
        return super.getSession();
    }
}

<code block>


package org.springframework.data.neo4j.integration.web.domain;

import org.neo4j.ogm.annotation.Relationship;

import java.util.HashSet;
import java.util.Set;


public class Cinema {

    private Long id;
    private String name;

    @Relationship(direction = Relationship.INCOMING)
    private Set<User> visited = new HashSet<>();

    public Cinema() {
    }

    public Cinema(String name) {
        this.name = name;
    }

    public void addVisitor(User user) {
        visited.add(user);
    }

    public String getName() {
        return name;
    }
}

<code block>


package org.springframework.data.neo4j.integration.web.domain;


public class Genre {

    private Long id;
    private String name;

    public Genre() {
    }

    public Genre(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.integration.web.domain;

import org.neo4j.ogm.annotation.Relationship;

import java.util.Collection;
import java.util.HashSet;


public class User {

    private Long id;
    private String name;
    private Collection<Genre> interested = new HashSet<>();

    @Relationship(type = "FRIEND_OF", direction = Relationship.UNDIRECTED)
    private Collection<User> friends = new HashSet<>();

    public User() {
    }

    public User(String name) {
        this.name = name;
    }

    public void interestedIn(Genre genre) {
        interested.add(genre);
    }

    public void notInterestedIn(Genre genre) {
        interested.remove(genre);
    }

    public void befriend(User user) {
        friends.add(user);
        user.friends.add(this);
    }


    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Collection<User> getFriends() {
        return friends;
    }
}

<code block>


package org.springframework.data.neo4j.integration.web.repo;

import org.springframework.data.neo4j.integration.web.domain.Genre;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface GenreRepository extends GraphRepository<Genre> {
}

<code block>


package org.springframework.data.neo4j.integration.web.repo;

import org.springframework.data.neo4j.integration.web.domain.User;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;

import java.util.Collection;


@Repository
public interface UserRepository extends GraphRepository<User> {

    Collection<User> findUserByName(String name);
}

<code block>


package org.springframework.data.neo4j.integration.web.service;

import java.util.Collection;
import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.web.domain.User;
import org.springframework.data.neo4j.integration.web.repo.UserRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private Session session;

    @Transactional
    @Override
    public User getUserByName(String name) {
        Iterable<User> users = findByProperty("name", name);
        if (!users.iterator().hasNext()) {
            return null;
        }
        return users.iterator().next();
    }

    @Transactional
    @Override
    public Collection<User> getNetwork(User user) {
        Set<User> network = new TreeSet<>(new Comparator<User>() {
            @Override
            public int compare(User u1, User u2) {
                return u1.getName().compareTo(u2.getName());
            }
        });
        buildNetwork(user, network);
        network.remove(user);
        return network;
    }

    private void buildNetwork(User user, Set<User> network) {
        for (User friend : user.getFriends()) {
            if (!network.contains(friend)) {
                network.add(friend);
                buildNetwork(friend, network);
            }
        }
    }

    protected Iterable<User> findByProperty(String propertyName, Object propertyValue) {
        return session.loadAll(User.class, new Filter(propertyName, propertyValue));
    }

}

<code block>


package org.springframework.data.neo4j.integration.web.service;

import org.springframework.data.neo4j.integration.web.domain.User;

import java.util.Collection;


public interface UserService {

    User getUserByName(String name);

    Collection<User> getNetwork(User user);
}

<code block>


package org.springframework.data.neo4j.integration.web.controller;

import org.springframework.data.neo4j.integration.web.domain.User;
import org.springframework.data.neo4j.integration.web.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;


@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @RequestMapping(value = "/user/{name}/friends")
    @ResponseBody
    public String listFriends(@PathVariable String name, HttpSession session) {
        System.out.println("Session: " + session);
        User user = userService.getUserByName(name);

        if (user == null) {
            return "No such user!";
        }

        StringBuilder result = new StringBuilder();
        for (User friend : userService.getNetwork(user)) {
            result.append(friend.getName()).append(" ");
        }

        return result.toString().trim();
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.movies.context.PersistenceContext;
import org.springframework.data.neo4j.integration.movies.domain.Cinema;
import org.springframework.data.neo4j.integration.movies.domain.Rating;
import org.springframework.data.neo4j.integration.movies.domain.TempMovie;
import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.data.neo4j.integration.movies.repo.CinemaRepository;
import org.springframework.data.neo4j.integration.movies.repo.RatingRepository;
import org.springframework.data.neo4j.integration.movies.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {PersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class DerivedQueryTest {


	@ClassRule
	public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

	private static Session session;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private CinemaRepository cinemaRepository;

	@Autowired
	private RatingRepository ratingRepository;

	@Before
	public void init() throws IOException {
		session = new SessionFactory("org.springframework.data.neo4j.integration.movies.domain").openSession(neo4jRule.url());
	}

	@After
	public void clearDatabase() {
		neo4jRule.clearDatabase();
	}

	private void executeUpdate(String cypher) {
		new ExecutionEngine(neo4jRule.getGraphDatabaseService()).execute(cypher);
	}

	@Test
	public void shouldFindUsersByName() {
		executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

		Collection<User> users = userRepository.findByName("Michal");
		Iterator<User> iterator = users.iterator();
		assertTrue(iterator.hasNext());
		User user = iterator.next();
		assertEquals("Michal", user.getName());
		assertEquals(1, user.getFriends().size());
		assertEquals("Adam", user.getFriends().iterator().next().getName());
		assertFalse(iterator.hasNext());
	}

	@Test
	public void shouldFindUsersByMiddleName() {
		executeUpdate("CREATE (m:User {middleName:'Joseph'})<-[:FRIEND_OF]-(a:User {middleName:'Mary', name: 'Joseph'})");

		Collection<User> users = userRepository.findByMiddleName("Joseph");
		Iterator<User> iterator = users.iterator();
		assertTrue(iterator.hasNext());
		User user = iterator.next();
		assertEquals("Joseph", user.getMiddleName());
		assertEquals(1, user.getFriends().size());
		User friend = user.getFriends().iterator().next();
		assertEquals("Mary", friend.getMiddleName());
		assertEquals("Joseph", friend.getName());
		assertFalse(iterator.hasNext());
	}


	@Test
	public void shouldFindNodeEntitiesWithLabels() {
		executeUpdate("CREATE (u:User {name:'Michal'}) CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'}) CREATE (u)-[:VISITED]->(p)");

		Collection<Cinema> cinemas = cinemaRepository.findByName("Picturehouse");
		Iterator<Cinema> iterator = cinemas.iterator();
		assertTrue(iterator.hasNext());
		Cinema cinema = iterator.next();
		assertEquals("Picturehouse", cinema.getName());
		assertEquals(1, cinema.getVisited().size());
		assertEquals("Michal", cinema.getVisited().iterator().next().getName());
		assertFalse(iterator.hasNext());

		List<Cinema> theatres = cinemaRepository.findByLocation("London");
		assertEquals(2, theatres.size());
		assertTrue(theatres.contains(new Cinema("Picturehouse")));
		assertTrue(theatres.contains(new Cinema("Ritzy")));
	}


	@Test
	public void shouldFindNodeEntitiesMultipleAndedProperties() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByNameAndLocation("Ritzy", "London");
		assertEquals(1, theatres.size());
		assertEquals("Michal", theatres.get(0).getVisited().iterator().next().getName());
	}


	@Test
	public void shouldFindNodeEntititiesMultipleOredProperties() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByNameOrLocation("Ritzy", "London");
		assertEquals(2, theatres.size());
	}



	@Test
	public void shouldReturnNoResultsCorrectly() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		Collection<Cinema> theatres = cinemaRepository.findByName("Does not exist");
		assertEquals(0, theatres.size());
	}


	@Test
	public void shouldFindREWithSingleProperty() {
		User critic = new User("Gary");
		TempMovie film = new TempMovie("Fast and Furious XVII");
		Rating filmRating = critic.rate(film, 2, "They've made far too many of these films now!");


		userRepository.save(critic);

		List<Rating> ratings = ratingRepository.findByStars(2);
		assertNotNull(ratings);
		Rating loadedRating = ratings.get(0);
		assertNotNull("The loaded rating shouldn't be null", loadedRating);
		assertEquals("The relationship properties weren't saved correctly", filmRating.getStars(), loadedRating.getStars());
		assertEquals("The rated film wasn't saved correctly", film.getTitle(), loadedRating.getMovie().getTitle());
		assertEquals("The critic wasn't saved correctly", critic.getId(), loadedRating.getUser().getId());
	}


	@Test
	public void shouldFindNodeEntititiesWithComparisonOperators() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London', capacity:5000}) CREATE (r:Theatre {name:'Ritzy', city:'London', capacity: 7500})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByCapacityGreaterThan(3000);
		assertEquals(2, theatres.size());
		assertTrue(theatres.contains(new Cinema("Picturehouse")));
		assertTrue(theatres.contains(new Cinema("Ritzy")));

		theatres = cinemaRepository.findByCapacityGreaterThan(6000);
		assertEquals(1, theatres.size());
		assertEquals("Ritzy", theatres.get(0).getName());

		theatres = cinemaRepository.findByCapacityLessThan(8000);
		assertEquals(2, theatres.size());
		assertTrue(theatres.contains(new Cinema("Picturehouse")));
		assertTrue(theatres.contains(new Cinema("Ritzy")));

		theatres = cinemaRepository.findByCapacityLessThan(7000);
		assertEquals(1, theatres.size());
		assertEquals("Picturehouse", theatres.get(0).getName());

	}


	@Test
	public void shouldFindNodeEntititiesWithNestedProperty() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London', capacity:5000}) CREATE (r:Theatre {name:'Ritzy', city:'London', capacity: 7500})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByVisitedName("Michal");
		assertEquals(1, theatres.size());
		assertTrue(theatres.contains(new Cinema("Ritzy")));
	}


	@Test
	public void shouldFindNodeEntititiesWithBaseAndNestedProperty() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London', capacity:5000}) CREATE (r:Theatre {name:'Ritzy', city:'London', capacity: 7500}) CREATE (m:Theatre {name:'Regal', city:'Bombay', capacity: 5000})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)  CREATE (u)-[:VISITED]->(m)");

		List<Cinema> theatres = cinemaRepository.findByLocationAndVisitedName("London", "Michal");
		assertEquals(1, theatres.size());
		assertTrue(theatres.contains(new Cinema("Ritzy")));
	}
}

<code block>


package org.springframework.data.neo4j.integration.movies;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;

import org.junit.After;
import org.junit.ClassRule;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.ogm.metadata.MappingException;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.movies.context.PersistenceContext;
import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.data.neo4j.integration.movies.domain.queryresult.*;
import org.springframework.data.neo4j.integration.movies.repo.CinemaRepository;
import org.springframework.data.neo4j.integration.movies.repo.UnmanagedUserPojo;
import org.springframework.data.neo4j.integration.movies.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {PersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class QueryIntegrationTest {

    @ClassRule
    public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CinemaRepository cinemaRepository;

    @After
    public void clearDatabase() {
        neo4jRule.clearDatabase();
    }

    private void executeUpdate(String cypher) {
        new ExecutionEngine(neo4jRule.getGraphDatabaseService()).execute(cypher);
    }

    @Test
    public void shouldFindArbitraryGraph() {
        executeUpdate(
                "CREATE " +
                        "(dh:Movie {title:'Die Hard'}), " +
                        "(fe:Movie {title: 'The Fifth Element'}), " +
                        "(bw:User {name: 'Bruce Willis'}), " +
                        "(ar:User {name: 'Alan Rickman'}), " +
                        "(mj:User {name: 'Milla Jovovich'}), " +
                        "(mj)-[:ACTED_IN]->(fe), " +
                        "(ar)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(fe)");

        List<Map<String, Object>> graph = userRepository.getGraph();
        assertNotNull(graph);
        int i = 0;
        for (Map<String,Object> properties: graph) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }

    @Test
    public void shouldFindScalarValues() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");
        List<Integer> ids = userRepository.getUserIds();
        assertEquals(2, ids.size());
    }

    @Test
    public void shouldFindUserByName() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByName("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindTotalUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        int users = userRepository.findTotalUsers();
        assertEquals(users, 2);
    }

    @Test
    public void shouldFindUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Collection<User> users = userRepository.getAllUsers();
        assertEquals(users.size(), 2);
    }

    @Test
    public void shouldFindUserByNameWithNamedParam() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByNameWithNamedParam("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindUsersAsProperties() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Iterable<Map<String, Object>> users = userRepository.getUsersAsProperties();
        assertNotNull(users);
        int i = 0;
        for (Map<String,Object> properties: users) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }

    @Test
    public void shouldFindUsersAndMapThemToConcreteQueryResultObjectCollection() {
        executeUpdate("CREATE (g:User {name:'Gary', age:32}), (s:User {name:'Sheila', age:29}), (v:User {name:'Vince', age:66})");
        assertEquals("There should be some users in the database", 3, userRepository.findTotalUsers());

        Iterable<UserQueryResult> expected = Arrays.asList(new UserQueryResult("Sheila", 29),
                new UserQueryResult("Gary", 32), new UserQueryResult("Vince", 66));

        Iterable<UserQueryResult> queryResult = userRepository.retrieveAllUsersAndTheirAges();
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals(expected, queryResult);
    }


    @Test(expected = MappingException.class)
    public void shouldThrowMappingExceptionIfQueryResultTypeIsNotManagedInMappingMetadata() {
        executeUpdate("CREATE (:User {name:'Colin'}), (:User {name:'Jeff'})");


        UnmanagedUserPojo queryResult = userRepository.findIndividualUserAsDifferentObject("Jeff");
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals("Jeff", queryResult.getName());
    }

    @Test
    public void shouldFindUsersAndMapThemToProxiedQueryResultInterface() {
        executeUpdate("CREATE (:User {name:'Morne', age:30}), (:User {name:'Abraham', age:31}), (:User {name:'Virat', age:27})");

        UserQueryResultInterface result = userRepository.findIndividualUserAsProxiedObject("Abraham");
        assertNotNull("The query result shouldn't be null", result);
        assertEquals("The wrong user was returned", "Abraham", result.getNameOfUser());
        assertEquals("The wrong user was returned", 31, result.getAgeOfUser());
    }

    @Test
    public void shouldRetrieveUsersByGenderAndConvertToCorrectTypes() {
        executeUpdate("CREATE (:User {name:'David Warner', gender:'MALE'}), (:User {name:'Shikhar Dhawan', gender:'MALE'}), "
                + "(:User {name:'Sarah Taylor', gender:'FEMALE', account: '3456789', deposits:['12345.6','45678.9']})");

        Iterable<RichUserQueryResult> usersByGender = userRepository.findUsersByGender(Gender.FEMALE);
        assertNotNull("The resultant users list shouldn't be null", usersByGender);

        Iterator<RichUserQueryResult> userIterator = usersByGender.iterator();
        assertTrue(userIterator.hasNext());
        RichUserQueryResult userQueryResult = userIterator.next();
        assertEquals(Gender.FEMALE, userQueryResult.getUserGender());
        assertEquals("Sarah Taylor", userQueryResult.getUserName());
        assertEquals(BigInteger.valueOf(3456789), userQueryResult.getUserAccount());
        assertArrayEquals(new BigDecimal[]{BigDecimal.valueOf(12345.6), BigDecimal.valueOf(45678.9)}, userQueryResult.getUserDeposits());
        assertFalse(userIterator.hasNext());
    }


    @Ignore
    @Test
    public void shouldMapNodeEntitiesIntoQueryResultObjects() {
        executeUpdate("CREATE (:User {name:'Abraham'}), (:User {name:'Barry'}), (:User {name:'Colin'})");

        EntityWrappingQueryResult wrappedUser = userRepository.findWrappedUserByName("Barry");
        assertNotNull("The loaded wrapper object shouldn't be null", wrappedUser);
        assertNotNull("The enclosed user shouldn't be null", wrappedUser.getUser());
        assertEquals("Barry", wrappedUser.getUser().getName());
    }



}

<code block>


package org.springframework.data.neo4j.integration.movies;

import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.event.TransactionData;
import org.neo4j.graphdb.event.TransactionEventHandler;
import org.neo4j.tooling.GlobalGraphOperations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.movies.context.PersistenceContext;
import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.data.neo4j.integration.movies.repo.UserRepository;
import org.springframework.data.neo4j.integration.movies.service.UserService;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;


@ContextConfiguration(classes = {PersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class TransactionIntegrationTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @Before
    public void populateDatabase() {
        neo4jRule.getGraphDatabaseService().registerTransactionEventHandler(new TransactionEventHandler.Adapter<Object>() {
            @Override
            public Object beforeCommit(TransactionData data) throws Exception {
                System.out.println("The request to commit is denied");
                throw new TransactionInterceptException("Deliberate testing exception");

            }
        });
    }


    @Test(expected = Exception.class)
    public void whenImplicitTransactionFailsNothingShouldBeCreated() {
        try {
            userRepository.save(new User("Michal"));
            fail("should have thrown exception");
        } catch (Exception e) {
            parseExceptionMessage(e.getLocalizedMessage());
            checkDatabase();
        }

    }

    private void parseExceptionMessage(String localizedMessage) {
        String parsed = localizedMessage.replace("{", "{\n");
        parsed = parsed.replace("\\n\\tat", "\n\tat");
        parsed = parsed.replace("},{", "},\n{");
        parsed = parsed.replace("\\n", "\n");

        System.out.println(parsed);

    }

    @Test(expected = Exception.class)
    public void whenExplicitTransactionFailsNothingShouldBeCreated() {
        try {
            userService.saveWithTxAnnotationOnInterface(new User("Michal"));
            fail("should have thrown exception");
        } catch (Exception e) {
            parseExceptionMessage(e.getLocalizedMessage());
            checkDatabase();
        }

    }

    @Test(expected = Exception.class)
    public void whenExplicitTransactionFailsNothingShouldBeCreated2() {
        try {
            userService.saveWithTxAnnotationOnImpl(new User("Michal"));
            fail("should have thrown exception");
        } catch (Exception e) {
            parseExceptionMessage(e.getLocalizedMessage());
            checkDatabase();
        }
    }

    private void checkDatabase() {
        try (Transaction tx = neo4jRule.getGraphDatabaseService().beginTx()) {
            assertFalse(GlobalGraphOperations.at(neo4jRule.getGraphDatabaseService()).getAllNodes().iterator().hasNext());
            tx.success();
        }
    }

    static class TransactionInterceptException extends Exception {
        public TransactionInterceptException(String msg) {
            super(msg);
        }
    }

}

<code block>


package org.springframework.data.neo4j.integration.movies;

import static org.junit.Assert.*;
import static org.neo4j.ogm.testutil.GraphTestUtils.*;

import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Transaction;
import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.neo4j.tooling.GlobalGraphOperations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.neo4j.integration.movies.context.PersistenceContext;
import org.springframework.data.neo4j.integration.movies.domain.*;
import org.springframework.data.neo4j.integration.movies.repo.*;
import org.springframework.data.neo4j.integration.movies.service.UserService;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {PersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class End2EndIntegrationTest {

    private final Logger logger = LoggerFactory.getLogger( End2EndIntegrationTest.class );

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @Autowired
    private CinemaRepository cinemaRepository;

    @Autowired
    private AbstractAnnotatedEntityRepository abstractAnnotatedEntityRepository;

    @Autowired
    private AbstractEntityRepository abstractEntityRepository;

    @Autowired
    private TempMovieRepository tempMovieRepository;

    @Autowired
    private ActorRepository actorRepository;

    @Autowired
    private Session session;

    private GraphDatabaseService getDatabase() {
        return neo4jRule.getGraphDatabaseService();
    }

    @Test
    public void shouldSaveUser()
    {
        User user = new User( "Michal" );
        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    public void shouldSaveUserWithoutName()
    {
        User user = new User();
        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person)" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    public void shouldSaveReleasedMovie()
    {

        Calendar cinemaReleaseDate = createDate( 1994, Calendar.SEPTEMBER, 10, "GMT" );
        Calendar cannesReleaseDate = createDate( 1994, Calendar.MAY, 12, "GMT" );

        ReleasedMovie releasedMovie = new ReleasedMovie( "Pulp Fiction", cinemaReleaseDate.getTime(),
                cannesReleaseDate.getTime() );

        abstractAnnotatedEntityRepository.save( releasedMovie );

        assertSameGraph( getDatabase(),
                "CREATE (m:ReleasedMovie:AbstractAnnotatedEntity {cinemaRelease:'1994-09-10T00:00:00.000Z'," +
                        "cannesRelease:768700800000,title:'Pulp Fiction'})" );
    }

    @Test
    public void shouldSaveReleasedMovie2()
    {

        Calendar cannesReleaseDate = createDate( 1994, Calendar.MAY, 12, "GMT" );

        ReleasedMovie releasedMovie = new ReleasedMovie( "Pulp Fiction", null, cannesReleaseDate.getTime() );

        abstractAnnotatedEntityRepository.save( releasedMovie );

        assertSameGraph( getDatabase(),
                "CREATE (m:ReleasedMovie:AbstractAnnotatedEntity {cannesRelease:768700800000,title:'Pulp Fiction'})" );

    }

    @Test
    public void shouldSaveMovie()
    {
        Movie movie = new Movie( "Pulp Fiction" );
        movie.setTags( new String[]{"cool", "classic"} );
        movie.setImage( new byte[]{1, 2, 3} );

        abstractEntityRepository.save( movie );


        assertSameGraph( getDatabase(), "CREATE (m:Movie {title:'Pulp Fiction', tags:['cool','classic'], " +
                "image:'AQID'})" );
    }

    @Test
    public void shouldSaveUsers()
    {
        Set<User> set = new HashSet<>();
        set.add( new User( "Michal" ) );
        set.add( new User( "Adam" ) );
        set.add( new User( "Vince" ) );

        userRepository.save( set );

        assertSameGraph( getDatabase(), "CREATE (:User:Person {name:'Michal'})," +
                "(:User:Person {name:'Vince'})," +
                "(:User:Person {name:'Adam'})" );

        assertEquals( 3, userRepository.count() );
    }

    @Test
    public void shouldSaveUsers2()
    {
        List<User> list = new LinkedList<>();
        list.add( new User( "Michal" ) );
        list.add( new User( "Adam" ) );
        list.add( new User( "Vince" ) );

        userRepository.save( list );

        assertSameGraph( getDatabase(), "CREATE (:User:Person {name:'Michal'})," +
                "(:User:Person {name:'Vince'})," +
                "(:User:Person {name:'Adam'})" );

        assertEquals( 3, userRepository.count() );
    }

    @Test
    public void shouldUpdateUserUsingRepository()
    {
        User user = userRepository.save( new User( "Michal" ) );
        user.setName( "Adam" );
        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Adam'})" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    @Ignore  


    public void shouldUpdateUserUsingTransactionalService()
    {
        User user = new User( "Michal" );
        userRepository.save( user );

        userService.updateUser( user, "Adam" ); 


        assertSameGraph( getDatabase(), "CREATE (u:User {name:'Adam'})" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    public void shouldFindUser()
    {
        User user = new User( "Michal" );
        userRepository.save( user );

        User loaded = userRepository.findOne( 0L );

        assertEquals( 0L, (long) loaded.getId() );
        assertEquals( "Michal", loaded.getName() );

        assertTrue( loaded.equals( user ) );
        assertTrue( loaded == user );
    }

    @Test
    public void shouldFindActorByNumericValueOfStringProperty() {
        Actor actor = new Actor("1", "Tom Hanks");
        actorRepository.save(actor);

        assertNotNull(findByProperty(Actor.class, "id" , "1" ).iterator().next());
    }

    @Test
    public void shouldFindUserWithoutName()
    {
        User user = new User();
        userRepository.save( user );

        User loaded = userRepository.findOne( 0L );

        assertEquals( 0L, (long) loaded.getId() );
        assertNull( loaded.getName() );

        assertTrue( loaded.equals( user ) );
        assertTrue( loaded == user );
    }

    @Test
    public void shouldDeleteUser()
    {
        User user = new User( "Michal" );
        userRepository.save( user );
        userRepository.delete( user );

        assertFalse( userRepository.findAll().iterator().hasNext() );
        assertFalse( userRepository.findAll( 1 ).iterator().hasNext() );
        assertFalse( userRepository.exists( 0L ) );
        assertEquals( 0, userRepository.count() );
        assertNull( userRepository.findOne( 0L ) );
        assertNull( userRepository.findOne( 0L, 10 ) );

        try ( Transaction tx = getDatabase().beginTx() )
        {
            assertFalse( GlobalGraphOperations.at( getDatabase() ).getAllNodes().iterator().hasNext() );
            tx.success();
        }
    }

    @Test
    public void shouldCreateUsersInMultipleThreads() throws InterruptedException, Neo4jFailedToStartException
    {
        waitForNeo4jToStart( 5000l );

        ExecutorService executor = Executors.newFixedThreadPool( 10 );
        CountDownLatch latch = new CountDownLatch( 100 );

        for ( int i = 0; i < 100; i++ )
        {
            executor.submit( new UserSaver( latch, i ) );
        }

        latch.await(); 
        executor.shutdown();

        assertEquals( 100, userRepository.count() );
    }

    @Test(expected= DataAccessException.class)
    @Ignore("this isn't working as the docs say it should. We must be doing something wrong")
    public void shouldInterceptOGMExceptions() {
        User user = null;
        userRepository.save(user);
    }

    private class UserSaver implements Runnable
    {

        private final int userNumber;
        private final CountDownLatch latch;

        public UserSaver( CountDownLatch latch, int userNumber )
        {
            this.latch = latch;
            this.userNumber = userNumber;
        }

        @Override
        public void run()
        {
            try
            {
                logger.info( "Calling userRepository.save() for user #" + this.userNumber );
                userRepository.save( new User( "User" + this.userNumber ) );
                logger.info( "Saved user #" + this.userNumber );
            }
            finally
            {
                latch.countDown();
            }
        }

    }

    @Test
    public void shouldSaveUserAndNewGenre()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );

        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})-[:INTERESTED]->(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldSaveUserAndNewGenres()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );
        user.interestedIn( new Genre( "Historical" ) );
        user.interestedIn( new Genre( "Thriller" ) );

        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE " +
                "(u:User:Person {name:'Michal'})," +
                "(g1:Genre {name:'Drama'})," +
                "(g2:Genre {name:'Historical'})," +
                "(g3:Genre {name:'Thriller'})," +
                "(u)-[:INTERESTED]->(g1)," +
                "(u)-[:INTERESTED]->(g2)," +
                "(u)-[:INTERESTED]->(g3)" );
    }

    @Test
    public void shouldSaveUserAndNewGenre2()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );

        userRepository.save( user, 1 );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})-[:INTERESTED]->(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldSaveUserAndExistingGenre()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        User vince = new User( "Vince" );
        vince.interestedIn( drama );

        userRepository.save( vince );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(v:User:Person {name:'Vince'})," +
                "(g:Genre {name:'Drama'})," +
                "(m)-[:INTERESTED]->(g)," +
                "(v)-[:INTERESTED]->(g)" );
    }

    @Test
    public void shouldSaveUserButNotGenre()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );

        userRepository.save( user, 0 );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})" );
    }

    @Test
    public void shouldUpdateGenreWhenSavedThroughUser()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        drama.setName( "New Drama" );

        userRepository.save( michal );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(g:Genre {name:'New Drama'})," +
                "(m)-[:INTERESTED]->(g)" );
    }

    @Test
    public void shouldRemoveGenreFromUser()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        michal.notInterestedIn( drama );

        userRepository.save( michal );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldRemoveGenreFromUserUsingService()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        userService.notInterestedIn( michal.getId(), drama.getId() );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldAddNewVisitorToCinema()
    {
        Cinema cinema = new Cinema( "Odeon" );
        cinema.addVisitor( new User( "Michal" ) );

        cinemaRepository.save( cinema );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(c:Theatre {name:'Odeon', capacity:0})," +
                "(m)-[:VISITED]->(c)" );
    }

    @Test
    public void shouldAddExistingVisitorToCinema()
    {
        User michal = new User( "Michal" );
        userRepository.save( michal );

        Cinema cinema = new Cinema( "Odeon" );
        cinema.addVisitor( michal );

        cinemaRepository.save( cinema );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(c:Theatre {name:'Odeon', capacity:0})," +
                "(m)-[:VISITED]->(c)" );
    }

    @Test
    public void shouldBefriendPeople()
    {
        User michal = new User( "Michal" );
        michal.befriend( new User( "Adam" ) );
        userRepository.save( michal );

        try
        {
            assertSameGraph( getDatabase(), "CREATE (m:User {name:'Michal'})-[:FRIEND_OF]->(a:User:Person {name:'Adam'})" );
        }
        catch ( AssertionError error )
        {
            assertSameGraph( getDatabase(), "CREATE (m:User:Person {name:'Michal'})<-[:FRIEND_OF]-(a:User:Person {name:'Adam'})" );
        }
    }

    @Test
    public void shouldLoadFriends()
    {
        new ExecutionEngine( getDatabase() ).execute( "CREATE (m:User {name:'Michal'})-[:FRIEND_OF]->(a:User " +
                "{name:'Adam'})" );

        User michal = ((Iterable<User>)findByProperty(User.class, "name", "Michal" )).iterator().next();
        assertEquals( 1, michal.getFriends().size() );

        User adam = michal.getFriends().iterator().next();
        assertEquals( "Adam", adam.getName() );
        assertEquals( 1, adam.getFriends().size() );

        assertTrue( michal == adam.getFriends().iterator().next() );
        assertTrue( michal.equals( adam.getFriends().iterator().next() ) );
    }

    @Test
    public void shouldLoadFriends2()
    {
        new ExecutionEngine( getDatabase() ).execute( "CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User " +
                "{name:'Adam'})" );

        User michal = ((Iterable<User>)findByProperty(User.class, "name", "Michal" )).iterator().next();
        assertEquals( 1, michal.getFriends().size() );

        User adam = michal.getFriends().iterator().next();
        assertEquals( "Adam", adam.getName() );
        assertEquals( 1, adam.getFriends().size() );

        assertTrue( michal == adam.getFriends().iterator().next() );
        assertTrue( michal.equals( adam.getFriends().iterator().next() ) );
    }


    @Test
    public void shouldSaveNewUserAndNewMovieWithRatings()
    {
        User user = new User( "Michal" );
        TempMovie movie = new TempMovie( "Pulp Fiction" );
        user.rate( movie, 5, "Best movie ever" );
        userRepository.save( user );

        User michal = ((Iterable<User>)findByProperty(User.class, "name", "Michal" )).iterator().next();

        assertSameGraph(getDatabase(), "CREATE (u:User:Person {name:'Michal'})-[:RATED {stars:5, " +
                "comment:'Best movie ever'}]->(m:Movie {title:'Pulp Fiction'})");
    }

    @Test
    public void shouldSaveNewUserRatingsForAnExistingMovie()
    {
        TempMovie movie = new TempMovie( "Pulp Fiction" );

        movie = tempMovieRepository.save(movie);


        User user = new User( "Michal" );
        user.rate( movie, 5, "Best movie ever" );
        userRepository.save( user );

        TempMovie tempMovie = ((Iterable<TempMovie>) findByProperty(TempMovie.class, "title", "Pulp Fiction")).iterator().next();
        assertEquals(1,tempMovie.getRatings().size());
    }

    private Calendar createDate( int y, int m, int d, String tz )
    {

        Calendar calendar = Calendar.getInstance();

        calendar.set( y, m, d );
        calendar.setTimeZone( TimeZone.getTimeZone( tz ) );



        calendar.set( Calendar.HOUR_OF_DAY, 0 );
        calendar.set( Calendar.MINUTE, 0 );
        calendar.set( Calendar.SECOND, 0 );
        calendar.set( Calendar.MILLISECOND, 0 );

        return calendar;
    }


    private void waitForNeo4jToStart( long maxTimeToWait ) throws Neo4jFailedToStartException
    {
        long startTime = System.currentTimeMillis();
        org.neo4j.ogm.session.transaction.Transaction transaction;

        do
        {
            transaction = new SessionFactory().openSession( neo4jRule.url() ).beginTransaction();
        } while ( transaction == null && System.currentTimeMillis() - startTime <= maxTimeToWait );

        if ( transaction == null )
        {
            throw new Neo4jFailedToStartException( maxTimeToWait );
        }
    }

    private static class Neo4jFailedToStartException extends Exception
    {
        private Neo4jFailedToStartException( long timeoutValue )
        {
            super( String.format( "Could not start neo4j instance in [%d] ms", timeoutValue ) );
        }
    }

    protected Iterable<?> findByProperty(Class clazz, String propertyName, Object propertyValue) {
        return session.loadAll(clazz, new Filter(propertyName, propertyValue));
    }

    protected Iterable<?> findByProperty(Class clazz, String propertyName, Object propertyValue, int depth) {
        return session.loadAll(clazz, new Filter(propertyName, propertyValue), depth);
    }

}

<code block>


package org.springframework.data.neo4j.integration.movies.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.movies"})
@EnableNeo4jRepositories("org.springframework.data.neo4j.integration.movies.repo")
@EnableTransactionManagement
public class PersistenceContext extends Neo4jConfiguration {

    @Autowired
    private Environment env;

    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.movies.domain");
    }

    @Bean
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;

import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.NodeEntity;


@NodeEntity
public abstract class AbstractAnnotatedEntity {

    @GraphId
    Long nodeId;
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;

import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

import java.util.HashSet;
import java.util.Set;



@NodeEntity(label = "Movie")
public class TempMovie extends AbstractEntity {

    private String title;
    @Relationship(type = "RATED", direction = Relationship.INCOMING)
    private Set<Rating> ratings = new HashSet<>();

    public TempMovie() {
    }

    public TempMovie(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }

    public void addRating(Rating rating) {
        ratings.add(rating);
    }

    public Set<Rating> getRatings() {
        return ratings;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;


public class Person {
	private Long id;

	private String name;


	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Long getId() {
		return id;
	}
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;

import org.neo4j.ogm.annotation.EndNode;
import org.neo4j.ogm.annotation.RelationshipEntity;
import org.neo4j.ogm.annotation.StartNode;


@RelationshipEntity(type = "RATED")
public class Rating {
    private Long id;

    @StartNode
    private User user;
    @EndNode
    private TempMovie movie;
    private int stars;
    private String comment;

    public Rating() {}

    public Rating(User user, TempMovie movie, int stars, String comment) {
        this.user = user;
        this.movie = movie;
        this.stars = stars;
        this.comment = comment;
    }

    public Long getId() {
        return id;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public void setMovie(TempMovie movie) {
        this.movie = movie;
    }

    public void setStars(int stars) {
        this.stars = stars;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public User getUser() {
        return user;
    }

    public TempMovie getMovie() {
        return movie;
    }

    public int getStars() {
        return stars;
    }

    public String getComment() {
        return comment;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;

import java.util.HashSet;
import java.util.Set;

import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Property;
import org.neo4j.ogm.annotation.Relationship;


@NodeEntity(label = "Theatre")
public class Cinema {

    private Long id;
    private String name;

    @Property(name = "city")
    private String location;

    @Relationship(direction = Relationship.INCOMING)
    private Set<User> visited = new HashSet<>();

    private int capacity;

    public Cinema() {
    }

    public Cinema(String name) {
        this.name = name;
    }

    public Cinema(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
    }

    public void addVisitor(User user) {
        visited.add(user);
    }

    public String getName() {
        return name;
    }

    public String getLocation() {
        return location;
    }

    public Set<User> getVisited() {
        return visited;
    }

    public int getCapacity() {
        return capacity;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Cinema cinema = (Cinema) o;

        return !(name != null ? !name.equals(cinema.name) : cinema.name != null);
    }

    @Override
    public int hashCode() {
        return name != null ? name.hashCode() : 0;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;


public class Genre {

    private Long id;
    private String name;

    public Genre() {
    }

    public Genre(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;


public class Movie extends AbstractEntity {

    private String title;
    private String[] tags;
    private byte[] image;

    public Movie() {
    }

    public Movie(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }

    public String[] getTags() {
        return tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;

import org.neo4j.ogm.annotation.Property;
import org.neo4j.ogm.annotation.typeconversion.DateLong;

import java.util.Date;



public class ReleasedMovie extends AbstractAnnotatedEntity {

    private String title;

    @Property(name = "cinemaRelease")
    private Date released;

    @DateLong
    private Date cannesRelease;

    public ReleasedMovie() {
    }

    public ReleasedMovie(String title, Date released, Date cannesRelease) {
        this.title = title;
        this.released = released;
        this.cannesRelease = cannesRelease;
    }

    public String getTitle() {
        return title;
    }

    public Date getReleased() {
        return released;
    }

    public Date getCannesRelease() {
        return cannesRelease;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.neo4j.ogm.annotation.Relationship;


public class User extends Person{

    private String middleName;
    private Collection<Genre> interested = new HashSet<>();

    @Relationship(type = "FRIEND_OF", direction = Relationship.UNDIRECTED)
    private Collection<User> friends = new HashSet<>();

    @Relationship(type = "RATED")
    private Set<Rating> ratings = new HashSet<>();

    public User() {
    }

    public User(String name) {
        setName(name);
    }

    public void interestedIn(Genre genre) {
        interested.add(genre);
    }

    public void notInterestedIn(Genre genre) {
        interested.remove(genre);
    }

    public void befriend(User user) {
        friends.add(user);
        user.friends.add(this);
    }


    public Rating rate(TempMovie movie, int stars, String comment) {
        Rating rating = new Rating(this, movie, stars, comment);
        movie.addRating(rating);
        ratings.add(rating);
        return rating;
    }

    public Collection<User> getFriends() {
        return friends;
    }

    public String getMiddleName()
    {
        return middleName;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;


import org.neo4j.ogm.annotation.GraphId;


public class Actor{

    @GraphId
    Long nodeId;
    String id;
    String name;

    public Actor() {
    }

    public Actor(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain;


public abstract class AbstractEntity {

    Long id;
}

<code block>


package org.springframework.data.neo4j.integration.movies.domain.queryresult;

import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.integration.movies.domain.User;


@QueryResult
public class EntityWrappingQueryResult {

    private User user;

    public User getUser() {
        return user;
    }

}

<code block>


package org.springframework.data.neo4j.integration.movies.domain.queryresult;

import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.neo4j.ogm.annotation.Property;
import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.integration.movies.repo.UserRepository;


@QueryResult
public class UserQueryResult {

    private String userName;
    private int age;

    UserQueryResult() {

    }

    public UserQueryResult(String name, int age) {
        this.userName = name;
        this.age = age;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String name) {
        this.userName = name;
    }

    @Property(name = "user.age")
    public int getAge() {
        return age;
    }

    @Property(name = "user.age")
    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public int hashCode() {
        final int prime = 23;
        int result = 1;
        result = prime * result + age;
        result = prime * result + ((userName == null) ? 0 : userName.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        UserQueryResult other = (UserQueryResult) obj;
        if (age != other.age)
            return false;
        if (userName == null) {
            if (other.userName != null)
                return false;
        } else if (!userName.equals(other.userName))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return ReflectionToStringBuilder.toString(this);
    }

}

<code block>


package org.springframework.data.neo4j.integration.movies.domain.queryresult;

public enum Gender {

    FEMALE, MALE;

}

<code block>


package org.springframework.data.neo4j.integration.movies.domain.queryresult;

import java.math.BigDecimal;
import java.math.BigInteger;

import org.springframework.data.neo4j.annotation.QueryResult;


@QueryResult
public class RichUserQueryResult {

    private Gender userGender; 
    private String userName;
    private BigInteger userAccount;
    private BigDecimal[] userDeposits;

    public Gender getUserGender() {
        return userGender;
    }

    public String getUserName() {
        return userName;
    }

    public BigInteger getUserAccount() {
        return userAccount;
    }

    public BigDecimal[] getUserDeposits() {
        return userDeposits;
    }
}
<code block>


package org.springframework.data.neo4j.integration.movies.domain.queryresult;

import org.neo4j.ogm.annotation.Property;
import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.integration.movies.repo.UserRepository;


@QueryResult
public interface UserQueryResultInterface {

    @Property(name = "user.name")
    String getNameOfUser();

    int getAgeOfUser();

}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.integration.movies.domain.Genre;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface GenreRepository extends GraphRepository<Genre> {
}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.integration.movies.domain.AbstractEntity;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface AbstractEntityRepository extends GraphRepository<AbstractEntity> {
}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import java.util.List;

import org.springframework.data.neo4j.integration.movies.domain.Rating;
import org.springframework.data.neo4j.repository.GraphRepository;


public interface RatingRepository extends GraphRepository<Rating> {

	List<Rating> findByStars(int stars);


}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import java.util.Collection;
import java.util.List;

import org.springframework.data.neo4j.integration.movies.domain.Cinema;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface CinemaRepository extends GraphRepository<Cinema> {

	Collection<Cinema> findByName(String name);

	List<Cinema> findByLocation(String location);

	List<Cinema> findByNameAndLocation(String name, String location);

	List<Cinema> findByNameOrLocation(String name, String location);

	List<Cinema> findByCapacityGreaterThan(int capacity);

	List<Cinema> findByCapacityLessThan(int capacity);

	List<Cinema> findByVisitedName(String name);

	List<Cinema> findByLocationAndVisitedName(String location, String name);
}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.data.neo4j.integration.movies.domain.queryresult.*;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Collection;
import java.util.List;
import java.util.Map;


@Repository
public interface UserRepository extends GraphRepository<User> {

    Collection<User> findByName(String name);

    Collection<User> findByMiddleName(String middleName);

    @Query("MATCH (user:User) RETURN COUNT(user)")
    int findTotalUsers();

    @Query("MATCH (user:User) RETURN user.id")
    List<Integer> getUserIds();

    @Query("MATCH (user:User) RETURN user.name, user.id")
    Iterable<Map<String,Object>> getUsersAsProperties();

    @Query("MATCH (user:User) RETURN user")
    Collection<User> getAllUsers();

    @Query("MATCH (m:Movie)<-[:ACTED_IN]-(a:User) RETURN m.title as movie, collect(a.name) as cast")
    List<Map<String, Object>> getGraph();

    @Query("MATCH (user:User{name:{name}}) RETURN user")
    User findUserByNameWithNamedParam(@Param("name") String name);

    @Query("MATCH (user:User{name:{0}}) RETURN user")
    User findUserByName(String name);

    @Query("MATCH (user:User) RETURN id(user) AS userId, user.name AS userName, user.age ORDER BY user.age")
    Iterable<UserQueryResult> retrieveAllUsersAndTheirAges();

    @Query("MATCH (user:User{name:{0}}) RETURN user.name AS name")
    UnmanagedUserPojo findIndividualUserAsDifferentObject(String name);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user.name, user.age AS ageOfUser")
    UserQueryResultInterface findIndividualUserAsProxiedObject(String name);

    @Query("MATCH (user:User) WHERE user.gender={0} RETURN user.name AS UserName, user.gender AS UserGender, user.account as UserAccount, user.deposits as UserDeposits")
    Iterable<RichUserQueryResult> findUsersByGender(Gender gender);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user")
    EntityWrappingQueryResult findWrappedUserByName(String userName);

}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.integration.movies.domain.Actor;
import org.springframework.data.neo4j.repository.GraphRepository;



public interface ActorRepository extends GraphRepository<Actor> {
}


<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.integration.movies.domain.AbstractAnnotatedEntity;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface AbstractAnnotatedEntityRepository extends GraphRepository<AbstractAnnotatedEntity> {
}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.integration.movies.domain.TempMovie;
import org.springframework.data.neo4j.repository.GraphRepository;


public interface TempMovieRepository extends GraphRepository<TempMovie> {
}

<code block>


package org.springframework.data.neo4j.integration.movies.repo;

import org.springframework.data.neo4j.annotation.QueryResult;


@QueryResult
public class UnmanagedUserPojo {

    private String name;

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

}

<code block>


package org.springframework.data.neo4j.integration.movies.service;

import org.springframework.data.neo4j.integration.movies.domain.Genre;
import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.data.neo4j.integration.movies.repo.GenreRepository;
import org.springframework.data.neo4j.integration.movies.repo.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private GenreRepository genreRepository;

    @Override
    public void updateUser(User user, String newName) {
        user.setName(newName);
    }

    @Override
    public void notInterestedIn(Long userId, Long genreId) {
        User user = userRepository.findOne(userId);
        Genre genre = genreRepository.findOne(genreId);

        user.notInterestedIn(genre);
        userRepository.save(user);
    }

    @Override
    public void saveWithTxAnnotationOnInterface(User user) {
        userRepository.save(user);
    }

    @Transactional
    @Override
    public void saveWithTxAnnotationOnImpl(User user) {
        userRepository.save(user);
    }
}

<code block>


package org.springframework.data.neo4j.integration.movies.service;

import org.springframework.data.neo4j.integration.movies.domain.User;
import org.springframework.transaction.annotation.Transactional;


public interface UserService {

    @Transactional
    void updateUser(User user, String newName);

    @Transactional
    void notInterestedIn(Long userId, Long genreId);

    @Transactional
    void saveWithTxAnnotationOnInterface(User user);

    void saveWithTxAnnotationOnImpl(User user);
}

<code block>


package org.springframework.data.neo4j.integration.repositories;

import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.repositories.context.PersistenceContext;
import org.springframework.data.neo4j.integration.repositories.domain.Movie;
import org.springframework.data.neo4j.integration.repositories.repo.MovieRepository;
import org.springframework.data.neo4j.util.IterableUtils;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.*;
import static org.neo4j.ogm.testutil.GraphTestUtils.*;


@ContextConfiguration(classes = {PersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class RepositoryDefinitionTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private MovieRepository movieRepository;

    @Test
    public void shouldProxyAndAutoImplementRepositoryDefinitionAnnotatedRepo() {
        Movie movie = new Movie("PF");
        movieRepository.save(movie);

        assertSameGraph(neo4jRule.getGraphDatabaseService(), "CREATE (m:Movie {title:'PF'})");

        assertEquals(1, IterableUtils.count(movieRepository.findAll()));
    }

}

<code block>


package org.springframework.data.neo4j.integration.repositories;

import static org.junit.Assert.*;
import static org.neo4j.ogm.testutil.GraphTestUtils.*;

import org.junit.Rule;
import org.junit.Test;
import org.neo4j.ogm.metadata.MetaData;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.data.neo4j.integration.repositories.domain.Movie;
import org.springframework.data.neo4j.integration.repositories.repo.MovieRepository;
import org.springframework.data.neo4j.mapping.Neo4jMappingContext;
import org.springframework.data.neo4j.repository.support.GraphRepositoryFactory;
import org.springframework.data.neo4j.util.IterableUtils;
import org.springframework.data.repository.core.support.RepositoryFactorySupport;


public class ProgrammaticRepositoryTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    private MovieRepository movieRepository;

    @Test
    public void canInstantiateRepositoryProgrammatically() {
        RepositoryFactorySupport factory = new GraphRepositoryFactory(
                new SessionFactory("org.springframework.data.neo4j.integration.repositories.domain").openSession(neo4jRule.url()),new Neo4jMappingContext(new MetaData()));
        movieRepository = factory.getRepository(MovieRepository.class);

        Movie movie = new Movie("PF");
        movieRepository.save(movie);

        assertSameGraph(neo4jRule.getGraphDatabaseService(), "CREATE (m:Movie {title:'PF'})");

        assertEquals(1, IterableUtils.count(movieRepository.findAll()));
    }

}

<code block>


package org.springframework.data.neo4j.integration.repositories;

import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.repositories.repo.PersistenceContextInTheSamePackage;
import org.springframework.data.neo4j.integration.repositories.domain.User;
import org.springframework.data.neo4j.integration.repositories.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.neo4j.ogm.testutil.GraphTestUtils.assertSameGraph;


@ContextConfiguration(classes = {PersistenceContextInTheSamePackage.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class RepoScanningTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Test
    public void enableNeo4jRepositoriesShouldScanSelfPackageByDefault() {
        User user = new User("Michal");
        userRepository.save(user);

        assertSameGraph(neo4jRule.getGraphDatabaseService(), "CREATE (u:User {name:'Michal'})");
    }

}

<code block>


package org.springframework.data.neo4j.integration.repositories.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.repositories"})
@EnableNeo4jRepositories("org.springframework.data.neo4j.integration.repositories")
@EnableTransactionManagement
public class PersistenceContext extends Neo4jConfiguration {

    @Override
    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.repositories.domain");
    }

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }
}

<code block>


package org.springframework.data.neo4j.integration.repositories.domain;



public class Movie {

    private Long id;
    private String title;

    public Movie() {
    }

    public Movie(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }
}

<code block>


package org.springframework.data.neo4j.integration.repositories.domain;


public class User {

    private Long id;
    private String name;

    public User() {
    }

    public User(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.integration.repositories.repo;

import org.springframework.data.neo4j.integration.repositories.domain.Movie;
import org.springframework.data.repository.RepositoryDefinition;


@RepositoryDefinition(domainClass = Movie.class, idClass = Long.class)
public interface MovieRepository {

    <S extends Movie> S save(S entity);

    Iterable<Movie> findAll();
}

<code block>


package org.springframework.data.neo4j.integration.repositories.repo;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableNeo4jRepositories 
@EnableTransactionManagement
public class PersistenceContextInTheSamePackage extends Neo4jConfiguration {

    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.repositories.domain");
    }

    @Bean
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }
}

<code block>


package org.springframework.data.neo4j.integration.repositories.repo;

import org.springframework.data.neo4j.integration.repositories.domain.User;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface UserRepository extends GraphRepository<User> {
}

<code block>


package org.springframework.data.neo4j.integration.transactions;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.integration.transactions.service.WrapperService;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;


@ContextConfiguration(classes = {ApplicationConfig.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class TransactionBoundaryTest {

    @Autowired
    WrapperService wrapperService;

    @Before
    public void tearDown() {
        wrapperService.purge();
    }

    @Test
    public void shouldRollbackNestedTransactions() {
        try {
            wrapperService.composeSuccessThenFail();
            fail("should have thrown exception");
        } catch (Exception e) {
            assertEquals(0, countNodes());
        }
    }

    @Test
    public void shouldCommitNestedTransactions() {
        try {
            wrapperService.composeSuccessThenSuccess();
            assertEquals(2, countNodes());
        } catch (Exception e) {
            fail("should not have thrown exception");
        }

    }

    @Test
    public void shouldAlwaysCommitIfForced() {
        try {
            wrapperService.composeForceThenFail();
            fail("should have thrown exception");
        } catch (Exception e) {
            assertEquals(1, countNodes());
        }
    }


    private int countNodes() {
        Iterator iterator = wrapperService.loadNodes().iterator();
        int i = 0;
        while (iterator.hasNext()) {
            iterator.next();
            i++;
        }
        return i;
    }
}

<code block>


package org.springframework.data.neo4j.integration.transactions;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.integration.transactions"})
@EnableTransactionManagement
public class ApplicationConfig extends Neo4jConfiguration {

    @Override
    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.integration.transactions");
    }

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

}

<code block>

package org.springframework.data.neo4j.integration.transactions.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;


@Component
@Transactional
public class WrapperService {

    private static final Logger log = LoggerFactory.getLogger(BusinessService.class);

    @Autowired
    BusinessService businessService;

    public void composeSuccessThenFail() {
        businessService.successMethod();
        businessService.failMethod();
    }

    public void composeSuccessThenSuccess() {
        businessService.successMethod();
        businessService.successMethod();
    }

    public void composeForceThenFail() {
        businessService.forceMethod();
        businessService.failMethod();
    }

    public Iterable<Map<String, Object>> loadNodes() {
        return businessService.loadNodes();
    }

    public void purge() {
        businessService.purge();
    }
}

<code block>

package org.springframework.data.neo4j.integration.transactions.service;

import org.neo4j.ogm.session.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.template.Neo4jTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.Map;


@Component
public class BusinessService {

    private static final Logger log = LoggerFactory.getLogger(BusinessService.class);

    @Autowired
    private Session session;

    @Transactional
    public void successMethod() {
        insertNode();
    }

    @Transactional
    public void failMethod() {
        insertNode();
        throw new RuntimeException("Deliberate to force rollback of entire transaction");
    }

    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void forceMethod() {
        insertNode();
    }

    private void insertNode() {
        new Neo4jTemplate(session).execute("CREATE node");
    }

    public Iterable<Map<String, Object>> loadNodes() {
        return new Neo4jTemplate(session).query("MATCH n RETURN n", new HashMap<String, Object>());
    }

    public void purge() {
        new Neo4jTemplate(session).execute("MATCH n DELETE n");

    }
}

<code block>


package org.springframework.data.neo4j.repository.query;

import org.neo4j.ogm.session.result.QueryStatistics;
import org.neo4j.ogm.session.Session;
import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.mapping.Neo4jMappingContext;
import org.springframework.data.neo4j.repository.query.derived.DerivedGraphRepositoryQuery;
import org.springframework.data.repository.core.RepositoryMetadata;
import org.springframework.data.repository.query.QueryMethod;
import org.springframework.data.repository.query.RepositoryQuery;

import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;


public class GraphQueryMethod extends QueryMethod {

    private final Session session;
    private final Method method;
    private final Query queryAnnotation;
    private final RepositoryMetadata metadata;
    private final Neo4jMappingContext mappingContext;

    public GraphQueryMethod(Method method, RepositoryMetadata metadata, Session session, Neo4jMappingContext mappingContext) {
        super(method, metadata);
        this.method = method;
        this.session = session;
        this.queryAnnotation = method.getAnnotation(Query.class);
        this.metadata = metadata;
        this.mappingContext = mappingContext;
    }

    public String getQuery() {
        return queryAnnotation.value();
    }

    public Method getMethod() {
        return method;
    }

    @Override
    public String getNamedQueryName() {
        throw new UnsupportedOperationException("OGM does not currently support named queries.");
    }


    public Class<?> resolveConcreteReturnType() {
        Class<?> type = this.method.getReturnType();
        Type genericType = this.method.getGenericReturnType();

        if (Iterable.class.isAssignableFrom(type)) {
            if (genericType instanceof ParameterizedType) {
                ParameterizedType returnType = (ParameterizedType) genericType;
                Type componentType = returnType.getActualTypeArguments()[0];

                return componentType instanceof ParameterizedType ?
                        (Class<?>) ((ParameterizedType) componentType).getRawType() :
                        (Class<?>) componentType;
            } else {
                return Object.class;
            }
        }

        return type;
    }

    public RepositoryQuery createQuery() {
        if (method.getAnnotation(Query.class) != null) {
            if (resolveConcreteReturnType().isAnnotationPresent(QueryResult.class)) {
                return new QueryResultGraphRepositoryQuery(this, session);
            }
            return new GraphRepositoryQuery(this, session);
        }
        return new DerivedGraphRepositoryQuery(this, session, mappingContext);

    }

    @Override
    public boolean isModifyingQuery() {
        return method.getReturnType().isAssignableFrom(QueryStatistics.class);
    }
}

<code block>


package org.springframework.data.neo4j.repository.query;

import org.neo4j.ogm.session.Session;
import org.springframework.data.repository.query.Parameter;
import org.springframework.data.repository.query.Parameters;
import org.springframework.data.repository.query.RepositoryQuery;

import java.util.HashMap;
import java.util.Map;



public class GraphRepositoryQuery implements RepositoryQuery {

    private final GraphQueryMethod graphQueryMethod;

    protected final Session session;

    public GraphRepositoryQuery(GraphQueryMethod graphQueryMethod, Session session) {
        this.graphQueryMethod = graphQueryMethod;
        this.session = session;
    }

    @Override
    public final Object execute(Object[] parameters) {
        Class<?> returnType = graphQueryMethod.getMethod().getReturnType();
        Class<?> concreteType = graphQueryMethod.resolveConcreteReturnType();

        Map<String, Object> params = resolveParams(parameters);

        return execute(returnType, concreteType, getQueryString(), params);
    }

    protected Object execute(Class<?> returnType, Class<?> concreteType, String cypherQuery, Map<String, Object> queryParams) {

        if (returnType.equals(Void.class) || returnType.equals(void.class)) {
            session.execute(cypherQuery, queryParams);
            return null;
        }

        if (graphQueryMethod.isModifyingQuery()) {
            return session.execute(cypherQuery, queryParams);
        }

        if (Iterable.class.isAssignableFrom(returnType)) {


            if (Map.class.isAssignableFrom(concreteType)) {
                return session.query(cypherQuery, queryParams);
            }
            return session.query(concreteType, cypherQuery, queryParams);
        }

        return session.queryForObject(returnType, cypherQuery, queryParams);
    }

    private Map<String, Object> resolveParams(Object[] parameters) {
        Map<String, Object> params = new HashMap<>();
        Parameters<?, ?> methodParameters = graphQueryMethod.getParameters();

        for (int i = 0; i < parameters.length; i++) {
            Parameter parameter = methodParameters.getParameter(i);

            if (parameter.isNamedParameter()) {
                params.put(parameter.getName(), parameters[i]);
            } else {
                params.put("" + i, parameters[i]);
            }
        }
        return params;
    }

    @Override
    public GraphQueryMethod getQueryMethod() {
        return graphQueryMethod;
    }

    protected String getQueryString() {
        return getQueryMethod().getQuery();
    }

}
<code block>
package org.springframework.data.neo4j.queries;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.session.result.QueryStatistics;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.galaxy.context.GalaxyContext;
import org.springframework.data.neo4j.examples.galaxy.domain.World;
import org.springframework.data.neo4j.examples.galaxy.repo.WorldRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;


@ContextConfiguration(classes = {GalaxyContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class QueryReturnTypesTest {

    @Autowired
    WorldRepository worldRepository;

    @Test
    public void shouldCallExecuteWhenPrimitiveVoidReturnTypeOnQuery() {

        World world = new World("Tatooine", 0);

        worldRepository.save(world);
        worldRepository.touchAllWorlds();

        world = worldRepository.findOne(world.getId());
        assertNotNull(world.getUpdated());

    }

    @Test
    public void shouldCallExecuteWhenVoidReturnTypeOnQuery() {

        World tatooine = new World("Tatooine", 0);
        World dagobah = new World("Dagobah", 0);

        tatooine.addRocketRouteTo(dagobah);

        worldRepository.save(tatooine);
        worldRepository.touchOnlyWorldsReachableByRocket();

        tatooine = worldRepository.findOne(tatooine.getId());

        assertNotNull(tatooine.getUpdated());
        assertEquals(1, tatooine.getReachableByRocket().size());

        for (World world : tatooine.getReachableByRocket()) {
            assertNotNull(world.getUpdated());
        }

    }

    @Test
    public void shouldReturnStatisticsIfRequested() {

        World tatooine = new World("Tatooine", 0);

        worldRepository.save(tatooine);

        QueryStatistics stats = worldRepository.touchAllWorldsWithStatistics();

        assertEquals(1, stats.getPropertiesSet());

    }

}

<code block>


package org.springframework.data.neo4j.queries;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.movies.context.MoviesContext;
import org.springframework.data.neo4j.examples.movies.domain.Cinema;
import org.springframework.data.neo4j.examples.movies.domain.Rating;
import org.springframework.data.neo4j.examples.movies.domain.TempMovie;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.repo.CinemaRepository;
import org.springframework.data.neo4j.examples.movies.repo.RatingRepository;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {MoviesContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class DerivedQueryTest {


	@ClassRule
	public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

	private static Session session;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private CinemaRepository cinemaRepository;

	@Autowired
	private RatingRepository ratingRepository;

	@Before
	public void init() throws IOException {
		session = new SessionFactory("org.springframework.data.neo4j.examples.movies.domain").openSession(neo4jRule.url());
	}

	@After
	public void clearDatabase() {
		neo4jRule.clearDatabase();
	}

	private void executeUpdate(String cypher) {
		new ExecutionEngine(neo4jRule.getGraphDatabaseService()).execute(cypher);
	}

	@Test
	public void shouldFindUsersByName() {
		executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

		Collection<User> users = userRepository.findByName("Michal");
		Iterator<User> iterator = users.iterator();
		assertTrue(iterator.hasNext());
		User user = iterator.next();
		assertEquals("Michal", user.getName());
		assertEquals(1, user.getFriends().size());
		assertEquals("Adam", user.getFriends().iterator().next().getName());
		assertFalse(iterator.hasNext());
	}

	@Test
	public void shouldFindUsersByMiddleName() {
		executeUpdate("CREATE (m:User {middleName:'Joseph'})<-[:FRIEND_OF]-(a:User {middleName:'Mary', name: 'Joseph'})");

		Collection<User> users = userRepository.findByMiddleName("Joseph");
		Iterator<User> iterator = users.iterator();
		assertTrue(iterator.hasNext());
		User user = iterator.next();
		assertEquals("Joseph", user.getMiddleName());
		assertEquals(1, user.getFriends().size());
		User friend = user.getFriends().iterator().next();
		assertEquals("Mary", friend.getMiddleName());
		assertEquals("Joseph", friend.getName());
		assertFalse(iterator.hasNext());
	}


	@Test
	public void shouldFindNodeEntitiesWithLabels() {
		executeUpdate("CREATE (u:User {name:'Michal'}) CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'}) CREATE (u)-[:VISITED]->(p)");

		Collection<Cinema> cinemas = cinemaRepository.findByName("Picturehouse");
		Iterator<Cinema> iterator = cinemas.iterator();
		assertTrue(iterator.hasNext());
		Cinema cinema = iterator.next();
		assertEquals("Picturehouse", cinema.getName());
		assertEquals(1, cinema.getVisited().size());
		assertEquals("Michal", cinema.getVisited().iterator().next().getName());
		assertFalse(iterator.hasNext());

		List<Cinema> theatres = cinemaRepository.findByLocation("London");
		assertEquals(2, theatres.size());
		assertTrue(theatres.contains(new Cinema("Picturehouse")));
		assertTrue(theatres.contains(new Cinema("Ritzy")));
	}


	@Test
	public void shouldFindNodeEntitiesMultipleAndedProperties() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByNameAndLocation("Ritzy", "London");
		assertEquals(1, theatres.size());
		assertEquals("Michal", theatres.get(0).getVisited().iterator().next().getName());
	}


	@Test
	public void shouldFindNodeEntititiesMultipleOredProperties() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByNameOrLocation("Ritzy", "London");
		assertEquals(2, theatres.size());
	}



	@Test
	public void shouldReturnNoResultsCorrectly() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London'}) CREATE (r:Theatre {name:'Ritzy', city:'London'})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		Collection<Cinema> theatres = cinemaRepository.findByName("Does not exist");
		assertEquals(0, theatres.size());
	}


	@Test
	public void shouldFindREWithSingleProperty() {
		User critic = new User("Gary");
		TempMovie film = new TempMovie("Fast and Furious XVII");
		Rating filmRating = critic.rate(film, 2, "They've made far too many of these films now!");


		userRepository.save(critic);

		List<Rating> ratings = ratingRepository.findByStars(2);
		assertNotNull(ratings);
		Rating loadedRating = ratings.get(0);
		assertNotNull("The loaded rating shouldn't be null", loadedRating);
		assertEquals("The relationship properties weren't saved correctly", filmRating.getStars(), loadedRating.getStars());
		assertEquals("The rated film wasn't saved correctly", film.getTitle(), loadedRating.getMovie().getTitle());
		assertEquals("The critic wasn't saved correctly", critic.getId(), loadedRating.getUser().getId());
	}


	@Test
	public void shouldFindNodeEntititiesWithComparisonOperators() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London', capacity:5000}) CREATE (r:Theatre {name:'Ritzy', city:'London', capacity: 7500})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByCapacityGreaterThan(3000);
		assertEquals(2, theatres.size());
		assertTrue(theatres.contains(new Cinema("Picturehouse")));
		assertTrue(theatres.contains(new Cinema("Ritzy")));

		theatres = cinemaRepository.findByCapacityGreaterThan(6000);
		assertEquals(1, theatres.size());
		assertEquals("Ritzy", theatres.get(0).getName());

		theatres = cinemaRepository.findByCapacityLessThan(8000);
		assertEquals(2, theatres.size());
		assertTrue(theatres.contains(new Cinema("Picturehouse")));
		assertTrue(theatres.contains(new Cinema("Ritzy")));

		theatres = cinemaRepository.findByCapacityLessThan(7000);
		assertEquals(1, theatres.size());
		assertEquals("Picturehouse", theatres.get(0).getName());

	}


	@Test
	public void shouldFindNodeEntititiesWithNestedProperty() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London', capacity:5000}) CREATE (r:Theatre {name:'Ritzy', city:'London', capacity: 7500})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)");

		List<Cinema> theatres = cinemaRepository.findByVisitedName("Michal");
		assertEquals(1, theatres.size());
		assertTrue(theatres.contains(new Cinema("Ritzy")));
	}


	@Test
	public void shouldFindNodeEntititiesWithBaseAndNestedProperty() {
		executeUpdate("CREATE (p:Theatre {name:'Picturehouse', city:'London', capacity:5000}) CREATE (r:Theatre {name:'Ritzy', city:'London', capacity: 7500}) CREATE (m:Theatre {name:'Regal', city:'Bombay', capacity: 5000})" +
				" CREATE (u:User {name:'Michal'}) CREATE (u)-[:VISITED]->(r)  CREATE (u)-[:VISITED]->(m)");

		List<Cinema> theatres = cinemaRepository.findByLocationAndVisitedName("London", "Michal");
		assertEquals(1, theatres.size());
		assertTrue(theatres.contains(new Cinema("Ritzy")));
	}
}

<code block>


package org.springframework.data.neo4j.queries;

import org.junit.After;
import org.junit.ClassRule;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.ogm.metadata.MappingException;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.movies.context.MoviesContext;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.queryresult.*;
import org.springframework.data.neo4j.examples.movies.repo.CinemaRepository;
import org.springframework.data.neo4j.examples.movies.repo.UnmanagedUserPojo;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;

import static org.junit.Assert.*;


@ContextConfiguration(classes = {MoviesContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class QueryIntegrationTest {

    @ClassRule
    public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CinemaRepository cinemaRepository;

    @After
    public void clearDatabase() {
        neo4jRule.clearDatabase();
    }

    private void executeUpdate(String cypher) {
        new ExecutionEngine(neo4jRule.getGraphDatabaseService()).execute(cypher);
    }

    @Test
    public void shouldFindArbitraryGraph() {
        executeUpdate(
                "CREATE " +
                        "(dh:Movie {title:'Die Hard'}), " +
                        "(fe:Movie {title: 'The Fifth Element'}), " +
                        "(bw:User {name: 'Bruce Willis'}), " +
                        "(ar:User {name: 'Alan Rickman'}), " +
                        "(mj:User {name: 'Milla Jovovich'}), " +
                        "(mj)-[:ACTED_IN]->(fe), " +
                        "(ar)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(fe)");

        List<Map<String, Object>> graph = userRepository.getGraph();
        assertNotNull(graph);
        int i = 0;
        for (Map<String,Object> properties: graph) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }

    @Test
    public void shouldFindScalarValues() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");
        List<Integer> ids = userRepository.getUserIds();
        assertEquals(2, ids.size());
    }

    @Test
    public void shouldFindUserByName() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByName("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindTotalUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        int users = userRepository.findTotalUsers();
        assertEquals(users, 2);
    }

    @Test
    public void shouldFindUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Collection<User> users = userRepository.getAllUsers();
        assertEquals(users.size(), 2);
    }

    @Test
    public void shouldFindUserByNameWithNamedParam() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByNameWithNamedParam("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindUsersAsProperties() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Iterable<Map<String, Object>> users = userRepository.getUsersAsProperties();
        assertNotNull(users);
        int i = 0;
        for (Map<String,Object> properties: users) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }

    @Test
    public void shouldFindUsersAndMapThemToConcreteQueryResultObjectCollection() {
        executeUpdate("CREATE (g:User {name:'Gary', age:32}), (s:User {name:'Sheila', age:29}), (v:User {name:'Vince', age:66})");
        assertEquals("There should be some users in the database", 3, userRepository.findTotalUsers());

        Iterable<UserQueryResult> expected = Arrays.asList(new UserQueryResult("Sheila", 29),
                new UserQueryResult("Gary", 32), new UserQueryResult("Vince", 66));

        Iterable<UserQueryResult> queryResult = userRepository.retrieveAllUsersAndTheirAges();
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals(expected, queryResult);
    }


    @Test(expected = MappingException.class)
    public void shouldThrowMappingExceptionIfQueryResultTypeIsNotManagedInMappingMetadata() {
        executeUpdate("CREATE (:User {name:'Colin'}), (:User {name:'Jeff'})");


        UnmanagedUserPojo queryResult = userRepository.findIndividualUserAsDifferentObject("Jeff");
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals("Jeff", queryResult.getName());
    }

    @Test
    public void shouldFindUsersAndMapThemToProxiedQueryResultInterface() {
        executeUpdate("CREATE (:User {name:'Morne', age:30}), (:User {name:'Abraham', age:31}), (:User {name:'Virat', age:27})");

        UserQueryResultInterface result = userRepository.findIndividualUserAsProxiedObject("Abraham");
        assertNotNull("The query result shouldn't be null", result);
        assertEquals("The wrong user was returned", "Abraham", result.getNameOfUser());
        assertEquals("The wrong user was returned", 31, result.getAgeOfUser());
    }

    @Test
    public void shouldRetrieveUsersByGenderAndConvertToCorrectTypes() {
        executeUpdate("CREATE (:User {name:'David Warner', gender:'MALE'}), (:User {name:'Shikhar Dhawan', gender:'MALE'}), "
                + "(:User {name:'Sarah Taylor', gender:'FEMALE', account: '3456789', deposits:['12345.6','45678.9']})");

        Iterable<RichUserQueryResult> usersByGender = userRepository.findUsersByGender(Gender.FEMALE);
        assertNotNull("The resultant users list shouldn't be null", usersByGender);

        Iterator<RichUserQueryResult> userIterator = usersByGender.iterator();
        assertTrue(userIterator.hasNext());
        RichUserQueryResult userQueryResult = userIterator.next();
        assertEquals(Gender.FEMALE, userQueryResult.getUserGender());
        assertEquals("Sarah Taylor", userQueryResult.getUserName());
        assertEquals(BigInteger.valueOf(3456789), userQueryResult.getUserAccount());
        assertArrayEquals(new BigDecimal[]{BigDecimal.valueOf(12345.6), BigDecimal.valueOf(45678.9)}, userQueryResult.getUserDeposits());
        assertFalse(userIterator.hasNext());
    }


    @Ignore
    @Test
    public void shouldMapNodeEntitiesIntoQueryResultObjects() {
        executeUpdate("CREATE (:User {name:'Abraham'}), (:User {name:'Barry'}), (:User {name:'Colin'})");

        EntityWrappingQueryResult wrappedUser = userRepository.findWrappedUserByName("Barry");
        assertNotNull("The loaded wrapper object shouldn't be null", wrappedUser);
        assertNotNull("The enclosed user shouldn't be null", wrappedUser.getUser());
        assertEquals("Barry", wrappedUser.getUser().getName());
    }



}

<code block>


package org.springframework.data.neo4j.examples.jsr303;

import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.*;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan
@EnableNeo4jRepositories("org.springframework.data.neo4j.examples.jsr303.repo")
@EnableTransactionManagement
public class JSR303Context extends Neo4jConfiguration {

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.examples.jsr303.domain");
    }

    @Override
    @Bean
    @Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
    public Session getSession() throws Exception {
        return super.getSession();
    }

}

<code block>


package org.springframework.data.neo4j.examples.jsr303;

import org.codehaus.jackson.map.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.jsr303.domain.Adult;
import org.springframework.data.neo4j.examples.jsr303.service.AdultService;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@ContextConfiguration(classes = {WebConfiguration.class, JSR303Context.class})
@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class JSR303Test {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private AdultService service;

    @Autowired
    WebApplicationContext wac;

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
    }

    @Test
    public void testCanCreateAnAdult() throws Exception {

        Adult adult = new Adult("Peter", 18);
        String json = objectMapper.writeValueAsString(adult);

        mockMvc.perform(
                post("/adults")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isOk());
    }

    @Test
    public void testCantCreateAnAdultUnderEighteen() throws Exception {

        Adult adult = new Adult("Peter", 16);
        String json = objectMapper.writeValueAsString(adult);

        mockMvc.perform(
                post("/adults")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json))
                .andExpect(status().isBadRequest());
    }

}

<code block>


package org.springframework.data.neo4j.examples.jsr303;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.examples.jsr303.controller"})
@EnableWebMvc
public class WebConfiguration extends WebMvcConfigurerAdapter {

    @Bean(name="validator")
    public LocalValidatorFactoryBean validator() {
        return new LocalValidatorFactoryBean();
    }

}

<code block>


package org.springframework.data.neo4j.examples.jsr303.domain;

import javax.validation.constraints.Min;


public class Adult {

    private Long id;
    private String name;
    @Min(18)
    private Integer age;

    public Adult() {}

    public Adult(String name, Integer age) {
        this.name = name;
        this.age = age;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }
}

<code block>


package org.springframework.data.neo4j.examples.jsr303.repo;

import org.springframework.data.neo4j.examples.jsr303.domain.Adult;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface AdultRepository extends GraphRepository<Adult> {
}

<code block>


package org.springframework.data.neo4j.examples.jsr303.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.jsr303.domain.Adult;
import org.springframework.data.neo4j.examples.jsr303.repo.AdultRepository;
import org.springframework.stereotype.Service;


@Service
public class AdultService {

    @Autowired
    private AdultRepository repository;

    public Adult save(Adult adult) {
        return repository.save(adult);
    }
}

<code block>


package org.springframework.data.neo4j.examples.jsr303.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.jsr303.service.AdultService;
import org.springframework.data.neo4j.examples.jsr303.domain.Adult;
import org.springframework.data.neo4j.examples.jsr303.service.AdultService;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.ValidationException;


@Controller
public class AdultController {

    @Autowired
    private AdultService service;

    @RequestMapping(value = "/adults", method = RequestMethod.POST, consumes = "application/json")
    @ResponseBody
    public Adult create (@Valid @RequestBody Adult entity, BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            throw new ValidationException("oops");
        }
        return service.save(entity);
    }

    @ExceptionHandler(ValidationException.class)
    @ResponseBody
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public void handleException(ValidationException ve) { }

}

<code block>


package org.springframework.data.neo4j.examples.galaxy;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.cypher.query.Pagination;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.neo4j.examples.galaxy.service.GalaxyService;
import org.springframework.data.neo4j.examples.galaxy.context.GalaxyContext;
import org.springframework.data.neo4j.examples.galaxy.domain.World;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static org.hamcrest.core.AnyOf.anyOf;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.StringContains.containsString;
import static org.junit.Assert.*;



@ContextConfiguration(classes = {GalaxyContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class GalaxyServiceTest {

    @Autowired
    private GalaxyService galaxyService;

    @Before
    public void setUp() {
        galaxyService.deleteAll();
        assertEquals(0, galaxyService.getNumberOfWorlds());
    }

    @Test
    public void shouldAllowDirectWorldCreation() {

        World myWorld = galaxyService.createWorld("mine", 0);
        Collection<World> foundWorlds = (Collection<World>) galaxyService.getAllWorlds();

        assertEquals(1, foundWorlds.size());
        World mine = foundWorlds.iterator().next();

        assertEquals(myWorld.getName(), mine.getName());

    }

    @Test
    public void shouldHaveCorrectNumberOfWorlds() {
        galaxyService.makeSomeWorlds();
        assertEquals(13, galaxyService.getNumberOfWorlds());
    }

    @Test
    public void createAllWorldsAtOnce() {
        galaxyService.makeAllWorldsAtOnce();
        assertEquals(13, galaxyService.getNumberOfWorlds());

        World earth = galaxyService.findWorldByName("Earth");
        World mars = galaxyService.findWorldByName("Mars");

        assertTrue(mars.canBeReachedFrom(earth));
        assertTrue(earth.canBeReachedFrom(mars));
    }

    @Test
    public void shouldFindWorldsById() {
        galaxyService.makeSomeWorlds();

        for (World world : galaxyService.getAllWorlds()) {
            World foundWorld = galaxyService.findWorldById(world.getId());
            assertNotNull(foundWorld);
        }
    }


    @Test
    public void shouldFindWorldsByName() {
        galaxyService.makeSomeWorlds();
        for (World world : galaxyService.getAllWorlds()) {
            World foundWorld = galaxyService.findWorldByName(world.getName());
            assertNotNull(foundWorld);
        }
    }

    @Test
    public void shouldReachMarsFromEarth() {
        galaxyService.makeSomeWorlds();

        World earth = galaxyService.findWorldByName("Earth");
        World mars = galaxyService.findWorldByName("Mars");

        assertTrue(mars.canBeReachedFrom(earth));
        assertTrue(earth.canBeReachedFrom(mars));
    }

    @Test
    public void shouldFindAllWorlds() {

        Collection<World> madeWorlds = galaxyService.makeSomeWorlds();
        Iterable<World> foundWorlds = galaxyService.getAllWorlds();

        int countOfFoundWorlds = 0;
        for (World foundWorld : foundWorlds) {
            assertTrue(madeWorlds.contains(foundWorld));
            countOfFoundWorlds++;
        }

        assertEquals(madeWorlds.size(), countOfFoundWorlds);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void shouldFindWorldsWith1Moon() {
        galaxyService.makeSomeWorlds();

        for (World worldWithOneMoon : galaxyService.findAllByNumberOfMoons(1)) {
            assertThat(
                    worldWithOneMoon.getName(),
                    is(anyOf(containsString("Earth"), containsString("Midgard"))));
        }
    }

    @Test
    public void shouldNotFindKrypton() {
        galaxyService.makeSomeWorlds();
        World krypton = galaxyService.findWorldByName("Krypton");
        assertNull(krypton);
    }

    @Test
    public void shouldSupportPaging() {

        List<World>  worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();

        int count = worlds.size();
        int PAGE_SIZE = 3;
        int pages = count / PAGE_SIZE + 1;
        long n = 0;
        for (World world : worlds) {
            n += world.getId();
        }

        for (int page = 0; page < pages; page++) {
            Iterable<World> paged = galaxyService.findAllWorlds(new Pagination(page, PAGE_SIZE));
            for (World world : paged) {
                System.out.println(world.getName() + ":" + world.getId());
                n -= world.getId();
            }
        }

        assertEquals(0L, n);

    }

    @Test
    public void shouldDetectNotOnLastPage() {

        int count = galaxyService.makeAllWorldsAtOnce().size();

        assertEquals(count, 13);

        Pageable pageable = new PageRequest(2, 3);
        Page<World> worlds = galaxyService.findAllWorlds(pageable);


        for ( World world : worlds) {
            System.out.println(world.getName() + ": " + world.getId());
        }
        assertTrue(worlds.hasNext());

    }

    @Test
    public void shouldDetectLastPage() {

        int count = galaxyService.makeAllWorldsAtOnce().size();

        assertEquals(count, 13);

        Pageable pageable = new PageRequest(4, 3);
        Page<World> worlds = galaxyService.findAllWorlds(pageable);


        for ( World world : worlds) {
            System.out.println(world.getName() + ": " + world.getId());
        }
        assertFalse(worlds.hasNext());

    }

    @Test
    public void shouldPageAllWorlds() {

        long sum = 0;
        List<World> worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();
        for (World world : worlds) {
            sum += world.getId();
        }



        Pageable pageable = new PageRequest(0, 3);

        for(;;) {
            Page<World> page = galaxyService.findAllWorlds(pageable);
            for ( World world : page) {
                System.out.println(world.getName() + ":" + world.getId());
                sum-=world.getId();
            }
            if (!page.hasNext()) {
                break;
            }
            pageable = pageable.next();
        }

        assertEquals(0, sum);
    }

    @Test
    public void shouldPageAllWorldsSorted() {

        List<World> worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();
        int count = worlds.size();
        assertEquals(count, 13);

        String[] sortedNames = getNamesSorted(worlds);

        Pageable pageable = new PageRequest(0, 3, Sort.Direction.ASC, "name");

        int i = 0;
        for(;;) {
            Page<World> page = galaxyService.findAllWorlds(pageable);
            for ( World world : page ) {
                assertEquals(sortedNames[i], world.getName());
                count--;
                i++;
            }
            if (!page.hasNext()) {
                break;
            }
            pageable = pageable.next();
        }

        assertEquals(0, count);
    }

    @Test
    public void shouldIterateAllWorldsSorted() {

        List<World> worlds = (List<World>) galaxyService.makeAllWorldsAtOnce();
        int count = worlds.size();
        assertEquals(count, 13);

        String[] sortedNames = getNamesSorted(worlds);

        Sort sort = new Sort(Sort.Direction.ASC, "name");
        int i = 0;
        for (World world : galaxyService.findAllWorlds(sort)) {
            assertEquals(sortedNames[i], world.getName());
            count--;
            i++;
        }

        assertEquals(0, count);
    }

    private String[] getNamesSorted(List<World> worlds) {
        List<String> names = new ArrayList();

        for (World world : worlds) {
            names.add(world.getName());
        }

        String[] sortedNames = names.toArray(new String[]{});
        Arrays.sort(sortedNames);
        return sortedNames;
    }

}

<code block>


package org.springframework.data.neo4j.examples.galaxy.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.examples.galaxy.*"})
@PropertySource("classpath:helloworld.properties")
@EnableNeo4jRepositories("org.springframework.data.neo4j.examples.galaxy.repo")
@EnableTransactionManagement
public class GalaxyContext extends Neo4jConfiguration {


    @Autowired
    private Environment environment;

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.examples.galaxy.domain");
    }

}

<code block>


package org.springframework.data.neo4j.examples.galaxy.domain;

import org.neo4j.ogm.annotation.Relationship;

import java.util.HashSet;
import java.util.Set;


public class World {

    private final static String REACHABLE_BY_ROCKET = "REACHABLE_BY_ROCKET";

    private Long id;

    private String name;

    private int moons;

    public Long getUpdated() {
        return updated;
    }

    public void setUpdated(long updated) {
        this.updated = updated;
    }

    private Long updated;

    private Set<World> reachableByRocket = new HashSet<>();

    public World(String name, int moons) {
        this.name = name;
        this.moons = moons;
    }

    public World() {
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getMoons() {
        return moons;
    }

    public void addRocketRouteTo(World otherWorld) {
        reachableByRocket.add(otherWorld);

        otherWorld.reachableByRocket.add(this); 
    }

    @Relationship(type=REACHABLE_BY_ROCKET)
    public Set<World> getReachableByRocket() {
        return this.reachableByRocket;
    }

    @Relationship(type=REACHABLE_BY_ROCKET)
    public void setReachableByRocket(Set<World> reachableByRocket) {
        this.reachableByRocket.clear();
        this.reachableByRocket = reachableByRocket;
    }

    public boolean canBeReachedFrom(World otherWorld) {
        return reachableByRocket.contains(otherWorld);
    }

    @Override
    public int hashCode() {
        return (id == null) ? 0 : id.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        World other = (World) obj;
        if (id == null) return other.id == null;
        return id.equals(other.id);
    }

    @Override
    public String toString() {
        return String.format("World{name='%s', moons=%d}", name, moons);
    }
}

<code block>


package org.springframework.data.neo4j.examples.galaxy.repo;

import org.neo4j.ogm.session.result.QueryStatistics;
import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.examples.galaxy.domain.World;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface WorldRepository extends GraphRepository<World> {

    @Query("MATCH (n:World) SET n.updated=timestamp()")
    public void touchAllWorlds();

    @Query("MATCH (n:World) SET n.updated=timestamp()")
    public QueryStatistics touchAllWorldsWithStatistics();

    @Query("MATCH (n:World)-[:REACHABLE_BY_ROCKET]->(m) SET m.updated=timestamp()")
    public Void touchOnlyWorldsReachableByRocket();

}

<code block>


package org.springframework.data.neo4j.examples.galaxy.service;

import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.cypher.query.Pagination;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.neo4j.examples.galaxy.domain.World;
import org.springframework.data.neo4j.examples.galaxy.repo.WorldRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collection;


@Service
@Transactional
public class GalaxyService {

    @Autowired
    private WorldRepository worldRepository;

    @Autowired
    Session session;

    public long getNumberOfWorlds() {
        return worldRepository.count();
    }

    public World createWorld(String name, int moons) {
        return worldRepository.save(new World(name, moons));
    }

    public Iterable<World> getAllWorlds() {
        return worldRepository.findAll();
    }

    public World findWorldById(Long id) {
        return worldRepository.findOne(id);
    }

    public World findWorldByName(String name) {
        Iterable<World> worlds = findByProperty("name", name);
        if (worlds.iterator().hasNext()) {
            return worlds.iterator().next();
        } else {
            return null;
        }
    }

    public Iterable<World> findAllByNumberOfMoons(int numberOfMoons) {
        return findByProperty("moons", numberOfMoons);
    }

    public Collection<World> makeSomeWorlds() {

        Collection<World> worlds = new ArrayList<World>();


        worlds.add(createWorld("Mercury", 0));
        worlds.add(createWorld("Venus", 0));

        World earth = createWorld("Earth", 1);
        World mars = createWorld("Mars", 2);

        mars.addRocketRouteTo(earth);






        worldRepository.save(mars);




        worlds.add(earth);
        worlds.add(mars);

        worlds.add(createWorld("Jupiter", 63));
        worlds.add(createWorld("Saturn", 62));
        worlds.add(createWorld("Uranus", 27));
        worlds.add(createWorld("Neptune", 13));


        worlds.add(createWorld("Alfheimr", 0));
        worlds.add(createWorld("Midgard", 1));
        worlds.add(createWorld("Muspellheim", 2));
        worlds.add(createWorld("Asgard", 63));
        worlds.add(createWorld("Hel", 62));

        return worlds;
    }


    public Collection<World> makeAllWorldsAtOnce() {

        Collection<World> worlds = new ArrayList<World>();
        

        
        worlds.add(new World("Mercury", 0));
        worlds.add(new World("Venus", 0));

        World earth = new World("Earth", 1);
        World mars = new World("Mars", 2);

        mars.addRocketRouteTo(earth);
        earth.addRocketRouteTo(mars);

        worlds.add(earth);
        worlds.add(mars);

        worlds.add(new World("Jupiter", 63));
        worlds.add(new World("Saturn", 62));
        worlds.add(new World("Uranus", 27));
        worlds.add(new World("Neptune", 13));


        worlds.add(new World("Alfheimr", 0));
        worlds.add(new World("Midgard", 1));
        worlds.add(new World("Muspellheim", 2));
        worlds.add(new World("Asgard", 63));
        worlds.add(new World("Hel", 62));

        worldRepository.save(worlds);

        return worlds;
    }
    
    public void deleteAll() {
        worldRepository.deleteAll();
    }

    private Iterable<World> findByProperty(String propertyName, Object propertyValue) {
        return session.loadAll(World.class, new Filter(propertyName, propertyValue));
    }

    public Iterable<World> findByProperty(String propertyName, Object propertyValue, int depth) {
        return session.loadAll(World.class, new Filter(propertyName, propertyValue), depth);
    }


    public Iterable<World> findAllWorlds(Pagination paging) {
        return session.loadAll(World.class, paging, 0);

    }

    public Iterable<World> findAllWorlds(Sort sort) {
        return worldRepository.findAll(sort, 0);

    }

    public Page<World> findAllWorlds(Pageable pageable) {
        return worldRepository.findAll(pageable, 0);
    }

    public Iterable<World> findAllWorlds(Sort sort, int depth) {
        return worldRepository.findAll(sort, depth);
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies;

import static org.junit.Assert.*;
import static org.neo4j.ogm.testutil.GraphTestUtils.*;

import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Transaction;
import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.neo4j.tooling.GlobalGraphOperations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.neo4j.examples.movies.context.MoviesContext;
import org.springframework.data.neo4j.examples.movies.domain.*;
import org.springframework.data.neo4j.examples.movies.repo.*;
import org.springframework.data.neo4j.examples.movies.service.UserService;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {MoviesContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class MoviesIntegrationTest {

    private final Logger logger = LoggerFactory.getLogger( MoviesIntegrationTest.class );

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @Autowired
    private CinemaRepository cinemaRepository;

    @Autowired
    private AbstractAnnotatedEntityRepository abstractAnnotatedEntityRepository;

    @Autowired
    private AbstractEntityRepository abstractEntityRepository;

    @Autowired
    private TempMovieRepository tempMovieRepository;

    @Autowired
    private ActorRepository actorRepository;

    @Autowired
    private Session session;

    private GraphDatabaseService getDatabase() {
        return neo4jRule.getGraphDatabaseService();
    }

    @Test
    public void shouldSaveUser()
    {
        User user = new User( "Michal" );
        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    public void shouldSaveUserWithoutName()
    {
        User user = new User();
        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person)" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    public void shouldSaveReleasedMovie()
    {

        Calendar cinemaReleaseDate = createDate( 1994, Calendar.SEPTEMBER, 10, "GMT" );
        Calendar cannesReleaseDate = createDate( 1994, Calendar.MAY, 12, "GMT" );

        ReleasedMovie releasedMovie = new ReleasedMovie( "Pulp Fiction", cinemaReleaseDate.getTime(),
                cannesReleaseDate.getTime() );

        abstractAnnotatedEntityRepository.save( releasedMovie );

        assertSameGraph( getDatabase(),
                "CREATE (m:ReleasedMovie:AbstractAnnotatedEntity {cinemaRelease:'1994-09-10T00:00:00.000Z'," +
                        "cannesRelease:768700800000,title:'Pulp Fiction'})" );
    }

    @Test
    public void shouldSaveReleasedMovie2()
    {

        Calendar cannesReleaseDate = createDate( 1994, Calendar.MAY, 12, "GMT" );

        ReleasedMovie releasedMovie = new ReleasedMovie( "Pulp Fiction", null, cannesReleaseDate.getTime() );

        abstractAnnotatedEntityRepository.save( releasedMovie );

        assertSameGraph( getDatabase(),
                "CREATE (m:ReleasedMovie:AbstractAnnotatedEntity {cannesRelease:768700800000,title:'Pulp Fiction'})" );

    }

    @Test
    public void shouldSaveMovie()
    {
        Movie movie = new Movie( "Pulp Fiction" );
        movie.setTags( new String[]{"cool", "classic"} );
        movie.setImage( new byte[]{1, 2, 3} );

        abstractEntityRepository.save( movie );


        assertSameGraph( getDatabase(), "CREATE (m:Movie {title:'Pulp Fiction', tags:['cool','classic'], " +
                "image:'AQID'})" );
    }

    @Test
    public void shouldSaveUsers()
    {
        Set<User> set = new HashSet<>();
        set.add( new User( "Michal" ) );
        set.add( new User( "Adam" ) );
        set.add( new User( "Vince" ) );

        userRepository.save( set );

        assertSameGraph( getDatabase(), "CREATE (:User:Person {name:'Michal'})," +
                "(:User:Person {name:'Vince'})," +
                "(:User:Person {name:'Adam'})" );

        assertEquals( 3, userRepository.count() );
    }

    @Test
    public void shouldSaveUsers2()
    {
        List<User> list = new LinkedList<>();
        list.add( new User( "Michal" ) );
        list.add( new User( "Adam" ) );
        list.add( new User( "Vince" ) );

        userRepository.save( list );

        assertSameGraph( getDatabase(), "CREATE (:User:Person {name:'Michal'})," +
                "(:User:Person {name:'Vince'})," +
                "(:User:Person {name:'Adam'})" );

        assertEquals( 3, userRepository.count() );
    }

    @Test
    public void shouldUpdateUserUsingRepository()
    {
        User user = userRepository.save( new User( "Michal" ) );
        user.setName( "Adam" );
        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Adam'})" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    @Ignore  


    public void shouldUpdateUserUsingTransactionalService()
    {
        User user = new User( "Michal" );
        userRepository.save( user );

        userService.updateUser( user, "Adam" ); 


        assertSameGraph( getDatabase(), "CREATE (u:User {name:'Adam'})" );
        assertEquals( 0L, (long) user.getId() );
    }

    @Test
    public void shouldFindUser()
    {
        User user = new User( "Michal" );
        userRepository.save( user );

        User loaded = userRepository.findOne( 0L );

        assertEquals( 0L, (long) loaded.getId() );
        assertEquals( "Michal", loaded.getName() );

        assertTrue( loaded.equals( user ) );
        assertTrue( loaded == user );
    }

    @Test
    public void shouldFindActorByNumericValueOfStringProperty() {
        Actor actor = new Actor("1", "Tom Hanks");
        actorRepository.save(actor);

        assertNotNull(findByProperty(Actor.class, "id" , "1" ).iterator().next());
    }

    @Test
    public void shouldFindUserWithoutName()
    {
        User user = new User();
        userRepository.save( user );

        User loaded = userRepository.findOne( 0L );

        assertEquals( 0L, (long) loaded.getId() );
        assertNull( loaded.getName() );

        assertTrue( loaded.equals( user ) );
        assertTrue( loaded == user );
    }

    @Test
    public void shouldDeleteUser()
    {
        User user = new User( "Michal" );
        userRepository.save( user );
        userRepository.delete( user );

        assertFalse( userRepository.findAll().iterator().hasNext() );
        assertFalse( userRepository.findAll( 1 ).iterator().hasNext() );
        assertFalse( userRepository.exists( 0L ) );
        assertEquals( 0, userRepository.count() );
        assertNull( userRepository.findOne( 0L ) );
        assertNull( userRepository.findOne( 0L, 10 ) );

        try ( Transaction tx = getDatabase().beginTx() )
        {
            assertFalse( GlobalGraphOperations.at( getDatabase() ).getAllNodes().iterator().hasNext() );
            tx.success();
        }
    }

    @Test
    public void shouldCreateUsersInMultipleThreads() throws InterruptedException, Neo4jFailedToStartException
    {
        waitForNeo4jToStart( 5000l );

        ExecutorService executor = Executors.newFixedThreadPool( 10 );
        CountDownLatch latch = new CountDownLatch( 100 );

        for ( int i = 0; i < 100; i++ )
        {
            executor.submit( new UserSaver( latch, i ) );
        }

        latch.await(); 
        executor.shutdown();

        assertEquals( 100, userRepository.count() );
    }

    @Test(expected= DataAccessException.class)
    @Ignore("this isn't working as the docs say it should. We must be doing something wrong")
    public void shouldInterceptOGMExceptions() {
        User user = null;
        userRepository.save(user);
    }

    private class UserSaver implements Runnable
    {

        private final int userNumber;
        private final CountDownLatch latch;

        public UserSaver( CountDownLatch latch, int userNumber )
        {
            this.latch = latch;
            this.userNumber = userNumber;
        }

        @Override
        public void run()
        {
            try
            {
                logger.info( "Calling userRepository.save() for user #" + this.userNumber );
                userRepository.save( new User( "User" + this.userNumber ) );
                logger.info( "Saved user #" + this.userNumber );
            }
            finally
            {
                latch.countDown();
            }
        }

    }

    @Test
    public void shouldSaveUserAndNewGenre()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );

        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})-[:INTERESTED]->(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldSaveUserAndNewGenres()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );
        user.interestedIn( new Genre( "Historical" ) );
        user.interestedIn( new Genre( "Thriller" ) );

        userRepository.save( user );

        assertSameGraph( getDatabase(), "CREATE " +
                "(u:User:Person {name:'Michal'})," +
                "(g1:Genre {name:'Drama'})," +
                "(g2:Genre {name:'Historical'})," +
                "(g3:Genre {name:'Thriller'})," +
                "(u)-[:INTERESTED]->(g1)," +
                "(u)-[:INTERESTED]->(g2)," +
                "(u)-[:INTERESTED]->(g3)" );
    }

    @Test
    public void shouldSaveUserAndNewGenre2()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );

        userRepository.save( user, 1 );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})-[:INTERESTED]->(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldSaveUserAndExistingGenre()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        User vince = new User( "Vince" );
        vince.interestedIn( drama );

        userRepository.save( vince );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(v:User:Person {name:'Vince'})," +
                "(g:Genre {name:'Drama'})," +
                "(m)-[:INTERESTED]->(g)," +
                "(v)-[:INTERESTED]->(g)" );
    }

    @Test
    public void shouldSaveUserButNotGenre()
    {
        User user = new User( "Michal" );
        user.interestedIn( new Genre( "Drama" ) );

        userRepository.save( user, 0 );

        assertSameGraph( getDatabase(), "CREATE (u:User:Person {name:'Michal'})" );
    }

    @Test
    public void shouldUpdateGenreWhenSavedThroughUser()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        drama.setName( "New Drama" );

        userRepository.save( michal );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(g:Genre {name:'New Drama'})," +
                "(m)-[:INTERESTED]->(g)" );
    }

    @Test
    public void shouldRemoveGenreFromUser()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        michal.notInterestedIn( drama );

        userRepository.save( michal );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldRemoveGenreFromUserUsingService()
    {
        User michal = new User( "Michal" );
        Genre drama = new Genre( "Drama" );
        michal.interestedIn( drama );

        userRepository.save( michal );

        userService.notInterestedIn( michal.getId(), drama.getId() );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(g:Genre {name:'Drama'})" );
    }

    @Test
    public void shouldAddNewVisitorToCinema()
    {
        Cinema cinema = new Cinema( "Odeon" );
        cinema.addVisitor( new User( "Michal" ) );

        cinemaRepository.save( cinema );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(c:Theatre {name:'Odeon', capacity:0})," +
                "(m)-[:VISITED]->(c)" );
    }

    @Test
    public void shouldAddExistingVisitorToCinema()
    {
        User michal = new User( "Michal" );
        userRepository.save( michal );

        Cinema cinema = new Cinema( "Odeon" );
        cinema.addVisitor( michal );

        cinemaRepository.save( cinema );

        assertSameGraph( getDatabase(), "CREATE " +
                "(m:User:Person {name:'Michal'})," +
                "(c:Theatre {name:'Odeon', capacity:0})," +
                "(m)-[:VISITED]->(c)" );
    }

    @Test
    public void shouldBefriendPeople()
    {
        User michal = new User( "Michal" );
        michal.befriend( new User( "Adam" ) );
        userRepository.save( michal );

        try
        {
            assertSameGraph( getDatabase(), "CREATE (m:User {name:'Michal'})-[:FRIEND_OF]->(a:User:Person {name:'Adam'})" );
        }
        catch ( AssertionError error )
        {
            assertSameGraph( getDatabase(), "CREATE (m:User:Person {name:'Michal'})<-[:FRIEND_OF]-(a:User:Person {name:'Adam'})" );
        }
    }

    @Test
    public void shouldLoadFriends()
    {
        new ExecutionEngine( getDatabase() ).execute( "CREATE (m:User {name:'Michal'})-[:FRIEND_OF]->(a:User " +
                "{name:'Adam'})" );

        User michal = ((Iterable<User>)findByProperty(User.class, "name", "Michal" )).iterator().next();
        assertEquals( 1, michal.getFriends().size() );

        User adam = michal.getFriends().iterator().next();
        assertEquals( "Adam", adam.getName() );
        assertEquals( 1, adam.getFriends().size() );

        assertTrue( michal == adam.getFriends().iterator().next() );
        assertTrue( michal.equals( adam.getFriends().iterator().next() ) );
    }

    @Test
    public void shouldLoadFriends2()
    {
        new ExecutionEngine( getDatabase() ).execute( "CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User " +
                "{name:'Adam'})" );

        User michal = ((Iterable<User>)findByProperty(User.class, "name", "Michal" )).iterator().next();
        assertEquals( 1, michal.getFriends().size() );

        User adam = michal.getFriends().iterator().next();
        assertEquals( "Adam", adam.getName() );
        assertEquals( 1, adam.getFriends().size() );

        assertTrue( michal == adam.getFriends().iterator().next() );
        assertTrue( michal.equals( adam.getFriends().iterator().next() ) );
    }


    @Test
    public void shouldSaveNewUserAndNewMovieWithRatings()
    {
        User user = new User( "Michal" );
        TempMovie movie = new TempMovie( "Pulp Fiction" );
        user.rate( movie, 5, "Best movie ever" );
        userRepository.save( user );

        User michal = ((Iterable<User>)findByProperty(User.class, "name", "Michal" )).iterator().next();

        assertSameGraph(getDatabase(), "CREATE (u:User:Person {name:'Michal'})-[:RATED {stars:5, " +
                "comment:'Best movie ever'}]->(m:Movie {title:'Pulp Fiction'})");
    }

    @Test
    public void shouldSaveNewUserRatingsForAnExistingMovie()
    {
        TempMovie movie = new TempMovie( "Pulp Fiction" );

        movie = tempMovieRepository.save(movie);


        User user = new User( "Michal" );
        user.rate( movie, 5, "Best movie ever" );
        userRepository.save( user );

        TempMovie tempMovie = ((Iterable<TempMovie>) findByProperty(TempMovie.class, "title", "Pulp Fiction")).iterator().next();
        assertEquals(1,tempMovie.getRatings().size());
    }

    private Calendar createDate( int y, int m, int d, String tz )
    {

        Calendar calendar = Calendar.getInstance();

        calendar.set( y, m, d );
        calendar.setTimeZone( TimeZone.getTimeZone( tz ) );



        calendar.set( Calendar.HOUR_OF_DAY, 0 );
        calendar.set( Calendar.MINUTE, 0 );
        calendar.set( Calendar.SECOND, 0 );
        calendar.set( Calendar.MILLISECOND, 0 );

        return calendar;
    }


    private void waitForNeo4jToStart( long maxTimeToWait ) throws Neo4jFailedToStartException
    {
        long startTime = System.currentTimeMillis();
        org.neo4j.ogm.session.transaction.Transaction transaction;

        do
        {
            transaction = new SessionFactory().openSession( neo4jRule.url() ).beginTransaction();
        } while ( transaction == null && System.currentTimeMillis() - startTime <= maxTimeToWait );

        if ( transaction == null )
        {
            throw new Neo4jFailedToStartException( maxTimeToWait );
        }
    }

    private static class Neo4jFailedToStartException extends Exception
    {
        private Neo4jFailedToStartException( long timeoutValue )
        {
            super( String.format( "Could not start neo4j instance in [%d] ms", timeoutValue ) );
        }
    }

    protected Iterable<?> findByProperty(Class clazz, String propertyName, Object propertyValue) {
        return session.loadAll(clazz, new Filter(propertyName, propertyValue));
    }

    protected Iterable<?> findByProperty(Class clazz, String propertyName, Object propertyValue, int depth) {
        return session.loadAll(clazz, new Filter(propertyName, propertyValue), depth);
    }

}

<code block>


package org.springframework.data.neo4j.examples.movies.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.examples.movies"})
@EnableNeo4jRepositories("org.springframework.data.neo4j.examples.movies.repo")
@EnableTransactionManagement
public class MoviesContext extends Neo4jConfiguration {

    @Autowired
    private Environment env;

    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.examples.movies.domain");
    }

    @Bean
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;

import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.NodeEntity;


@NodeEntity
public abstract class AbstractAnnotatedEntity {

    @GraphId
    Long nodeId;
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;

import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

import java.util.HashSet;
import java.util.Set;



@NodeEntity(label = "Movie")
public class TempMovie extends AbstractEntity {

    private String title;
    @Relationship(type = "RATED", direction = Relationship.INCOMING)
    private Set<Rating> ratings = new HashSet<>();

    public TempMovie() {
    }

    public TempMovie(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }

    public void addRating(Rating rating) {
        ratings.add(rating);
    }

    public Set<Rating> getRatings() {
        return ratings;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;


public class Person {
	private Long id;

	private String name;


	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Long getId() {
		return id;
	}
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;

import org.neo4j.ogm.annotation.EndNode;
import org.neo4j.ogm.annotation.RelationshipEntity;
import org.neo4j.ogm.annotation.StartNode;


@RelationshipEntity(type = "RATED")
public class Rating {
    private Long id;

    @StartNode
    private User user;
    @EndNode
    private TempMovie movie;
    private int stars;
    private String comment;

    public Rating() {}

    public Rating(User user, TempMovie movie, int stars, String comment) {
        this.user = user;
        this.movie = movie;
        this.stars = stars;
        this.comment = comment;
    }

    public Long getId() {
        return id;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public void setMovie(TempMovie movie) {
        this.movie = movie;
    }

    public void setStars(int stars) {
        this.stars = stars;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public User getUser() {
        return user;
    }

    public TempMovie getMovie() {
        return movie;
    }

    public int getStars() {
        return stars;
    }

    public String getComment() {
        return comment;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;

import java.util.HashSet;
import java.util.Set;

import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Property;
import org.neo4j.ogm.annotation.Relationship;


@NodeEntity(label = "Theatre")
public class Cinema {

    private Long id;
    private String name;

    @Property(name = "city")
    private String location;

    @Relationship(direction = Relationship.INCOMING)
    private Set<User> visited = new HashSet<>();

    private int capacity;

    public Cinema() {
    }

    public Cinema(String name) {
        this.name = name;
    }

    public Cinema(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
    }

    public void addVisitor(User user) {
        visited.add(user);
    }

    public String getName() {
        return name;
    }

    public String getLocation() {
        return location;
    }

    public Set<User> getVisited() {
        return visited;
    }

    public int getCapacity() {
        return capacity;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Cinema cinema = (Cinema) o;

        return !(name != null ? !name.equals(cinema.name) : cinema.name != null);
    }

    @Override
    public int hashCode() {
        return name != null ? name.hashCode() : 0;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;


public class Genre {

    private Long id;
    private String name;

    public Genre() {
    }

    public Genre(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;


public class Movie extends AbstractEntity {

    private String title;
    private String[] tags;
    private byte[] image;

    public Movie() {
    }

    public Movie(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }

    public String[] getTags() {
        return tags;
    }

    public void setTags(String[] tags) {
        this.tags = tags;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;

import org.neo4j.ogm.annotation.Property;
import org.neo4j.ogm.annotation.typeconversion.DateLong;

import java.util.Date;



public class ReleasedMovie extends AbstractAnnotatedEntity {

    private String title;

    @Property(name = "cinemaRelease")
    private Date released;

    @DateLong
    private Date cannesRelease;

    public ReleasedMovie() {
    }

    public ReleasedMovie(String title, Date released, Date cannesRelease) {
        this.title = title;
        this.released = released;
        this.cannesRelease = cannesRelease;
    }

    public String getTitle() {
        return title;
    }

    public Date getReleased() {
        return released;
    }

    public Date getCannesRelease() {
        return cannesRelease;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.neo4j.ogm.annotation.Relationship;


public class User extends Person{

    private String middleName;
    private Collection<Genre> interested = new HashSet<>();

    @Relationship(type = "FRIEND_OF", direction = Relationship.UNDIRECTED)
    private Collection<User> friends = new HashSet<>();

    @Relationship(type = "RATED")
    private Set<Rating> ratings = new HashSet<>();

    public User() {
    }

    public User(String name) {
        setName(name);
    }

    public void interestedIn(Genre genre) {
        interested.add(genre);
    }

    public void notInterestedIn(Genre genre) {
        interested.remove(genre);
    }

    public void befriend(User user) {
        friends.add(user);
        user.friends.add(this);
    }


    public Rating rate(TempMovie movie, int stars, String comment) {
        Rating rating = new Rating(this, movie, stars, comment);
        movie.addRating(rating);
        ratings.add(rating);
        return rating;
    }

    public Collection<User> getFriends() {
        return friends;
    }

    public String getMiddleName()
    {
        return middleName;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;


import org.neo4j.ogm.annotation.GraphId;


public class Actor{

    @GraphId
    Long nodeId;
    String id;
    String name;

    public Actor() {
    }

    public Actor(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain;


public abstract class AbstractEntity {

    Long id;
}

<code block>


package org.springframework.data.neo4j.examples.movies.domain.queryresult;

import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.User;


@QueryResult
public class EntityWrappingQueryResult {

    private User user;

    public User getUser() {
        return user;
    }

}

<code block>


package org.springframework.data.neo4j.examples.movies.domain.queryresult;

import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.neo4j.ogm.annotation.Property;
import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;


@QueryResult
public class UserQueryResult {

    private String userName;
    private int age;

    UserQueryResult() {

    }

    public UserQueryResult(String name, int age) {
        this.userName = name;
        this.age = age;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String name) {
        this.userName = name;
    }

    @Property(name = "user.age")
    public int getAge() {
        return age;
    }

    @Property(name = "user.age")
    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public int hashCode() {
        final int prime = 23;
        int result = 1;
        result = prime * result + age;
        result = prime * result + ((userName == null) ? 0 : userName.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        UserQueryResult other = (UserQueryResult) obj;
        if (age != other.age)
            return false;
        if (userName == null) {
            if (other.userName != null)
                return false;
        } else if (!userName.equals(other.userName))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return ReflectionToStringBuilder.toString(this);
    }

}

<code block>


package org.springframework.data.neo4j.examples.movies.domain.queryresult;

public enum Gender {

    FEMALE, MALE;

}

<code block>


package org.springframework.data.neo4j.examples.movies.domain.queryresult;

import java.math.BigDecimal;
import java.math.BigInteger;

import org.springframework.data.neo4j.annotation.QueryResult;


@QueryResult
public class RichUserQueryResult {

    private Gender userGender; 
    private String userName;
    private BigInteger userAccount;
    private BigDecimal[] userDeposits;

    public Gender getUserGender() {
        return userGender;
    }

    public String getUserName() {
        return userName;
    }

    public BigInteger getUserAccount() {
        return userAccount;
    }

    public BigDecimal[] getUserDeposits() {
        return userDeposits;
    }
}
<code block>


package org.springframework.data.neo4j.examples.movies.domain.queryresult;

import org.neo4j.ogm.annotation.Property;
import org.springframework.data.neo4j.annotation.QueryResult;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;


@QueryResult
public interface UserQueryResultInterface {

    @Property(name = "user.name")
    String getNameOfUser();

    int getAgeOfUser();

}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.examples.movies.domain.Genre;
import org.springframework.data.neo4j.examples.movies.domain.Genre;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface GenreRepository extends GraphRepository<Genre> {
}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.examples.movies.domain.AbstractEntity;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface AbstractEntityRepository extends GraphRepository<AbstractEntity> {
}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import java.util.List;

import org.springframework.data.neo4j.examples.movies.domain.Rating;
import org.springframework.data.neo4j.repository.GraphRepository;


public interface RatingRepository extends GraphRepository<Rating> {

	List<Rating> findByStars(int stars);


}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import java.util.Collection;
import java.util.List;

import org.springframework.data.neo4j.examples.movies.domain.Cinema;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface CinemaRepository extends GraphRepository<Cinema> {

	Collection<Cinema> findByName(String name);

	List<Cinema> findByLocation(String location);

	List<Cinema> findByNameAndLocation(String name, String location);

	List<Cinema> findByNameOrLocation(String name, String location);

	List<Cinema> findByCapacityGreaterThan(int capacity);

	List<Cinema> findByCapacityLessThan(int capacity);

	List<Cinema> findByVisitedName(String name);

	List<Cinema> findByLocationAndVisitedName(String location, String name);
}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.queryresult.*;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Collection;
import java.util.List;
import java.util.Map;


@Repository
public interface UserRepository extends GraphRepository<User> {

    Collection<User> findByName(String name);

    Collection<User> findByMiddleName(String middleName);

    @Query("MATCH (user:User) RETURN COUNT(user)")
    int findTotalUsers();

    @Query("MATCH (user:User) RETURN user.id")
    List<Integer> getUserIds();

    @Query("MATCH (user:User) RETURN user.name, user.id")
    Iterable<Map<String,Object>> getUsersAsProperties();

    @Query("MATCH (user:User) RETURN user")
    Collection<User> getAllUsers();

    @Query("MATCH (m:Movie)<-[:ACTED_IN]-(a:User) RETURN m.title as movie, collect(a.name) as cast")
    List<Map<String, Object>> getGraph();

    @Query("MATCH (user:User{name:{name}}) RETURN user")
    User findUserByNameWithNamedParam(@Param("name") String name);

    @Query("MATCH (user:User{name:{0}}) RETURN user")
    User findUserByName(String name);

    @Query("MATCH (user:User) RETURN id(user) AS userId, user.name AS userName, user.age ORDER BY user.age")
    Iterable<UserQueryResult> retrieveAllUsersAndTheirAges();

    @Query("MATCH (user:User{name:{0}}) RETURN user.name AS name")
    UnmanagedUserPojo findIndividualUserAsDifferentObject(String name);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user.name, user.age AS ageOfUser")
    UserQueryResultInterface findIndividualUserAsProxiedObject(String name);

    @Query("MATCH (user:User) WHERE user.gender={0} RETURN user.name AS UserName, user.gender AS UserGender, user.account as UserAccount, user.deposits as UserDeposits")
    Iterable<RichUserQueryResult> findUsersByGender(Gender gender);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user")
    EntityWrappingQueryResult findWrappedUserByName(String userName);

}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.examples.movies.domain.Actor;
import org.springframework.data.neo4j.repository.GraphRepository;



public interface ActorRepository extends GraphRepository<Actor> {
}


<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.examples.movies.domain.AbstractAnnotatedEntity;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface AbstractAnnotatedEntityRepository extends GraphRepository<AbstractAnnotatedEntity> {
}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.examples.movies.domain.TempMovie;
import org.springframework.data.neo4j.repository.GraphRepository;


public interface TempMovieRepository extends GraphRepository<TempMovie> {
}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import org.springframework.data.neo4j.annotation.QueryResult;


@QueryResult
public class UnmanagedUserPojo {

    private String name;

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

}

<code block>


package org.springframework.data.neo4j.examples.movies.service;

import org.springframework.data.neo4j.examples.movies.domain.Genre;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.data.neo4j.examples.movies.domain.Genre;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.repo.GenreRepository;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private GenreRepository genreRepository;

    @Override
    public void updateUser(User user, String newName) {
        user.setName(newName);
    }

    @Override
    public void notInterestedIn(Long userId, Long genreId) {
        User user = userRepository.findOne(userId);
        Genre genre = genreRepository.findOne(genreId);

        user.notInterestedIn(genre);
        userRepository.save(user);
    }

    @Override
    public void saveWithTxAnnotationOnInterface(User user) {
        userRepository.save(user);
    }

    @Transactional
    @Override
    public void saveWithTxAnnotationOnImpl(User user) {
        userRepository.save(user);
    }
}

<code block>


package org.springframework.data.neo4j.examples.movies.service;

import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.transaction.annotation.Transactional;


public interface UserService {

    @Transactional
    void updateUser(User user, String newName);

    @Transactional
    void notInterestedIn(Long userId, Long genreId);

    @Transactional
    void saveWithTxAnnotationOnInterface(User user);

    void saveWithTxAnnotationOnImpl(User user);
}

<code block>

package org.springframework.data.neo4j.extensions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.assertTrue;


@ContextConfiguration(classes = {CustomPersistenceContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class CustomGraphRepositoryTest {

    @Autowired
    private UserRepository repository;


    @Test
    public void shouldExposeCommonMethodOnExtendedRepository() {
        assertTrue(repository.sharedCustomMethod());
    }

}

<code block>

package org.springframework.data.neo4j.extensions;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableNeo4jRepositories(repositoryBaseClass = CustomGraphRepositoryImpl.class)
@EnableTransactionManagement
public class CustomPersistenceContext extends Neo4jConfiguration {

    @Override
    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.extensions.domain");
    }

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }

}


<code block>

package org.springframework.data.neo4j.extensions;

import org.neo4j.ogm.session.Session;
import org.springframework.data.neo4j.repository.GraphRepositoryImpl;
import org.springframework.stereotype.Repository;


@Repository
public class CustomGraphRepositoryImpl<T> extends GraphRepositoryImpl<T> implements CustomGraphRepository<T> {

    public CustomGraphRepositoryImpl(Class<T> clazz, Session session) {
        super(clazz, session);
    }

    @Override
    public boolean sharedCustomMethod() {
        return true;
    }
}

<code block>

package org.springframework.data.neo4j.extensions;

import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.stereotype.Repository;


@Repository
public interface UserRepository extends CustomGraphRepository<User> {
}

<code block>

package org.springframework.data.neo4j.extensions;

import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.repository.NoRepositoryBean;


@NoRepositoryBean
public interface CustomGraphRepository<T> extends GraphRepository<T> {

    boolean sharedCustomMethod();

}

<code block>
package org.springframework.data.neo4j.extensions.domain;


public class User {
    Long id;
}

<code block>



package org.springframework.data.neo4j.template;

import org.junit.After;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Test;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.graphdb.*;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.cypher.ComparisonOperator;
import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.cypher.Filters;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.session.Utils;
import org.neo4j.ogm.session.result.QueryStatistics;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.data.neo4j.examples.movies.domain.*;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.Neo4jTemplate;

import javax.persistence.PersistenceException;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;

import static org.junit.Assert.*;
import static org.neo4j.ogm.session.Utils.map;


public class Neo4jTemplateTest {

    @ClassRule
    public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule();

    private Neo4jOperations template;

    @Before
    public void setUpOgmSession() {
        SessionFactory sessionFactory = new SessionFactory("org.springframework.data.neo4j.examples.movies.domain");
        this.template = new Neo4jTemplate(sessionFactory.openSession(neo4jRule.url()));
        addArbitraryDataToDatabase();
    }

    @After
    public void clearDatabase() {
        neo4jRule.clearDatabase();
    }


    private void addArbitraryDataToDatabase() {
        try (Transaction tx = neo4jRule.getGraphDatabaseService().beginTx()) {
            Node arbitraryNode = neo4jRule.getGraphDatabaseService().createNode(DynamicLabel.label("NotAClass"));
            arbitraryNode.setProperty("name", "Colin");
            Node otherNode = neo4jRule.getGraphDatabaseService().createNode(DynamicLabel.label("NotAClass"));
            otherNode.setProperty("age", 39);
            arbitraryNode.createRelationshipTo(otherNode, DynamicRelationshipType.withName("TEST"));

            tx.success();
        }
    }

    @Test
    public void shouldSaveAndRetrieveNodeEntitiesWithoutExplicitTransactionManagement() {
        Genre filmGenre = new Genre();
        filmGenre.setName("Comedy");
        this.template.save(filmGenre);

        Genre loadedGenre = this.template.load(Genre.class, filmGenre.getId());
        assertNotNull("The entity loaded from the template shouldn't be null", loadedGenre);
        assertEquals("The loaded entity wasn't as expected", filmGenre, loadedGenre);

        Genre anotherGenre = new Genre();
        anotherGenre.setName("Action");
        this.template.save(anotherGenre);

        Collection<Genre> allGenres = this.template.loadAll(Genre.class);
        assertNotNull("The collection of all genres shouldn't be null", allGenres);
        assertEquals("The number of genres in the database wasn't as expected", 2, allGenres.size());
    }

    @Test
    public void shouldSaveAndRetrieveRelationshipEntitiesWithoutExplicitTransactionManagement() {
        User critic = new User("Gary");
        TempMovie film = new TempMovie("Fast and Furious XVII");
        Rating filmRating = critic.rate(film, 2, "They've made far too many of these films now!");

        this.template.save(filmRating);

        Rating loadedRating = this.template.load(Rating.class, filmRating.getId());
        assertNotNull("The loaded rating shouldn't be null", loadedRating);
        assertEquals("The relationship properties weren't saved correctly", filmRating.getStars(), loadedRating.getStars());
        assertEquals("The rated film wasn't saved correctly", film.getTitle(), loadedRating.getMovie().getTitle());
        assertEquals("The critic wasn't saved correctly", critic.getId(), loadedRating.getUser().getId());
    }

    @Test
    public void shouldExecuteArbitraryReadQuery() {
        User user = new User("Harmanpreet Singh");
        TempMovie bollywood = new TempMovie("Desi Boyz");
        TempMovie hollywood = new TempMovie("Mission Impossible");
        template.save(user.rate(bollywood, 1, "Bakwaas"));
        template.save(user.rate(hollywood, 4, "Pretty good"));

        Iterable<Map<String, Object>> queryResults =
                this.template.query("MATCH (u:User)-[r]->(m:Movie) RETURN AVG(r.stars) AS avg", Collections.<String, Object>emptyMap());
        Iterator<Map<String, Object>> queryResultIterator = queryResults.iterator();
        assertTrue("There should've been some query result returned", queryResultIterator.hasNext());
        assertEquals(2.5, (Double) queryResultIterator.next().get("avg"), 0.01);
    }

    @Test
    public void shouldQueryForSpecificObjectUsingBespokeParameterisedCypherQuery() {
        this.template.save(new Actor("ab", "Alec Baldwin"));
        this.template.save(new Actor("hm", "Helen Mirren"));
        this.template.save(new Actor("md", "Matt Damon"));

        Actor loadedActor = this.template.queryForObject(Actor.class, "MATCH (a:Actor) WHERE a.name={param} RETURN a",
                Collections.singletonMap("param", "Alec Baldwin"));
        assertNotNull("The entity wasn't loaded", loadedActor);
        assertEquals("Alec Baldwin", loadedActor.getName());
    }

    @Test
    public void shouldQueryForObjectCollectionUsingBespokeCypherQuery() {
        this.template.save(new User("Jeff"));
        this.template.save(new User("John"));
        this.template.save(new User("Colin"));

        Iterable<User> users = this.template.queryForObjects(User.class, "MATCH (u:User) WHERE u.name=~'J.*' RETURN u",
                Collections.<String, Object>emptyMap());
        assertNotNull("The entity wasn't loaded", users);
        assertTrue("The entity wasn't loaded", users.iterator().hasNext());
        for (User loadedUser : users) {
            assertTrue("Shouldn't've loaded " + loadedUser.getName(),
                    loadedUser.getName().equals("John") || loadedUser.getName().equals("Jeff"));
        }
    }

    @Test
    public void shouldRetrieveEntitiesByMatchingProperty() {
        this.template.save(new Genre("Thriller"));
        this.template.save(new Genre("Horror"));
        this.template.save(new Genre("Period Drama"));

        Genre loadedGenre = this.template.loadByProperty(Genre.class, "name", "Horror");
        assertNotNull("No genre was loaded", loadedGenre);
        assertEquals("Horror", loadedGenre.getName());
    }

    @Test
    public void shouldExecuteArbitraryUpdateQuery() {
        assertTrue("There shouldn't be any genres in the database", this.template.loadAll(Genre.class).isEmpty());

        this.template.execute("CREATE (:Genre {name:'Comedy'}), (:Genre {name:'Action'})");

        Iterator<Genre> genres = this.template.loadAll(Genre.class, 0).iterator();
        assertEquals("There weren't any genres created", 2, Utils.size(genres));
    }


    @Test(expected = java.lang.RuntimeException.class)
    public void shouldThrowExeceptionForExecuteQueryThatReturnsResults() {
        this.template.execute("CREATE (g1:Genre {name:'Comedy'}), (g2:Genre {name:'Action'}) return g1");
    }

    @Test
    public void shouldCountNumberOfEntitiesOfParticularTypeInGraphDatabase() {
        GraphDatabaseService database = neo4jRule.getGraphDatabaseService();
        try (Transaction tx = database.beginTx()) {

            Label genreTypeLabel = DynamicLabel.label(Genre.class.getSimpleName());
            for (int i = 0; i < 5; i++) {
                database.createNode(genreTypeLabel);
            }


            Label filmTypeLabel = DynamicLabel.label(TempMovie.class.getAnnotation(NodeEntity.class).label());
            for (int i = 0; i < 3; i++) {
                database.createNode(filmTypeLabel);
            }


            database.createNode(DynamicLabel.label(User.class.getSimpleName()));

            tx.success();
        }

        assertEquals(5, this.template.count(Genre.class));
        assertEquals(3, this.template.count(TempMovie.class));
    }

    @Test
    public void shouldDeleteExistingEntitiesByGraphId() {
        ExecutionEngine ee = new ExecutionEngine(neo4jRule.getGraphDatabaseService());
        Long genreId = ee.execute("CREATE (t:Genre {name:'Thriller'}), (r:Genre {name:'RomCom'}) RETURN id(r) AS gid")
                .<Long>columnAs("gid").next();

        Genre entity = this.template.load(Genre.class, genreId);
        assertEquals("RomCom", entity.getName());
        this.template.delete(entity);

        Collection<Genre> allGenres = this.template.loadAll(Genre.class, 0);
        assertEquals("The genre wasn't deleted", 1, allGenres.size());
        assertEquals("The wrong genre was deleted", "Thriller", allGenres.iterator().next().getName());
    }

    @Test(expected = PersistenceException.class)
    public void shouldConvertOGMExceptionsToPersistenceExceptions() {
        this.template.loadAll(Void.class);
    }


    @Test(expected = PersistenceException.class)
    public void shouldHandleErrorsOnExecute() {
        this.template.execute("CREAT (node:NODE)");
    }


    @Test
    public void shouldReturnQueryStats() {
        QueryStatistics stats = this.template.execute("CREATE (a:Actor {name:'Keanu Reeves'}) CREATE (m:Movie {title:'The Matrix'}) " +
                "CREATE (a)-[:ACTED_IN {role:'Neo'}]->(m)");
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesCreated());
        assertEquals(3, stats.getPropertiesSet());
        assertEquals(1, stats.getRelationshipsCreated());
        assertEquals(2, stats.getLabelsAdded());

        stats = this.template.execute("MATCH (a:Actor)-->(m:Movie) REMOVE a:Actor SET m.title=null");
        assertTrue(stats.containsUpdates());
        assertEquals(1, stats.getLabelsRemoved());
        assertEquals(1, stats.getPropertiesSet());

        stats = this.template.execute("MATCH n-[r]-(m:Movie) delete n,r,m");
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesDeleted());
        assertEquals(1, stats.getRelationshipsDeleted());
    }


    @Test
    public void shouldReturnSchemaQueryStats() {
        QueryStatistics stats = this.template.execute("CREATE INDEX ON :Actor(name)");
        assertEquals(1, stats.getIndexesAdded());

        stats = this.template.execute("CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE");
        assertEquals(1, stats.getConstraintsAdded());

        stats = this.template.execute("DROP CONSTRAINT ON (movie:Movie) ASSERT movie.title is UNIQUE");
        assertEquals(1, stats.getConstraintsRemoved());

        stats = this.template.execute("DROP INDEX ON :Actor(name)");
        assertEquals(1, stats.getIndexesRemoved());
    }


    @Test
    public void shouldReturnQueryStatsForQueryWithParams() {
        QueryStatistics stats = this.template.execute("CREATE (a:Actor {name:{actorName}}) CREATE (m:Movie {title:{movieTitle}}) " +
                "CREATE (a)-[:ACTED_IN {role:'Neo'}]->(m)",map("actorName","Keanu Reeves", "movieTitle","THe Matrix"));
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesCreated());
        assertEquals(3, stats.getPropertiesSet());
        assertEquals(1, stats.getRelationshipsCreated());
        assertEquals(2, stats.getLabelsAdded());

        stats = this.template.execute("MATCH (a:Actor)-->(m:Movie) REMOVE a:Actor SET m.title=null");
        assertTrue(stats.containsUpdates());
        assertEquals(1, stats.getLabelsRemoved());
        assertEquals(1, stats.getPropertiesSet());

        stats = this.template.execute("MATCH n-[r]-(m:Movie) delete n,r,m");
        assertTrue(stats.containsUpdates());
        assertEquals(2, stats.getNodesDeleted());
        assertEquals(1, stats.getRelationshipsDeleted());
    }


    @Test
    public void shouldRetrieveEntitiesByMatchingProperties() {
        this.template.save(new Cinema("Ritzy", 5000));
        this.template.save(new Cinema("Picturehouse", 7500));

        Filter name = new Filter("name", "Ritzy");
        Cinema loadedCinema = this.template.loadByProperties(Cinema.class, new Filters().add(name));
        assertNotNull("No cinema was loaded", loadedCinema);
        assertEquals("Ritzy", loadedCinema.getName());

        Filter capacity = new Filter("capacity", 1000);
        capacity.setComparisonOperator(ComparisonOperator.GREATER_THAN);
        Collection<Cinema> loadedCinemas = this.template.loadAllByProperties(Cinema.class, new Filters().add(capacity));
        assertNotNull(loadedCinemas);
        assertEquals(2, loadedCinemas.size());
        assertTrue(loadedCinemas.contains(new Cinema("Ritzy", 5000)));
        assertTrue(loadedCinemas.contains(new Cinema("Picturehouse", 7500)));
    }

}

<code block>


package org.springframework.data.neo4j.template;

import org.springframework.context.ApplicationListener;
import org.springframework.data.neo4j.event.Neo4jDataManipulationEvent;


public abstract class TestNeo4jEventListener<E extends Neo4jDataManipulationEvent> implements ApplicationListener<E> {

    private Neo4jDataManipulationEvent event;

    @Override
    public void onApplicationEvent(E event) {
        this.event = event;
    }

    public boolean hasReceivedAnEvent() {
        return this.event != null;
    }

    public Neo4jDataManipulationEvent getEvent() {
        return event;
    }

}

<code block>


package org.springframework.data.neo4j.template;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.event.AfterDeleteEvent;
import org.springframework.data.neo4j.event.AfterSaveEvent;
import org.springframework.data.neo4j.event.BeforeDeleteEvent;
import org.springframework.data.neo4j.event.BeforeSaveEvent;
import org.springframework.data.neo4j.examples.movies.domain.Actor;
import org.springframework.data.neo4j.template.context.DataManipulationEventConfiguration;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.Neo4jTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.*;

@ContextConfiguration(classes = DataManipulationEventConfiguration.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class TemplateApplicationEventTest {

    @Autowired
    private Neo4jOperations neo4jTemplate;

    @Autowired
    private TestNeo4jEventListener<BeforeSaveEvent> beforeSaveEventListener;
    @Autowired
    private TestNeo4jEventListener<AfterSaveEvent> afterSaveEventListener;
    @Autowired
    private TestNeo4jEventListener<BeforeDeleteEvent> beforeDeleteEventListener;
    @Autowired
    private TestNeo4jEventListener<AfterDeleteEvent> afterDeleteEventListener;

    @Test
    public void shouldCreateTemplateAndPublishAppropriateApplicationEventsOnSaveAndOnDelete() {
        assertNotNull("The Neo4jTemplate wasn't autowired into this test", this.neo4jTemplate);

        Actor entity = new Actor();
        entity.setName("John Abraham");

        assertFalse(this.beforeSaveEventListener.hasReceivedAnEvent());
        assertFalse(this.afterSaveEventListener.hasReceivedAnEvent());
        this.neo4jTemplate.save(entity);
        assertTrue(this.beforeSaveEventListener.hasReceivedAnEvent());
        assertSame(entity, this.beforeSaveEventListener.getEvent().getEntity());
        assertTrue(this.afterSaveEventListener.hasReceivedAnEvent());
        assertSame(entity, this.afterSaveEventListener.getEvent().getEntity());

        assertFalse(this.beforeDeleteEventListener.hasReceivedAnEvent());
        assertFalse(this.afterDeleteEventListener.hasReceivedAnEvent());
        this.neo4jTemplate.delete(entity);
        assertTrue(this.beforeDeleteEventListener.hasReceivedAnEvent());
        assertSame(entity, this.beforeDeleteEventListener.getEvent().getEntity());
        assertTrue(this.afterDeleteEventListener.hasReceivedAnEvent());
        assertSame(entity, this.afterDeleteEventListener.getEvent().getEntity());
    }

}

<code block>
package org.springframework.data.neo4j.template;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.neo4j.template.context.DataManipulationEventConfiguration;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.context.DataManipulationEventConfiguration;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

@ContextConfiguration(classes = DataManipulationEventConfiguration.class)
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class ExceptionTranslationTest {

    @Autowired
    private Neo4jOperations neo4jTemplate;


    @Before
    public void setUp()  {
        Assert.notNull(neo4jTemplate, "neo4jTemplate not properly wired in");
    }

    @Test(expected= DataAccessException.class)
    @Ignore("this isn't working as the docs say it should. We must be doing something wrong")
    public void testTemplateExceptionsAreIntercepted() {
        neo4jTemplate.loadAll(Void.class);

    }

}

<code block>


package org.springframework.data.neo4j.template.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.event.AfterDeleteEvent;
import org.springframework.data.neo4j.event.AfterSaveEvent;
import org.springframework.data.neo4j.event.BeforeDeleteEvent;
import org.springframework.data.neo4j.event.BeforeSaveEvent;
import org.springframework.data.neo4j.template.TestNeo4jEventListener;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.template.Neo4jOperations;
import org.springframework.data.neo4j.template.Neo4jTemplate;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableTransactionManagement
public class DataManipulationEventConfiguration extends Neo4jConfiguration {

    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.examples.movies.domain");
    }

    @Bean
    public Neo4jOperations getNeo4jTemplate() throws Exception {
        return new Neo4jTemplate(getSession());
    }

    @Bean
    public ApplicationListener<BeforeSaveEvent> beforeSaveEventListener() {
        return new TestNeo4jEventListener<BeforeSaveEvent>() {};
    }

    @Bean
    public ApplicationListener<AfterSaveEvent> afterSaveEventListener() {
        return new TestNeo4jEventListener<AfterSaveEvent>() {};
    }

    @Bean
    public ApplicationListener<BeforeDeleteEvent> beforeDeleteEventListener() {
        return new TestNeo4jEventListener<BeforeDeleteEvent>() {};
    }

    @Bean
    public ApplicationListener<AfterDeleteEvent> afterDeleteEventListener() {
        return new TestNeo4jEventListener<AfterDeleteEvent>() {};
    }

}

<code block>


package org.springframework.data.neo4j.web;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.web.context.WebAppContext;
import org.springframework.data.neo4j.web.context.WebPersistenceContext;
import org.springframework.data.neo4j.web.domain.User;
import org.springframework.data.neo4j.web.repo.UserRepository;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@ContextConfiguration(classes = {WebAppContext.class, WebPersistenceContext.class})
@WebAppConfiguration
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class WebIntegrationTest {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    WebApplicationContext wac;

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();

        User adam = new User("Adam");
        User daniela = new User("Daniela");
        User michal = new User("Michal");
        User vince = new User("Vince");

        adam.befriend(daniela);
        daniela.befriend(michal);
        michal.befriend(vince);

        userRepository.save(adam);
    }

    @Test
    public void shouldNotShareSessionBetweenRequestsWithDifferentSession() throws Exception {
        mockMvc.perform(get("/user/{name}/friends", "Adam"))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Daniela"));

        mockMvc.perform(get("/user/{name}/friends", "Vince"))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Michal"));
    }

    @Test
    public void shouldShareSessionBetweenRequestsDuringSameSession() throws Exception {
        MockHttpSession session = new MockHttpSession();

        mockMvc.perform(get("/user/{name}/friends", "Adam").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Daniela"));

        mockMvc.perform(get("/user/{name}/friends", "Daniela").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Adam Michal"));

        mockMvc.perform(get("/user/{name}/friends", "Michal").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Daniela Vince"));

        mockMvc.perform(get("/user/{name}/friends", "Vince").session(session))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.content().string("Michal"));

    }

    @Test
    public void shouldNotShareSessionBetweenMultiThreadedRequests() throws Exception {
        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int i = 0; i < 100; i++) {
            final int j = i;
            executor.submit(new Runnable() {
                @Override
                public void run() {
                    if (j % 2 == 0) {
                        try {
                            mockMvc.perform(get("/user/{name}/friends", "Adam"))
                                    .andExpect(status().isOk())
                                    .andExpect(MockMvcResultMatchers.content().string("Daniela"));
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    } else {

                        try {
                            mockMvc.perform(get("/user/{name}/friends", "Vince"))
                                    .andExpect(status().isOk())
                                    .andExpect(MockMvcResultMatchers.content().string("Michal"));
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }

                    }
                }
            });
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
    }

}

<code block>


package org.springframework.data.neo4j.web.context;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.web.controller"})
@EnableWebMvc
public class WebAppContext extends WebMvcConfigurerAdapter {
}

<code block>


package org.springframework.data.neo4j.web.context;

import org.neo4j.ogm.session.Session;
import org.neo4j.ogm.session.SessionFactory;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.context.annotation.*;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.web"})
@EnableNeo4jRepositories("org.springframework.data.neo4j.web.repo")
@EnableTransactionManagement
public class WebPersistenceContext extends Neo4jConfiguration {

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.web.domain");
    }

    @Override
    @Bean
    @Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
    public Session getSession() throws Exception {
        return super.getSession();
    }
}

<code block>


package org.springframework.data.neo4j.web.domain;

import org.neo4j.ogm.annotation.Relationship;

import java.util.HashSet;
import java.util.Set;


public class Cinema {

    private Long id;
    private String name;

    @Relationship(direction = Relationship.INCOMING)
    private Set<User> visited = new HashSet<>();

    public Cinema() {
    }

    public Cinema(String name) {
        this.name = name;
    }

    public void addVisitor(User user) {
        visited.add(user);
    }

    public String getName() {
        return name;
    }
}

<code block>


package org.springframework.data.neo4j.web.domain;


public class Genre {

    private Long id;
    private String name;

    public Genre() {
    }

    public Genre(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.web.domain;

import org.neo4j.ogm.annotation.Relationship;

import java.util.Collection;
import java.util.HashSet;


public class User {

    private Long id;
    private String name;
    private Collection<Genre> interested = new HashSet<>();

    @Relationship(type = "FRIEND_OF", direction = Relationship.UNDIRECTED)
    private Collection<User> friends = new HashSet<>();

    public User() {
    }

    public User(String name) {
        this.name = name;
    }

    public void interestedIn(Genre genre) {
        interested.add(genre);
    }

    public void notInterestedIn(Genre genre) {
        interested.remove(genre);
    }

    public void befriend(User user) {
        friends.add(user);
        user.friends.add(this);
    }


    public Long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Collection<User> getFriends() {
        return friends;
    }
}

<code block>


package org.springframework.data.neo4j.web.repo;

import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.neo4j.web.domain.Genre;
import org.springframework.stereotype.Repository;


@Repository
public interface GenreRepository extends GraphRepository<Genre> {
}

<code block>


package org.springframework.data.neo4j.web.repo;

import org.springframework.data.neo4j.web.domain.User;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;

import java.util.Collection;


@Repository
public interface UserRepository extends GraphRepository<User> {

    Collection<User> findUserByName(String name);
}

<code block>


package org.springframework.data.neo4j.web.service;

import java.util.Collection;
import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.web.domain.User;
import org.springframework.data.neo4j.web.repo.UserRepository;
import org.springframework.data.neo4j.web.domain.User;
import org.springframework.data.neo4j.web.repo.UserRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private Session session;

    @Transactional
    @Override
    public User getUserByName(String name) {
        Iterable<User> users = findByProperty("name", name);
        if (!users.iterator().hasNext()) {
            return null;
        }
        return users.iterator().next();
    }

    @Transactional
    @Override
    public Collection<User> getNetwork(User user) {
        Set<User> network = new TreeSet<>(new Comparator<User>() {
            @Override
            public int compare(User u1, User u2) {
                return u1.getName().compareTo(u2.getName());
            }
        });
        buildNetwork(user, network);
        network.remove(user);
        return network;
    }

    private void buildNetwork(User user, Set<User> network) {
        for (User friend : user.getFriends()) {
            if (!network.contains(friend)) {
                network.add(friend);
                buildNetwork(friend, network);
            }
        }
    }

    protected Iterable<User> findByProperty(String propertyName, Object propertyValue) {
        return session.loadAll(User.class, new Filter(propertyName, propertyValue));
    }

}

<code block>


package org.springframework.data.neo4j.web.service;

import org.springframework.data.neo4j.web.domain.User;

import java.util.Collection;


public interface UserService {

    User getUserByName(String name);

    Collection<User> getNetwork(User user);
}

<code block>


package org.springframework.data.neo4j.web.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.web.domain.User;
import org.springframework.data.neo4j.web.service.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpSession;


@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @RequestMapping(value = "/user/{name}/friends")
    @ResponseBody
    public String listFriends(@PathVariable String name, HttpSession session) {
        System.out.println("Session: " + session);
        User user = userService.getUserByName(name);

        if (user == null) {
            return "No such user!";
        }

        StringBuilder result = new StringBuilder();
        for (User friend : userService.getNetwork(user)) {
            result.append(friend.getName()).append(" ");
        }

        return result.toString().trim();
    }
}

<code block>


package org.springframework.data.neo4j.repositories;

import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.repositories.context.RepositoriesTestContext;
import org.springframework.data.neo4j.repositories.domain.Movie;
import org.springframework.data.neo4j.repositories.repo.MovieRepository;
import org.springframework.data.neo4j.util.IterableUtils;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.*;
import static org.neo4j.ogm.testutil.GraphTestUtils.*;


@ContextConfiguration(classes = {RepositoriesTestContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class RepositoryDefinitionTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private MovieRepository movieRepository;

    @Test
    public void shouldProxyAndAutoImplementRepositoryDefinitionAnnotatedRepo() {
        Movie movie = new Movie("PF");
        movieRepository.save(movie);

        assertSameGraph(neo4jRule.getGraphDatabaseService(), "CREATE (m:Movie {title:'PF'})");

        assertEquals(1, IterableUtils.count(movieRepository.findAll()));
    }

}

<code block>


package org.springframework.data.neo4j.repositories;

import org.junit.Rule;
import org.junit.Test;
import org.neo4j.ogm.metadata.MetaData;
import org.neo4j.ogm.session.SessionFactory;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.data.neo4j.mapping.Neo4jMappingContext;
import org.springframework.data.neo4j.repositories.domain.Movie;
import org.springframework.data.neo4j.repositories.repo.MovieRepository;
import org.springframework.data.neo4j.repository.support.GraphRepositoryFactory;
import org.springframework.data.neo4j.util.IterableUtils;
import org.springframework.data.repository.core.support.RepositoryFactorySupport;

import static org.junit.Assert.assertEquals;
import static org.neo4j.ogm.testutil.GraphTestUtils.assertSameGraph;


public class ProgrammaticRepositoryTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    private MovieRepository movieRepository;

    @Test
    public void canInstantiateRepositoryProgrammatically() {
        RepositoryFactorySupport factory = new GraphRepositoryFactory(
                new SessionFactory("org.springframework.data.neo4j.repositories.domain").openSession(neo4jRule.url()),new Neo4jMappingContext(new MetaData()));
        movieRepository = factory.getRepository(MovieRepository.class);

        Movie movie = new Movie("PF");
        movieRepository.save(movie);

        assertSameGraph(neo4jRule.getGraphDatabaseService(), "CREATE (m:Movie {title:'PF'})");

        assertEquals(1, IterableUtils.count(movieRepository.findAll()));
    }

}

<code block>


package org.springframework.data.neo4j.repositories;

import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.repositories.repo.PersistenceContextInTheSamePackage;
import org.springframework.data.neo4j.repositories.domain.User;
import org.springframework.data.neo4j.repositories.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.neo4j.ogm.testutil.GraphTestUtils.assertSameGraph;


@ContextConfiguration(classes = {PersistenceContextInTheSamePackage.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class RepoScanningTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Test
    public void enableNeo4jRepositoriesShouldScanSelfPackageByDefault() {
        User user = new User("Michal");
        userRepository.save(user);

        assertSameGraph(neo4jRule.getGraphDatabaseService(), "CREATE (u:User {name:'Michal'})");
    }

}

<code block>


package org.springframework.data.neo4j.repositories.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.repositories"})
@EnableNeo4jRepositories("org.springframework.data.neo4j.repositories.repo")
@EnableTransactionManagement
public class RepositoriesTestContext extends Neo4jConfiguration {

    @Override
    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.repositories.domain");
    }

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }
}

<code block>
package org.springframework.data.neo4j.repositories.support;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.neo4j.ogm.session.Session;
import org.springframework.aop.framework.Advised;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.neo4j.repository.GraphRepositoryImpl;
import org.springframework.data.neo4j.repository.support.GraphRepositoryFactory;
import org.springframework.transaction.annotation.Transactional;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;




@RunWith(MockitoJUnitRunner.class)
public class GraphRepositoryFactoryTest {

    GraphRepositoryFactory factory;

    @Mock org.neo4j.ogm.session.Session session;
    @Mock org.springframework.data.neo4j.mapping.Neo4jMappingContext mappingContext;

    @Before
    public void setUp() {

        factory = new GraphRepositoryFactory(session, mappingContext) {

        };
    }


    @Test
    public void setsUpBasicInstanceCorrectly() throws Exception {
        assertNotNull(factory.getRepository(ObjectRepository.class));
    }

    @Test
    public void allowsCallingOfObjectMethods() {

        ObjectRepository repository = factory.getRepository(ObjectRepository.class);

        repository.hashCode();
        repository.toString();
        repository.equals(repository);
    }

    @Test
    public void usesConfiguredRepositoryBaseClass() {
        factory.setRepositoryBaseClass(CustomGraphRepository.class);
        ObjectRepository repository = factory.getRepository(ObjectRepository.class);
        assertEquals(CustomGraphRepository.class, ((Advised) repository).getTargetClass());
    }

    private interface ObjectRepository extends GraphRepository<Object> {
        @Transactional
        Object findOne(Long id);
    }

    static class CustomGraphRepository<T> extends GraphRepositoryImpl<T> {
        public CustomGraphRepository(Class<T> clazz, Session session) {
            super(clazz, session);
        }
    }
}

<code block>


package org.springframework.data.neo4j.repositories.domain;



public class Movie {

    private Long id;
    private String title;

    public Movie() {
    }

    public Movie(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }
}

<code block>


package org.springframework.data.neo4j.repositories.domain;


public class User {

    private Long id;
    private String name;

    public User() {
    }

    public User(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

<code block>


package org.springframework.data.neo4j.repositories.repo;

import org.springframework.data.neo4j.repositories.domain.Movie;
import org.springframework.data.repository.RepositoryDefinition;


@RepositoryDefinition(domainClass = Movie.class, idClass = Long.class)
public interface MovieRepository {

    <S extends Movie> S save(S entity);

    Iterable<Movie> findAll();
}

<code block>


package org.springframework.data.neo4j.repositories.repo;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.data.neo4j.server.RemoteServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableNeo4jRepositories 
@EnableTransactionManagement
public class PersistenceContextInTheSamePackage extends Neo4jConfiguration {

    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.repositories.domain");
    }

    @Bean
    public Neo4jServer neo4jServer() {
        return new RemoteServer("http://localhost:7879");
    }
}

<code block>


package org.springframework.data.neo4j.repositories.repo;

import org.springframework.data.neo4j.repositories.domain.User;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.stereotype.Repository;


@Repository
public interface UserRepository extends GraphRepository<User> {
}

<code block>


package org.springframework.data.neo4j.transactions;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.transactions.service.WrapperService;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;


@ContextConfiguration(classes = {ApplicationConfig.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class TransactionBoundaryTest {

    @Autowired
    WrapperService wrapperService;

    @Before
    public void tearDown() {
        wrapperService.purge();
    }

    @Test
    public void shouldRollbackNestedTransactions() {
        try {
            wrapperService.composeSuccessThenFail();
            fail("should have thrown exception");
        } catch (Exception e) {
            assertEquals(0, countNodes());
        }
    }

    @Test
    public void shouldCommitNestedTransactions() {
        try {
            wrapperService.composeSuccessThenSuccess();
            assertEquals(2, countNodes());
        } catch (Exception e) {
            fail("should not have thrown exception");
        }

    }

    @Test
    public void shouldAlwaysCommitIfForced() {
        try {
            wrapperService.composeForceThenFail();
            fail("should have thrown exception");
        } catch (Exception e) {
            assertEquals(1, countNodes());
        }
    }


    private int countNodes() {
        Iterator iterator = wrapperService.loadNodes().iterator();
        int i = 0;
        while (iterator.hasNext()) {
            iterator.next();
            i++;
        }
        return i;
    }
}

<code block>


package org.springframework.data.neo4j.transactions;

import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.event.TransactionData;
import org.neo4j.graphdb.event.TransactionEventHandler;
import org.neo4j.tooling.GlobalGraphOperations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.movies.context.MoviesContext;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.data.neo4j.examples.movies.service.UserService;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;


@ContextConfiguration(classes = {MoviesContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class TransactionIntegrationTest {

    @Rule
    public final Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @Before
    public void populateDatabase() {
        neo4jRule.getGraphDatabaseService().registerTransactionEventHandler(new TransactionEventHandler.Adapter<Object>() {
            @Override
            public Object beforeCommit(TransactionData data) throws Exception {
                System.out.println("The request to commit is denied");
                throw new TransactionInterceptException("Deliberate testing exception");

            }
        });
    }


    @Test(expected = Exception.class)
    public void whenImplicitTransactionFailsNothingShouldBeCreated() {
        try {
            userRepository.save(new User("Michal"));
            fail("should have thrown exception");
        } catch (Exception e) {
            parseExceptionMessage(e.getLocalizedMessage());
            checkDatabase();
        }

    }

    private void parseExceptionMessage(String localizedMessage) {
        String parsed = localizedMessage.replace("{", "{\n");
        parsed = parsed.replace("\\n\\tat", "\n\tat");
        parsed = parsed.replace("},{", "},\n{");
        parsed = parsed.replace("\\n", "\n");

        System.out.println(parsed);

    }

    @Test(expected = Exception.class)
    public void whenExplicitTransactionFailsNothingShouldBeCreated() {
        try {
            userService.saveWithTxAnnotationOnInterface(new User("Michal"));
            fail("should have thrown exception");
        } catch (Exception e) {
            parseExceptionMessage(e.getLocalizedMessage());
            checkDatabase();
        }

    }

    @Test(expected = Exception.class)
    public void whenExplicitTransactionFailsNothingShouldBeCreated2() {
        try {
            userService.saveWithTxAnnotationOnImpl(new User("Michal"));
            fail("should have thrown exception");
        } catch (Exception e) {
            parseExceptionMessage(e.getLocalizedMessage());
            checkDatabase();
        }
    }

    private void checkDatabase() {
        try (Transaction tx = neo4jRule.getGraphDatabaseService().beginTx()) {
            assertFalse(GlobalGraphOperations.at(neo4jRule.getGraphDatabaseService()).getAllNodes().iterator().hasNext());
            tx.success();
        }
    }

    static class TransactionInterceptException extends Exception {
        public TransactionInterceptException(String msg) {
            super(msg);
        }
    }

}

<code block>


package org.springframework.data.neo4j.transactions;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan({"org.springframework.data.neo4j.transactions"})
@EnableTransactionManagement
public class ApplicationConfig extends Neo4jConfiguration {

    @Override
    @Bean
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.transactions");
    }

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

}

<code block>

package org.springframework.data.neo4j.transactions.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;


@Component
@Transactional
public class WrapperService {

    private static final Logger log = LoggerFactory.getLogger(BusinessService.class);

    @Autowired
    BusinessService businessService;

    public void composeSuccessThenFail() {
        businessService.successMethod();
        businessService.failMethod();
    }

    public void composeSuccessThenSuccess() {
        businessService.successMethod();
        businessService.successMethod();
    }

    public void composeForceThenFail() {
        businessService.forceMethod();
        businessService.failMethod();
    }

    public Iterable<Map<String, Object>> loadNodes() {
        return businessService.loadNodes();
    }

    public void purge() {
        businessService.purge();
    }
}

<code block>

package org.springframework.data.neo4j.transactions.service;

import org.neo4j.ogm.session.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.template.Neo4jTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.Map;


@Component
public class BusinessService {

    private static final Logger log = LoggerFactory.getLogger(BusinessService.class);

    @Autowired
    private Session session;

    @Transactional
    public void successMethod() {
        insertNode();
    }

    @Transactional
    public void failMethod() {
        insertNode();
        throw new RuntimeException("Deliberate to force rollback of entire transaction");
    }

    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void forceMethod() {
        insertNode();
    }

    private void insertNode() {
        new Neo4jTemplate(session).execute("CREATE node");
    }

    public Iterable<Map<String, Object>> loadNodes() {
        return new Neo4jTemplate(session).query("MATCH n RETURN n", new HashMap<String, Object>());
    }

    public void purge() {
        new Neo4jTemplate(session).execute("MATCH n DELETE n");

    }
}

<code block>


package org.springframework.data.neo4j.repository.query;

import org.neo4j.ogm.session.Session;
import org.springframework.data.repository.query.Parameter;
import org.springframework.data.repository.query.Parameters;
import org.springframework.data.repository.query.RepositoryQuery;

import java.util.HashMap;
import java.util.Map;



public class GraphRepositoryQuery implements RepositoryQuery {

    private final GraphQueryMethod graphQueryMethod;

    protected final Session session;

    public GraphRepositoryQuery(GraphQueryMethod graphQueryMethod, Session session) {
        this.graphQueryMethod = graphQueryMethod;
        this.session = session;
    }

    @Override
    public final Object execute(Object[] parameters) {
        Class<?> returnType = graphQueryMethod.getMethod().getReturnType();
        Class<?> concreteType = graphQueryMethod.resolveConcreteReturnType();

        Map<String, Object> params = resolveParams(parameters);

        return execute(returnType, concreteType, getQueryString(), params);
    }

    protected Object execute(Class<?> returnType, Class<?> concreteType, String cypherQuery, Map<String, Object> queryParams) {

        if (returnType.equals(Void.class) || returnType.equals(void.class)) {
            session.execute(cypherQuery, queryParams);
            return null;
        }

        if (graphQueryMethod.isModifyingQuery()) {
            return session.execute(cypherQuery, queryParams);
        }

        if (Iterable.class.isAssignableFrom(returnType)) {


            if (Map.class.isAssignableFrom(concreteType)) {
                return session.query(cypherQuery, queryParams);
            }
            return session.query(concreteType, cypherQuery, queryParams);
        }

        return session.queryForObject(returnType, cypherQuery, queryParams);
    }

    private Map<String, Object> resolveParams(Object[] parameters) {
        Map<String, Object> params = new HashMap<>();
        Parameters<?, ?> methodParameters = graphQueryMethod.getParameters();

        for (int i = 0; i < parameters.length; i++) {
            Parameter parameter = methodParameters.getParameter(i);

            if (parameter.isNamedParameter()) {
                params.put(parameter.getName(), parameters[i]);
            } else {
                params.put("" + i, parameters[i]);
            }
        }
        return params;
    }

    @Override
    public GraphQueryMethod getQueryMethod() {
        return graphQueryMethod;
    }

    protected String getQueryString() {
        return getQueryMethod().getQuery();
    }

}
<code block>


package org.springframework.data.neo4j.queries;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;

import org.junit.After;
import org.junit.ClassRule;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.ogm.metadata.MappingException;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.movies.context.MoviesContext;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.queryresult.*;
import org.springframework.data.neo4j.examples.movies.repo.CinemaRepository;
import org.springframework.data.neo4j.examples.movies.repo.UnmanagedUserPojo;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {MoviesContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class QueryIntegrationTest {

    @ClassRule
    public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CinemaRepository cinemaRepository;

    @After
    public void clearDatabase() {
        neo4jRule.clearDatabase();
    }

    private void executeUpdate(String cypher) {
        new ExecutionEngine(neo4jRule.getGraphDatabaseService()).execute(cypher);
    }

    @Test
    public void shouldFindArbitraryGraph() {
        executeUpdate(
                "CREATE " +
                        "(dh:Movie {name:'Die Hard'}), " +
                        "(fe:Movie {name: 'The Fifth Element'}), " +
                        "(bw:User {name: 'Bruce Willis'}), " +
                        "(ar:User {name: 'Alan Rickman'}), " +
                        "(mj:User {name: 'Milla Jovovich'}), " +
                        "(mj)-[:ACTED_IN]->(fe), " +
                        "(ar)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(fe)");

        List<Map<String, Object>> graph = userRepository.getGraph();
        assertNotNull(graph);
        int i = 0;
        for (Map<String,Object> properties: graph) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }

    @Test
    public void shouldFindScalarValues() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");
        List<Integer> ids = userRepository.getUserIds();
        assertEquals(2, ids.size());

        List<Long> nodeIds = userRepository.getUserNodeIds();
        assertEquals(2, nodeIds.size());
    }

    @Test
    public void shouldFindUserByName() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByName("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindTotalUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        int users = userRepository.findTotalUsers();
        assertEquals(users, 2);
    }

    @Test
    public void shouldFindUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Collection<User> users = userRepository.getAllUsers();
        assertEquals(users.size(), 2);
    }

    @Test
    public void shouldFindUserByNameWithNamedParam() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByNameWithNamedParam("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindUsersAsProperties() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Iterable<Map<String, Object>> users = userRepository.getUsersAsProperties();
        assertNotNull(users);
        int i = 0;
        for (Map<String,Object> properties: users) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }


    @Test
    public void shouldFindUsersAndMapThemToConcreteQueryResultObjectCollection() {
        executeUpdate("CREATE (g:User {name:'Gary', age:32}), (s:User {name:'Sheila', age:29}), (v:User {name:'Vince', age:66})");
        assertEquals("There should be some users in the database", 3, userRepository.findTotalUsers());

        Iterable<UserQueryResult> expected = Arrays.asList(new UserQueryResult("Sheila", 29),
                new UserQueryResult("Gary", 32), new UserQueryResult("Vince", 66));

        Iterable<UserQueryResult> queryResult = userRepository.retrieveAllUsersAndTheirAges();
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals(expected, queryResult);
        for(UserQueryResult userQueryResult : queryResult) {
            assertNotNull(userQueryResult.getUserId());
        }
    }


    @Test(expected = MappingException.class)
    public void shouldThrowMappingExceptionIfQueryResultTypeIsNotManagedInMappingMetadata() {
        executeUpdate("CREATE (:User {name:'Colin'}), (:User {name:'Jeff'})");


        UnmanagedUserPojo queryResult = userRepository.findIndividualUserAsDifferentObject("Jeff");
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals("Jeff", queryResult.getName());
    }

    @Test
    public void shouldFindUsersAndMapThemToProxiedQueryResultInterface() {
        executeUpdate("CREATE (:User {name:'Morne', age:30}), (:User {name:'Abraham', age:31}), (:User {name:'Virat', age:27})");

        UserQueryResultInterface result = userRepository.findIndividualUserAsProxiedObject("Abraham");
        assertNotNull("The query result shouldn't be null", result);
        assertEquals("The wrong user was returned", "Abraham", result.getNameOfUser());
        assertEquals("The wrong user was returned", 31, result.getAgeOfUser());
    }

    @Test
    public void shouldRetrieveUsersByGenderAndConvertToCorrectTypes() {
        executeUpdate("CREATE (:User {name:'David Warner', gender:'MALE'}), (:User {name:'Shikhar Dhawan', gender:'MALE'}), "
                + "(:User {name:'Sarah Taylor', gender:'FEMALE', account: '3456789', deposits:['12345.6','45678.9']})");

        Iterable<RichUserQueryResult> usersByGender = userRepository.findUsersByGender(Gender.FEMALE);
        assertNotNull("The resultant users list shouldn't be null", usersByGender);

        Iterator<RichUserQueryResult> userIterator = usersByGender.iterator();
        assertTrue(userIterator.hasNext());
        RichUserQueryResult userQueryResult = userIterator.next();
        assertEquals(Gender.FEMALE, userQueryResult.getUserGender());
        assertEquals("Sarah Taylor", userQueryResult.getUserName());
        assertEquals(BigInteger.valueOf(3456789), userQueryResult.getUserAccount());
        assertArrayEquals(new BigDecimal[]{BigDecimal.valueOf(12345.6), BigDecimal.valueOf(45678.9)}, userQueryResult.getUserDeposits());
        assertFalse(userIterator.hasNext());
    }


    @Ignore
    @Test
    public void shouldMapNodeEntitiesIntoQueryResultObjects() {
        executeUpdate("CREATE (:User {name:'Abraham'}), (:User {name:'Barry'}), (:User {name:'Colin'})");

        EntityWrappingQueryResult wrappedUser = userRepository.findWrappedUserByName("Barry");
        assertNotNull("The loaded wrapper object shouldn't be null", wrappedUser);
        assertNotNull("The enclosed user shouldn't be null", wrappedUser.getUser());
        assertEquals("Barry", wrappedUser.getUser().getName());
    }



}

<code block>


package org.springframework.data.neo4j.examples.friends;

import java.util.HashSet;
import java.util.Set;

import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;


@NodeEntity
public class Person {
	@GraphId Long id;

	private String firstName;
	private String lastName;

	@Relationship(type = "IS_FRIEND")
	private Set<Friendship> friendships = new HashSet<>();

	public Person() {}

	public Friendship addFriend(Person newFriend) {
		Friendship friendship = new Friendship(this, newFriend);
		this.friendships.add(friendship);
		return friendship;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Set<Friendship> getFriendships() {
		return friendships;
	}

	public void setFriendships(Set<Friendship> friendships) {
		this.friendships = friendships;
	}
}

<code block>


package org.springframework.data.neo4j.examples.friends;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {FriendContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class FriendTest {

	@Autowired Session session;
	@Autowired FriendService friendService;


	@Test
	public void savingPersonWhenTransactionalShouldWork() {
		friendService.createPersonAndFriends();

		session.clear();
		Person john = session.loadAll(Person.class, new Filter("firstName", "John")).iterator().next();
		assertNotNull(john);
		assertEquals(2, john.getFriendships().size());;
	}
}

<code block>


package org.springframework.data.neo4j.examples.friends;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@ComponentScan("org.springframework.data.neo4j.examples.friends")
@EnableTransactionManagement
public class FriendContext extends Neo4jConfiguration {

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.examples.friends");
    }

}

<code block>


package org.springframework.data.neo4j.examples.friends;

import org.neo4j.ogm.annotation.EndNode;
import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.RelationshipEntity;
import org.neo4j.ogm.annotation.StartNode;


@RelationshipEntity(type = "IS_FRIEND")
public class Friendship {

	@GraphId private Long id;

	@StartNode private Person personStartNode;
	@EndNode private Person personEndNode;

	private long timestamp;

	public Friendship() {}

	public Friendship(Person personStartNode, Person personEndNode) {
		this.personStartNode = personStartNode;
		this.personEndNode = personEndNode;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Person getPersonStartNode() {
		return personStartNode;
	}

	public void setPersonStartNode(Person personStartNode) {
		this.personStartNode = personStartNode;
	}

	public Person getPersonEndNode() {
		return personEndNode;
	}

	public void setPersonEndNode(Person personEndNode) {
		this.personEndNode = personEndNode;
	}

	public long getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(long timestamp) {
		this.timestamp = timestamp;
	}
}

<code block>


package org.springframework.data.neo4j.examples.friends;

import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class FriendService {

	@Autowired
	Session session;

	@Transactional
	public void createPersonAndFriends() {
		Person john = new Person();
		john.setFirstName("John");
		session.save(john);

		Person bob = new Person();
		bob.setFirstName("Bob");
		session.save(bob);

		Person bill = new Person();
		bill.setFirstName("Bill");
		session.save(bill);

		john = session.load(Person.class, john.getId());
		bob = session.load(Person.class, bob.getId());
		Friendship friendship1 = john.addFriend(bob);
		friendship1.setTimestamp(System.currentTimeMillis());
		session.save(john);
		john = session.load(Person.class, john.getId());
		bill = session.load(Person.class, bill.getId());
		Friendship friendship2 = john.addFriend(bill);
		friendship2.setTimestamp(System.currentTimeMillis());
		session.save(john);
	}
}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.queryresult.*;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;


@Repository
public interface UserRepository extends GraphRepository<User> {

    Collection<User> findByName(String name);

    Collection<User> findByMiddleName(String middleName);

    List<User> findByRatingsStars(int stars);

    List<User> findByRatingsStarsAndInterestedName(int stars, String name);

    @Query("MATCH (user:User) RETURN COUNT(user)")
    int findTotalUsers();

    @Query("MATCH (user:User) RETURN user.id")
    List<Integer> getUserIds();

    @Query("MATCH (user:User) RETURN user.name, user.id")
    Iterable<Map<String,Object>> getUsersAsProperties();

    @Query("MATCH (user:User) RETURN user")
    Collection<User> getAllUsers();

    @Query("MATCH (m:Movie)<-[:ACTED_IN]-(a:User) RETURN m.name as movie, collect(a.name) as cast")
    List<Map<String, Object>> getGraph();

    @Query("MATCH (user:User{name:{name}}) RETURN user")
    User findUserByNameWithNamedParam(@Param("name") String name);

    @Query("MATCH (user:User{name:{0}}) RETURN user")
    User findUserByName(String name);

    @Query("MATCH (user:User) RETURN id(user) AS userId, user.name AS userName, user.age ORDER BY user.age")
    Iterable<UserQueryResult> retrieveAllUsersAndTheirAges();

    @Query("MATCH (user:User{name:{0}}) RETURN user.name AS name")
    UnmanagedUserPojo findIndividualUserAsDifferentObject(String name);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user.name, user.age AS ageOfUser")
    UserQueryResultInterface findIndividualUserAsProxiedObject(String name);

    @Query("MATCH (user:User) WHERE user.gender={0} RETURN user.name AS UserName, user.gender AS UserGender, user.account as UserAccount, user.deposits as UserDeposits")
    Iterable<RichUserQueryResult> findUsersByGender(Gender gender);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user")
    EntityWrappingQueryResult findWrappedUserByName(String userName);

    @Query("MATCH (user:User) RETURN ID(user)")
    List<Long> getUserNodeIds();

}

<code block>


package org.springframework.data.neo4j.repository.query;

import java.util.HashMap;
import java.util.Map;

import org.neo4j.ogm.session.Session;
import org.springframework.data.repository.query.Parameter;
import org.springframework.data.repository.query.Parameters;
import org.springframework.data.repository.query.RepositoryQuery;



public class GraphRepositoryQuery implements RepositoryQuery {

    private final GraphQueryMethod graphQueryMethod;

    protected final Session session;

    public GraphRepositoryQuery(GraphQueryMethod graphQueryMethod, Session session) {
        this.graphQueryMethod = graphQueryMethod;
        this.session = session;
    }

    @Override
    public final Object execute(Object[] parameters) {
        Class<?> returnType = graphQueryMethod.getMethod().getReturnType();
        Class<?> concreteType = graphQueryMethod.resolveConcreteReturnType();

        Map<String, Object> params = resolveParams(parameters);

        return execute(returnType, concreteType, getQueryString(), params);
    }

    protected Object execute(Class<?> returnType, Class<?> concreteType, String cypherQuery, Map<String, Object> queryParams) {

        if (returnType.equals(Void.class) || returnType.equals(void.class)) {
            session.execute(cypherQuery, queryParams);
            return null;
        }

        if (graphQueryMethod.isModifyingQuery()) {
            return session.execute(cypherQuery, queryParams);
        }

        if (Iterable.class.isAssignableFrom(returnType)) {


            if (Map.class.isAssignableFrom(concreteType)) {
                return session.query(cypherQuery, queryParams);
            }
            return session.query(concreteType, cypherQuery, queryParams);
        }

        return session.queryForObject(returnType, cypherQuery, queryParams);
    }

    private Map<String, Object> resolveParams(Object[] parameters) {

        Map<String, Object> params = new HashMap<>();
        Parameters<?, ?> methodParameters = graphQueryMethod.getParameters();

        for (int i = 0; i < parameters.length; i++) {
            Parameter parameter = methodParameters.getParameter(i);


            Object parameterValue = session.resolveGraphIdFor(parameters[i]);
            if(parameterValue == null) { 
                parameterValue = parameters[i];
            }

            if (parameter.isNamedParameter()) {
                params.put(parameter.getName(), parameterValue);
            } else {
                params.put("" + i, parameterValue);
            }
        }
        return params;
    }

    @Override
    public GraphQueryMethod getQueryMethod() {
        return graphQueryMethod;
    }

    protected String getQueryString() {
        return getQueryMethod().getQuery();
    }

}
<code block>


package org.springframework.data.neo4j.queries;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;

import org.junit.After;
import org.junit.ClassRule;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.cypher.javacompat.ExecutionEngine;
import org.neo4j.ogm.metadata.MappingException;
import org.neo4j.ogm.testutil.Neo4jIntegrationTestRule;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.movies.context.MoviesContext;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.queryresult.*;
import org.springframework.data.neo4j.examples.movies.repo.CinemaRepository;
import org.springframework.data.neo4j.examples.movies.repo.UnmanagedUserPojo;
import org.springframework.data.neo4j.examples.movies.repo.UserRepository;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {MoviesContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class QueryIntegrationTest {

    @ClassRule
    public static Neo4jIntegrationTestRule neo4jRule = new Neo4jIntegrationTestRule(7879);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CinemaRepository cinemaRepository;

    @After
    public void clearDatabase() {
        neo4jRule.clearDatabase();
    }

    private void executeUpdate(String cypher) {
        new ExecutionEngine(neo4jRule.getGraphDatabaseService()).execute(cypher);
    }

    @Test
    public void shouldFindArbitraryGraph() {
        executeUpdate(
                "CREATE " +
                        "(dh:Movie {name:'Die Hard'}), " +
                        "(fe:Movie {name: 'The Fifth Element'}), " +
                        "(bw:User {name: 'Bruce Willis'}), " +
                        "(ar:User {name: 'Alan Rickman'}), " +
                        "(mj:User {name: 'Milla Jovovich'}), " +
                        "(mj)-[:ACTED_IN]->(fe), " +
                        "(ar)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(dh), " +
                        "(bw)-[:ACTED_IN]->(fe)");

        List<Map<String, Object>> graph = userRepository.getGraph();
        assertNotNull(graph);
        int i = 0;
        for (Map<String,Object> properties: graph) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }

    @Test
    public void shouldFindScalarValues() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");
        List<Integer> ids = userRepository.getUserIds();
        assertEquals(2, ids.size());

        List<Long> nodeIds = userRepository.getUserNodeIds();
        assertEquals(2, nodeIds.size());
    }

    @Test
    public void shouldFindUserByName() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByName("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindTotalUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        int users = userRepository.findTotalUsers();
        assertEquals(users, 2);
    }

    @Test
    public void shouldFindUsers() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Collection<User> users = userRepository.getAllUsers();
        assertEquals(users.size(), 2);
    }

    @Test
    public void shouldFindUserByNameWithNamedParam() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User user = userRepository.findUserByNameWithNamedParam("Michal");
        assertEquals("Michal",user.getName());
    }

    @Test
    public void shouldFindUsersAsProperties() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        Iterable<Map<String, Object>> users = userRepository.getUsersAsProperties();
        assertNotNull(users);
        int i = 0;
        for (Map<String,Object> properties: users) {
            i++;
            assertNotNull(properties);
        }
        assertEquals(2, i);
    }


    @Test
    public void shouldFindUsersAndMapThemToConcreteQueryResultObjectCollection() {
        executeUpdate("CREATE (g:User {name:'Gary', age:32}), (s:User {name:'Sheila', age:29}), (v:User {name:'Vince', age:66})");
        assertEquals("There should be some users in the database", 3, userRepository.findTotalUsers());

        Iterable<UserQueryResult> expected = Arrays.asList(new UserQueryResult("Sheila", 29),
                new UserQueryResult("Gary", 32), new UserQueryResult("Vince", 66));

        Iterable<UserQueryResult> queryResult = userRepository.retrieveAllUsersAndTheirAges();
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals(expected, queryResult);
        for(UserQueryResult userQueryResult : queryResult) {
            assertNotNull(userQueryResult.getUserId());
        }
    }


    @Test(expected = MappingException.class)
    public void shouldThrowMappingExceptionIfQueryResultTypeIsNotManagedInMappingMetadata() {
        executeUpdate("CREATE (:User {name:'Colin'}), (:User {name:'Jeff'})");


        UnmanagedUserPojo queryResult = userRepository.findIndividualUserAsDifferentObject("Jeff");
        assertNotNull("The query result shouldn't be null", queryResult);
        assertEquals("Jeff", queryResult.getName());
    }

    @Test
    public void shouldFindUsersAndMapThemToProxiedQueryResultInterface() {
        executeUpdate("CREATE (:User {name:'Morne', age:30}), (:User {name:'Abraham', age:31}), (:User {name:'Virat', age:27})");

        UserQueryResultInterface result = userRepository.findIndividualUserAsProxiedObject("Abraham");
        assertNotNull("The query result shouldn't be null", result);
        assertEquals("The wrong user was returned", "Abraham", result.getNameOfUser());
        assertEquals("The wrong user was returned", 31, result.getAgeOfUser());
    }

    @Test
    public void shouldRetrieveUsersByGenderAndConvertToCorrectTypes() {
        executeUpdate("CREATE (:User {name:'David Warner', gender:'MALE'}), (:User {name:'Shikhar Dhawan', gender:'MALE'}), "
                + "(:User {name:'Sarah Taylor', gender:'FEMALE', account: '3456789', deposits:['12345.6','45678.9']})");

        Iterable<RichUserQueryResult> usersByGender = userRepository.findUsersByGender(Gender.FEMALE);
        assertNotNull("The resultant users list shouldn't be null", usersByGender);

        Iterator<RichUserQueryResult> userIterator = usersByGender.iterator();
        assertTrue(userIterator.hasNext());
        RichUserQueryResult userQueryResult = userIterator.next();
        assertEquals(Gender.FEMALE, userQueryResult.getUserGender());
        assertEquals("Sarah Taylor", userQueryResult.getUserName());
        assertEquals(BigInteger.valueOf(3456789), userQueryResult.getUserAccount());
        assertArrayEquals(new BigDecimal[]{BigDecimal.valueOf(12345.6), BigDecimal.valueOf(45678.9)}, userQueryResult.getUserDeposits());
        assertFalse(userIterator.hasNext());
    }


    @Ignore
    @Test
    public void shouldMapNodeEntitiesIntoQueryResultObjects() {
        executeUpdate("CREATE (:User {name:'Abraham'}), (:User {name:'Barry'}), (:User {name:'Colin'})");

        EntityWrappingQueryResult wrappedUser = userRepository.findWrappedUserByName("Barry");
        assertNotNull("The loaded wrapper object shouldn't be null", wrappedUser);
        assertNotNull("The enclosed user shouldn't be null", wrappedUser.getUser());
        assertEquals("Barry", wrappedUser.getUser().getName());
    }



    @Test
    public void shouldSubstituteUserId() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User michal = userRepository.findUserByName("Michal");
        assertNotNull(michal);
        User user = userRepository.loadUserById(michal);
        assertEquals("Michal",user.getName());
    }


    @Test
    public void shouldSubstituteNamedParamUserId() {
        executeUpdate("CREATE (m:User {name:'Michal'})<-[:FRIEND_OF]-(a:User {name:'Adam'})");

        User michal = userRepository.findUserByName("Michal");
        assertNotNull(michal);
        User user = userRepository.loadUserByNamedId(michal);
        assertEquals("Michal",user.getName());
    }

}

<code block>


package org.springframework.data.neo4j.examples.friends;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.neo4j.ogm.cypher.Filter;
import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.friends.context.FriendContext;
import org.springframework.data.neo4j.examples.friends.domain.Friendship;
import org.springframework.data.neo4j.examples.friends.domain.Person;
import org.springframework.data.neo4j.examples.friends.repo.FriendshipRepository;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@ContextConfiguration(classes = {FriendContext.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class FriendTest {

	@Autowired Session session;
	@Autowired FriendshipRepository friendshipRepository;
	@Autowired FriendService friendService;


	@Test
	public void savingPersonWhenTransactionalShouldWork() {
		friendService.createPersonAndFriends();

		session.clear();
		Person john = session.loadAll(Person.class, new Filter("firstName", "John")).iterator().next();
		assertNotNull(john);
		assertEquals(2, john.getFriendships().size());;
	}


	@Test
	public void circularParamtersShouldNotProduceInfiniteRecursion() {
		Person john = new Person();
		john.setFirstName("John");
		session.save(john);

		Person bob = new Person();
		bob.setFirstName("Bob");
		session.save(bob);

		Friendship friendship1 = john.addFriend(bob);
		friendship1.setTimestamp(System.currentTimeMillis());
		session.save(john);

		Friendship queriedFriendship = friendshipRepository.getFriendship(john,bob);
		assertNotNull(queriedFriendship);
		assertEquals("John",queriedFriendship.getPersonStartNode().getFirstName());
		assertEquals("Bob",queriedFriendship.getPersonEndNode().getFirstName());

	}
}

<code block>


package org.springframework.data.neo4j.examples.friends;

import org.neo4j.ogm.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.neo4j.examples.friends.domain.Friendship;
import org.springframework.data.neo4j.examples.friends.domain.Person;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class FriendService {

	@Autowired
	Session session;

	@Transactional
	public void createPersonAndFriends() {
		Person john = new Person();
		john.setFirstName("John");
		session.save(john);

		Person bob = new Person();
		bob.setFirstName("Bob");
		session.save(bob);

		Person bill = new Person();
		bill.setFirstName("Bill");
		session.save(bill);

		john = session.load(Person.class, john.getId());
		bob = session.load(Person.class, bob.getId());
		Friendship friendship1 = john.addFriend(bob);
		friendship1.setTimestamp(System.currentTimeMillis());
		session.save(john);
		john = session.load(Person.class, john.getId());
		bill = session.load(Person.class, bill.getId());
		Friendship friendship2 = john.addFriend(bill);
		friendship2.setTimestamp(System.currentTimeMillis());
		session.save(john);
	}
}

<code block>


package org.springframework.data.neo4j.examples.friends.context;

import org.neo4j.ogm.session.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.neo4j.config.Neo4jConfiguration;
import org.springframework.data.neo4j.repository.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.server.InProcessServer;
import org.springframework.data.neo4j.server.Neo4jServer;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableNeo4jRepositories("org.springframework.data.neo4j.examples.friends.repo")
@ComponentScan({"org.springframework.data.neo4j.examples.friends"})
@EnableTransactionManagement
public class FriendContext extends Neo4jConfiguration {


    @Autowired
    private Environment environment;

    @Bean
    @Override
    public Neo4jServer neo4jServer() {
        return new InProcessServer();
    }

    @Bean
    @Override
    public SessionFactory getSessionFactory() {
        return new SessionFactory("org.springframework.data.neo4j.examples.friends.domain");
    }

}

<code block>


package org.springframework.data.neo4j.examples.friends.domain;

import java.util.HashSet;
import java.util.Set;

import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;


@NodeEntity
public class Person {
	@GraphId Long id;

	private String firstName;
	private String lastName;

	@Relationship(type = "IS_FRIEND")
	private Set<Friendship> friendships = new HashSet<>();

	public Person() {}

	public Friendship addFriend(Person newFriend) {
		Friendship friendship = new Friendship(this, newFriend);
		this.friendships.add(friendship);
		return friendship;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Set<Friendship> getFriendships() {
		return friendships;
	}

	public void setFriendships(Set<Friendship> friendships) {
		this.friendships = friendships;
	}
}

<code block>


package org.springframework.data.neo4j.examples.friends.domain;

import org.neo4j.ogm.annotation.EndNode;
import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.RelationshipEntity;
import org.neo4j.ogm.annotation.StartNode;


@RelationshipEntity(type = "IS_FRIEND")
public class Friendship {

	@GraphId private Long id;

	@StartNode private Person personStartNode;
	@EndNode private Person personEndNode;

	private long timestamp;

	public Friendship() {}

	public Friendship(Person personStartNode, Person personEndNode) {
		this.personStartNode = personStartNode;
		this.personEndNode = personEndNode;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Person getPersonStartNode() {
		return personStartNode;
	}

	public void setPersonStartNode(Person personStartNode) {
		this.personStartNode = personStartNode;
	}

	public Person getPersonEndNode() {
		return personEndNode;
	}

	public void setPersonEndNode(Person personEndNode) {
		this.personEndNode = personEndNode;
	}

	public long getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(long timestamp) {
		this.timestamp = timestamp;
	}
}

<code block>


package org.springframework.data.neo4j.examples.friends.repo;

import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.examples.friends.domain.Friendship;
import org.springframework.data.neo4j.examples.friends.domain.Person;
import org.springframework.data.neo4j.repository.GraphRepository;


public interface FriendshipRepository extends GraphRepository<Friendship> {

	@Query("MATCH (person1)-[rel:IS_FRIEND]->(person2) WHERE ID(person1)={0} AND ID(person2)={1} return rel")
	Friendship getFriendship(Person person1, Person person2);

}

<code block>


package org.springframework.data.neo4j.examples.movies.repo;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.springframework.data.neo4j.annotation.Query;
import org.springframework.data.neo4j.examples.movies.domain.User;
import org.springframework.data.neo4j.examples.movies.domain.queryresult.*;
import org.springframework.data.neo4j.repository.GraphRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;


@Repository
public interface UserRepository extends GraphRepository<User> {

    Collection<User> findByName(String name);

    Collection<User> findByMiddleName(String middleName);

    List<User> findByRatingsStars(int stars);

    List<User> findByRatingsStarsAndInterestedName(int stars, String name);

    @Query("MATCH (user:User) RETURN COUNT(user)")
    int findTotalUsers();

    @Query("MATCH (user:User) RETURN user.id")
    List<Integer> getUserIds();

    @Query("MATCH (user:User) RETURN user.name, user.id")
    Iterable<Map<String,Object>> getUsersAsProperties();

    @Query("MATCH (user:User) RETURN user")
    Collection<User> getAllUsers();

    @Query("MATCH (m:Movie)<-[:ACTED_IN]-(a:User) RETURN m.name as movie, collect(a.name) as cast")
    List<Map<String, Object>> getGraph();

    @Query("MATCH (user:User{name:{name}}) RETURN user")
    User findUserByNameWithNamedParam(@Param("name") String name);

    @Query("MATCH (user:User{name:{0}}) RETURN user")
    User findUserByName(String name);

    @Query("MATCH (user:User) RETURN id(user) AS userId, user.name AS userName, user.age ORDER BY user.age")
    Iterable<UserQueryResult> retrieveAllUsersAndTheirAges();

    @Query("MATCH (user:User{name:{0}}) RETURN user.name AS name")
    UnmanagedUserPojo findIndividualUserAsDifferentObject(String name);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user.name, user.age AS ageOfUser")
    UserQueryResultInterface findIndividualUserAsProxiedObject(String name);

    @Query("MATCH (user:User) WHERE user.gender={0} RETURN user.name AS UserName, user.gender AS UserGender, user.account as UserAccount, user.deposits as UserDeposits")
    Iterable<RichUserQueryResult> findUsersByGender(Gender gender);

    @Query("MATCH (user:User) WHERE user.name={0} RETURN user")
    EntityWrappingQueryResult findWrappedUserByName(String userName);

    @Query("MATCH (user:User) RETURN ID(user)")
    List<Long> getUserNodeIds();

    @Query("MATCH (user:User) WHERE ID(user)={0} return user")
    User loadUserById(User user);

    @Query("MATCH (user:User) WHERE ID(user)={userId} RETURN user")
    User loadUserByNamedId(@Param("userId") User user);


}
