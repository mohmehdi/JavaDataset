
























package jodd.http;

import jodd.datetime.TimeUtil;
import jodd.http.up.ByteArrayUploadable;
import jodd.http.up.FileUploadable;
import jodd.http.up.Uploadable;
import jodd.io.FastCharArrayWriter;
import jodd.io.FileNameUtil;
import jodd.io.StreamUtil;
import jodd.upload.FileUpload;
import jodd.upload.MultipartStreamParser;
import jodd.util.MimeTypes;
import jodd.util.RandomString;
import jodd.util.StringPool;
import jodd.util.StringUtil;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collections;
import java.util.Map;

import static jodd.util.StringPool.CRLF;


@SuppressWarnings("unchecked")
public abstract class HttpBase<T> {

    public static final String HEADER_ACCEPT = "Accept";
	public static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
	public static final String HEADER_CONTENT_TYPE = "Content-Type";
	public static final String HEADER_CONTENT_LENGTH = "Content-Length";
	public static final String HEADER_CONTENT_ENCODING = "Content-Encoding";
	public static final String HEADER_HOST = "Host";
	public static final String HEADER_ETAG = "ETag";
	public static final String HEADER_CONNECTION = "Connection";
	public static final String HEADER_KEEP_ALIVE = "Keep-Alive";
	public static final String HEADER_CLOSE = "Close";
	public static final String HTTP_1_0 = "HTTP/1.0";
	public static final String HTTP_1_1 = "HTTP/1.1";

	protected String httpVersion = HTTP_1_1;
	protected HttpValuesMap<String> headers = HttpValuesMap.ofStrings();

	protected HttpValuesMap<Object> form;	
	protected String body;					




	public String httpVersion() {
		return httpVersion;
	}


	public T httpVersion(String httpVersion) {
		this.httpVersion = httpVersion;
		return (T) this;
	}




	public String header(String name) {
		String key = name.trim().toLowerCase();

		Object value = headers.getFirst(key);

		if (value == null) {
			return null;
		}
		return value.toString();
	}


	public String[] headers(String name) {
		String key = name.trim().toLowerCase();

		return headers.getStrings(key);
	}


	public void removeHeader(String name) {
		String key = name.trim().toLowerCase();

		headers.remove(key);
	}


	public T header(String name, String value) {
		return header(name, value, false);
	}


	public T header(String name, String value, boolean overwrite) {
		String key = name.trim().toLowerCase();

		value = value.trim();

		if (key.equalsIgnoreCase(HEADER_CONTENT_TYPE)) {
			mediaType = HttpUtil.extractMediaType(value);
			charset = HttpUtil.extractContentTypeCharset(value);
		}

		if (overwrite == true) {
			headers.set(key, value);
		} else {
			headers.add(key, value);
		}
		return (T) this;
	}


	protected void _header(String name, String value, boolean overwrite) {
		String key = name.trim().toLowerCase();
		value = value.trim();
		if (overwrite) {
			headers.set(key, value);
		} else {
			headers.add(key, value);
		}
	}


	public T header(String name, int value) {
		_header(name, String.valueOf(value), false);
		return (T) this;
	}


	public T header(String name, long millis) {
		_header(name, TimeUtil.formatHttpDate(millis), false);
		return (T) this;
	}


	public Map<String, String[]> headers() {
		return Collections.unmodifiableMap(headers);
	}



	protected String charset;


	public String charset() {
		return charset;
	}


	public T charset(String charset) {
		this.charset = null;
		contentType(null, charset);
		return (T) this;
	}


	protected String mediaType;


	public String mediaType() {
		return mediaType;
	}


	public T mediaType(String mediaType) {
		contentType(mediaType, null);
		return (T) this;
	}


	public String contentType() {
		return header(HEADER_CONTENT_TYPE);
	}


	public T contentType(String contentType) {
		header(HEADER_CONTENT_TYPE, contentType, true);
		return (T) this;
	}


	public T contentType(String mediaType, String charset) {
		if (mediaType == null) {
			mediaType = this.mediaType;
		} else {
			this.mediaType = mediaType;
		}

		if (charset == null) {
			charset = this.charset;
		} else {
			this.charset = charset;
		}

		String contentType = mediaType;
		if (charset != null) {
			contentType += ";charset=" + charset;
		}

		_header(HEADER_CONTENT_TYPE, contentType, true);
		return (T) this;
	}




	public T connectionKeepAlive(boolean keepAlive) {
		if (keepAlive) {
			header(HEADER_CONNECTION, HEADER_KEEP_ALIVE, true);
		} else {
			header(HEADER_CONNECTION, HEADER_CLOSE, true);
		}
		return (T) this;
	}


	public boolean isConnectionPersistent() {
		String connection = header(HEADER_CONNECTION);
		if (connection == null) {
			return !httpVersion.equalsIgnoreCase(HTTP_1_0);
		}

		return !connection.equalsIgnoreCase(HEADER_CLOSE);
	}




	public String contentLength() {
		return header(HEADER_CONTENT_LENGTH);
	}


	public T contentLength(int value) {
		_header(HEADER_CONTENT_LENGTH, String.valueOf(value), true);
		return (T) this;
	}


	public String contentEncoding() {
		return header(HEADER_CONTENT_ENCODING);
	}


	public String accept() {
		return header(HEADER_ACCEPT);
	}


	public T accept(String encodings) {
		header(HEADER_ACCEPT, encodings, true);
		return (T) this;
	}
	

	public String acceptEncoding() {
		return header(HEADER_ACCEPT_ENCODING);
	}


	public T acceptEncoding(String encodings) {
		header(HEADER_ACCEPT_ENCODING, encodings, true);
		return (T) this;
	}




	protected void initForm() {
		if (form == null) {
			form = HttpValuesMap.ofObjects();
		}
	}


	protected Object wrapFormValue(Object value) {
		if (value == null) {
			return null;
		}
		if (value instanceof CharSequence) {
			return value.toString();
		}
		if (value instanceof Number) {
			return value.toString();
		}
		if (value instanceof Boolean) {
			return value.toString();
		}
		if (value instanceof File) {
			return new FileUploadable((File) value);
		}
		if (value instanceof byte[]) {
			return new ByteArrayUploadable((byte[]) value, null);
		}
		if (value instanceof Uploadable) {
			return value;
		}

		throw new HttpException("Unsupported value type: " + value.getClass().getName());
	}


	public T form(String name, Object value) {
		initForm();

		value = wrapFormValue(value);
		form.add(name, value);

		return (T) this;
	}


	public T form(String name, Object value, boolean overwrite) {
		initForm();

		value = wrapFormValue(value);

		if (overwrite) {
			form.set(name, value);
		} else {
			form.add(name, value);
		}

		return (T) this;
	}


	public T form(String name, Object value, Object... parameters) {
		initForm();

		form(name, value);

		for (int i = 0; i < parameters.length; i += 2) {
			name = parameters[i].toString();

			form(name, parameters[i + 1]);
		}
		return (T) this;
	}


	public T form(Map<String, Object> formMap) {
		initForm();

		for (Map.Entry<String, Object> entry : formMap.entrySet()) {
			form(entry.getKey(), entry.getValue());
		}
		return (T) this;
	}


	public Map<String, Object[]> form() {
		return form;
	}



	protected String formEncoding = JoddHttp.defaultFormEncoding;


	public T formEncoding(String encoding) {
		this.formEncoding = encoding;
		return (T) this;
	}




	public String body() {
		return body;
	}


	public byte[] bodyBytes() {
		if (body == null) {
			return null;
		}
		try {
			return body.getBytes(StringPool.ISO_8859_1);
		} catch (UnsupportedEncodingException ignore) {
			return null;
		}
	}


	public String bodyText() {
		if (body == null) {
			return StringPool.EMPTY;
		}
		if (charset != null) {
			return StringUtil.convertCharset(body, StringPool.ISO_8859_1, charset);
		}
		return body();
	}


	public T body(String body) {
		this.body = body;
		this.form = null;
		contentLength(body.length());
		return (T) this;
	}


	public T bodyText(String body, String mediaType, String charset) {
		body = StringUtil.convertCharset(body, charset, StringPool.ISO_8859_1);
		contentType(mediaType, charset);
		body(body);
		return (T) this;
	}


	public T bodyText(String body, String mediaType) {
		return bodyText(body, mediaType, JoddHttp.defaultBodyEncoding);
	}

	public T bodyText(String body) {
		return bodyText(body, JoddHttp.defaultBodyMediaType, JoddHttp.defaultBodyEncoding);
	}


	public T body(byte[] content, String contentType) {
		String body = null;
		try {
			body = new String(content, StringPool.ISO_8859_1);
		} catch (UnsupportedEncodingException ignore) {
		}
		contentType(contentType);
		return body(body);
	}



	protected boolean multipart = false;


	protected boolean isFormMultipart() {
		if (multipart) {
			return true;
		}
		for (Object[] values : form.values()) {
			if (values == null) {
				continue;
			}

			for (Object value : values) {
				if (value instanceof Uploadable) {
					return true;
				}
			}
		}
	    return false;
	}


	protected Buffer formBuffer() {
		Buffer buffer = new Buffer();
		if (form == null || form.isEmpty()) {
			return buffer;
		}

		if (!isFormMultipart()) {

			String formEncoding = charset;

			if (formEncoding == null) {
				formEncoding = this.formEncoding;
			}


			String formQueryString = HttpUtil.buildQuery(form, formEncoding);

			contentType("application/x-www-form-urlencoded", null);
			contentLength(formQueryString.length());

			buffer.append(formQueryString);
			return buffer;
		}

		String boundary = StringUtil.repeat('-', 10) + RandomString.getInstance().randomAlphaNumeric(10);

		for (Map.Entry<String, Object[]> entry : form.entrySet()) {

			buffer.append("--");
			buffer.append(boundary);
			buffer.append(CRLF);

			String name = entry.getKey();
			Object[] values = entry.getValue();

			for (Object value : values) {
				if (value instanceof String) {
					String string = (String) value;
					buffer.append("Content-Disposition: form-data; name=\"").append(name).append('"').append(CRLF);
					buffer.append(CRLF);
					buffer.append(string);
				}
				else if (value instanceof Uploadable) {
					Uploadable uploadable = (Uploadable) value;

					String fileName = uploadable.getFileName();
					if (fileName == null) {
						fileName = name;
					}

					buffer.append("Content-Disposition: form-data; name=\"").append(name);
					buffer.append("\"; filename=\"").append(fileName).append('"').append(CRLF);

					String mimeType = uploadable.getMimeType();
					if (mimeType == null) {
						mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(fileName));
					}
					buffer.append(HEADER_CONTENT_TYPE).append(": ").append(mimeType).append(CRLF);

					buffer.append("Content-Transfer-Encoding: binary").append(CRLF);
					buffer.append(CRLF);

					buffer.append(uploadable);





				} else {

					throw new HttpException("Unsupported type");
				}
				buffer.append(CRLF);
			}
		}

		buffer.append("--").append(boundary).append("--");
		buffer.append(CRLF);


		contentType("multipart/form-data; boundary=" + boundary);
		contentLength(buffer.size());

		return buffer;
	}




	public String toString() {
		return toString(true);
	}


	public String toString(boolean fullResponse) {
		Buffer buffer = buffer(fullResponse);

		StringWriter stringWriter = new StringWriter();

		try {
			buffer.writeTo(stringWriter);
		}
		catch (IOException ioex) {
			throw new HttpException(ioex);
		}

		return stringWriter.toString();
	}


	public byte[] toByteArray() {
		Buffer buffer = buffer(true);

		ByteArrayOutputStream baos = new ByteArrayOutputStream(buffer.size());

		try {
			buffer.writeTo(baos);
		}
		catch (IOException ioex) {
			throw new HttpException(ioex);
		}

		return baos.toByteArray();
	}


	protected abstract Buffer buffer(boolean full);



	protected HttpProgressListener httpProgressListener;


	public void sendTo(OutputStream out) throws IOException {
		Buffer buffer = buffer(true);

		if (httpProgressListener == null) {
			buffer.writeTo(out);
		}
		else {
			buffer.writeTo(out, httpProgressListener);
		}

		out.flush();
	}




	protected void readHeaders(BufferedReader reader) {
		while (true) {
			String line;
			try {
				line = reader.readLine();
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}

			if (StringUtil.isBlank(line)) {
				break;
			}

			int ndx = line.indexOf(':');
			if (ndx != -1) {
				header(line.substring(0, ndx), line.substring(ndx + 1));
			} else {
				throw new HttpException("Invalid header: " + line);
			}
		}
	}


	protected void readBody(BufferedReader reader) {
		String bodyString = null;


		boolean isChunked = false;

		String transferEncoding = header("Transfer-Encoding");
		if (transferEncoding != null && transferEncoding.equalsIgnoreCase("chunked")) {
			isChunked = true;
		}



		String contentLen = contentLength();
		int contentLenValue = -1;

		if (contentLen != null && !isChunked) {
			contentLenValue = Integer.parseInt(contentLen);

			if (contentLenValue > 0) {
				FastCharArrayWriter fastCharArrayWriter = new FastCharArrayWriter(contentLenValue);

				try {
					StreamUtil.copy(reader, fastCharArrayWriter, contentLenValue);
				} catch (IOException ioex) {
					throw new HttpException(ioex);
				}

				bodyString = fastCharArrayWriter.toString();
			}
		}


		if (isChunked) {

			FastCharArrayWriter fastCharArrayWriter = new FastCharArrayWriter();
			try {
				while (true) {
					String line = reader.readLine();

					int len = Integer.parseInt(line, 16);

					if (len > 0) {
						StreamUtil.copy(reader, fastCharArrayWriter, len);
						reader.readLine();
					} else {

						readHeaders(reader);
						break;
					}
				}
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}

			bodyString = fastCharArrayWriter.toString();
		}


		if (bodyString == null && contentLenValue != 0) {

			FastCharArrayWriter fastCharArrayWriter = new FastCharArrayWriter();
			try {
				StreamUtil.copy(reader, fastCharArrayWriter);
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}
			bodyString = fastCharArrayWriter.toString();
		}


		String charset = this.charset;
		if (charset == null) {
			charset = StringPool.ISO_8859_1;
		}
		body = bodyString;

		String mediaType = mediaType();

		if (mediaType == null) {
			mediaType = StringPool.EMPTY;
		} else {
			mediaType = mediaType.toLowerCase();
		}

		if (mediaType.equals("application/x-www-form-urlencoded")) {
			form = HttpUtil.parseQuery(bodyString, true);
			return;
		}

		if (mediaType.equals("multipart/form-data")) {
			form = HttpValuesMap.ofObjects();

			MultipartStreamParser multipartParser = new MultipartStreamParser();

			try {
				byte[] bodyBytes = bodyString.getBytes(StringPool.ISO_8859_1);
				ByteArrayInputStream bin = new ByteArrayInputStream(bodyBytes);
				multipartParser.parseRequestStream(bin, charset);
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}


			for (String paramName : multipartParser.getParameterNames()) {
				String[] values = multipartParser.getParameterValues(paramName);
				if (values.length == 1) {
					form.add(paramName, values[0]);
				} else {
					form.put(paramName, values);
				}
			}


			for (String paramName : multipartParser.getFileParameterNames()) {
				FileUpload[] values = multipartParser.getFiles(paramName);
				if (values.length == 1) {
					form.add(paramName, values[0]);
				} else {
					form.put(paramName, values);
				}
			}

			return;
		}



		form = null;
	}

}
<code block>

























package jodd.http;

import jodd.io.StreamUtil;
import jodd.util.StringPool;
import jodd.util.StringUtil;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

public class EchoServlet extends HttpServlet {

	public static Data ref;

	public static void testinit() {
		ref = new Data();
	}

	public static class Data {
		public boolean get;
		public boolean post;
		public String queryString;
		public String body;
		public Map<String, String> header;
		public Map<String, String> params;
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		ref.get = true;
		ref.post = false;
		readAll(req);
		write(resp, ref.body);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		ref.post = true;
		ref.get = false;
		readAll(req);
		write(resp, ref.body);
	}



	protected void write(HttpServletResponse resp, String text) throws IOException {
		if (text != null) {
			resp.setContentLength(text.getBytes(StringPool.UTF_8).length);
			resp.setContentType("text/html;charset=UTF-8");
			resp.getWriter().write(text);
			resp.flushBuffer();
		}
	}



	protected void readAll(HttpServletRequest req) throws IOException {
		ref.body = readRequestBody(req);
		ref.queryString = req.getQueryString();
		ref.header = copyHeaders(req);
	}

	protected String readRequestBody(HttpServletRequest request) throws IOException {
		BufferedReader buff = request.getReader();
		StringWriter out = new StringWriter();
		StreamUtil.copy(buff, out);
		return out.toString();
	}

	protected Map<String, String> copyHeaders(HttpServletRequest req) {
		Enumeration enumeration = req.getHeaderNames();
		Map<String, String> header = new HashMap<String, String>();

		while (enumeration.hasMoreElements()) {
			String name = enumeration.nextElement().toString();
			String value = req.getHeader(name);
			header.put(name, value);
		}

		return header;
	}

	protected Map<String, String> copyParams(HttpServletRequest req) {
		String charset = req.getParameter("enc");

		Enumeration enumeration = req.getParameterNames();
		Map<String, String> params = new HashMap<String, String>();

		while (enumeration.hasMoreElements()) {
			String name = enumeration.nextElement().toString();
			String value = req.getParameter(name);
			if (charset != null) {
				value = StringUtil.convertCharset(value, StringPool.ISO_8859_1, charset);
			}
			params.put(name, value);
		}

		return params;
	}

}
<code block>

























package jodd.http;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

public class Echo2Servlet extends EchoServlet {

	protected void readAll(HttpServletRequest req) throws IOException {
		ref.queryString = req.getQueryString();
		ref.header = copyHeaders(req);
		ref.params = copyParams(req);
	}

}
<code block>

























package jodd.http;

import jodd.util.StringPool;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.io.IOException;

public class EncodingTest {

	static TestServer testServer;

	@BeforeClass
	public static void startServer() throws Exception {
		testServer = new TomcatServer();
		testServer.start();
	}

	@AfterClass
	public static void stopServer() throws Exception {
		testServer.stop();
	}

	@Before
	public void setUp() {
		EchoServlet.testinit();
	}

	@Test
	public void testContentTypeHeader() {
		HttpRequest req = HttpRequest.get("localhost/hello");

		assertNull(req.contentType());

		req.contentType("text/plain;charset=UTF-8");

		assertEquals("text/plain", req.mediaType());
		assertEquals("UTF-8", req.charset());
		assertEquals("text/plain;charset=UTF-8", req.contentType());

		req.mediaType("text/html");
		assertEquals("text/html;charset=UTF-8", req.contentType());
		req.mediaType(null);
		assertEquals("text/html;charset=UTF-8", req.contentType());
		req.charset("ASCII");
		assertEquals("text/html;charset=ASCII", req.contentType());
		req.charset(null);
		assertEquals("text/html", req.contentType());

		req.contentType("text/plain;charset=UTF-8;boundary=123");
		assertEquals("text/plain", req.mediaType());
		assertEquals("UTF-8", req.charset());
		assertEquals("text/plain;charset=UTF-8;boundary=123", req.contentType());
	}

	@Test
	public void testRequestEncoding1() throws IOException {
		testRequestEncoding(1);
	}
	@Test
	public void testRequestEncoding2() throws IOException {
		testRequestEncoding(2);
	}
	@Test
	public void testRequestEncoding3() throws IOException {
		testRequestEncoding(3);
	}
	@Test
	public void testRequestEncoding4() throws IOException {
		testRequestEncoding(4);
	}
	private void testRequestEncoding(int i) throws IOException {
		HttpRequest request =
				(i == 1 || i == 2) ?
				HttpRequest.get("http://localhost:8173/echo?id=12"):
				HttpRequest.post("http://localhost:8173/echo?id=12");

		String utf8String = (i == 1 || i == 3) ? "Hello!" : "ÑÐµÐ»Ð»Ð¾!";
		byte[] utf8Bytes = utf8String.getBytes(StringPool.UTF_8);
		int utf8StringRealLen = utf8Bytes.length;

		request.bodyText(utf8String);

		String rawBody = request.body();
		assertEquals(utf8StringRealLen, rawBody.length());
		assertArrayEquals(utf8Bytes, request.bodyBytes());

		HttpResponse response = request.send();
		assertEquals(200, response.statusCode());



		if (i < 3) {
			assertTrue(EchoServlet.ref.get);
			assertFalse(EchoServlet.ref.post);
		} else {
			assertFalse(EchoServlet.ref.get);
			assertTrue(EchoServlet.ref.post);
		}

		assertEquals(String.valueOf(utf8StringRealLen), EchoServlet.ref.header.get("content-length"));
		assertEquals("text/html;charset=UTF-8", EchoServlet.ref.header.get("content-type"));
		assertEquals(utf8String, EchoServlet.ref.body);



		assertEquals(String.valueOf(utf8StringRealLen), response.contentLength());
		assertEquals("text/html;charset=UTF-8", response.contentType());
		assertEquals(utf8String, response.bodyText());
		assertEquals(new String(utf8Bytes, StringPool.ISO_8859_1), response.body());
	}

	@Test
	public void testFormParams1() {
		testFormParams(1);
	}
	@Test
	public void testFormParams2() {
		testFormParams(2);
	}
	@Test
	public void testFormParams3() {
		testFormParams(3);
	}
	private void testFormParams(int i) {
		String encoding = i == 1 ?  "UTF-8" : "CP1251";

		HttpRequest request = HttpRequest.post("http://localhost:8173/echo2");
		request.formEncoding(encoding);

		if (i == 3) {
			request.charset("UTF-8");
		}

		String value1 = "value";
		String value2 = "Ð²Ð°Ð»ÑÐµ";

		request.form("one", value1);
		request.form("two", value2);
		if (i != 3) {
			request.form("enc", encoding);
		}

		HttpResponse httpResponse = request.send();

		assertEquals("application/x-www-form-urlencoded", request.mediaType());
		if (i == 3) {
			assertEquals("UTF-8", request.charset());
			assertEquals("CP1251", request.formEncoding);
		} else {
			assertNull(request.charset());
		}

		assertFalse(EchoServlet.ref.get);
		assertTrue(EchoServlet.ref.post);

		assertEquals(i == 3 ? 2 : 3, EchoServlet.ref.params.size());
		assertEquals(value1, EchoServlet.ref.params.get("one"));
		assertEquals(value2, EchoServlet.ref.params.get("two"));
	}

	@Test
	public void testQueryParams1() throws IOException {
		testQueryParams(1);
	}
	@Test
	public void testQueryParams2() throws IOException {
		testQueryParams(2);
	}
	private void testQueryParams(int i) throws IOException {
		String encoding = i == 1 ?  "UTF-8" : "CP1251";

		HttpRequest request = HttpRequest.get("http://localhost:8173/echo2");
		request.queryEncoding(encoding);

		String value1 = "value";
		String value2 = "Ð²Ð°Ð»ÑÐµ";

		request.query("one", value1);
		request.query("two", value2);
		request.query("enc", encoding);

		HttpResponse httpResponse = request.send();

		assertTrue(EchoServlet.ref.get);
		assertFalse(EchoServlet.ref.post);

		assertEquals(3, EchoServlet.ref.params.size());
		assertEquals(value1, EchoServlet.ref.params.get("one"));
		assertEquals(value2, EchoServlet.ref.params.get("two"));
	}

}
<code block>

























package jodd.http;

import jodd.datetime.TimeUtil;
import jodd.http.up.ByteArrayUploadable;
import jodd.http.up.FileUploadable;
import jodd.http.up.Uploadable;
import jodd.io.FastCharArrayWriter;
import jodd.io.FileNameUtil;
import jodd.io.StreamUtil;
import jodd.upload.FileUpload;
import jodd.upload.MultipartStreamParser;
import jodd.util.MimeTypes;
import jodd.util.RandomString;
import jodd.util.StringPool;
import jodd.util.StringUtil;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collections;
import java.util.Map;

import static jodd.util.StringPool.CRLF;


@SuppressWarnings("unchecked")
public abstract class HttpBase<T> {

    public static final String HEADER_ACCEPT = "Accept";
	public static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
	public static final String HEADER_CONTENT_TYPE = "Content-Type";
	public static final String HEADER_CONTENT_LENGTH = "Content-Length";
	public static final String HEADER_CONTENT_ENCODING = "Content-Encoding";
	public static final String HEADER_HOST = "Host";
	public static final String HEADER_ETAG = "ETag";
	public static final String HEADER_CONNECTION = "Connection";
	public static final String HEADER_KEEP_ALIVE = "Keep-Alive";
	public static final String HEADER_CLOSE = "Close";
	public static final String HTTP_1_0 = "HTTP/1.0";
	public static final String HTTP_1_1 = "HTTP/1.1";

	protected String httpVersion = HTTP_1_1;
	protected HttpValuesMap<String> headers = HttpValuesMap.ofStrings();

	protected HttpValuesMap<Object> form;	
	protected String body;					




	public String httpVersion() {
		return httpVersion;
	}


	public T httpVersion(String httpVersion) {
		this.httpVersion = httpVersion;
		return (T) this;
	}




	public String header(String name) {
		String key = name.trim().toLowerCase();

		Object value = headers.getFirst(key);

		if (value == null) {
			return null;
		}
		return value.toString();
	}


	public String[] headers(String name) {
		String key = name.trim().toLowerCase();

		return headers.getStrings(key);
	}


	public void removeHeader(String name) {
		String key = name.trim().toLowerCase();

		headers.remove(key);
	}


	public T header(String name, String value) {
		return header(name, value, false);
	}


	public T header(String name, String value, boolean overwrite) {
		String key = name.trim().toLowerCase();

		value = value.trim();

		if (key.equalsIgnoreCase(HEADER_CONTENT_TYPE)) {
			mediaType = HttpUtil.extractMediaType(value);
			charset = HttpUtil.extractContentTypeCharset(value);
		}

		if (overwrite == true) {
			headers.set(key, value);
		} else {
			headers.add(key, value);
		}
		return (T) this;
	}


	protected void _header(String name, String value, boolean overwrite) {
		String key = name.trim().toLowerCase();
		value = value.trim();
		if (overwrite) {
			headers.set(key, value);
		} else {
			headers.add(key, value);
		}
	}


	public T header(String name, int value) {
		_header(name, String.valueOf(value), false);
		return (T) this;
	}


	public T header(String name, long millis) {
		_header(name, TimeUtil.formatHttpDate(millis), false);
		return (T) this;
	}


	public Map<String, String[]> headers() {
		return Collections.unmodifiableMap(headers);
	}



	protected String charset;


	public String charset() {
		return charset;
	}


	public T charset(String charset) {
		this.charset = null;
		contentType(null, charset);
		return (T) this;
	}


	protected String mediaType;


	public String mediaType() {
		return mediaType;
	}


	public T mediaType(String mediaType) {
		contentType(mediaType, null);
		return (T) this;
	}


	public String contentType() {
		return header(HEADER_CONTENT_TYPE);
	}


	public T contentType(String contentType) {
		header(HEADER_CONTENT_TYPE, contentType, true);
		return (T) this;
	}


	public T contentType(String mediaType, String charset) {
		if (mediaType == null) {
			mediaType = this.mediaType;
		} else {
			this.mediaType = mediaType;
		}

		if (charset == null) {
			charset = this.charset;
		} else {
			this.charset = charset;
		}

		String contentType = mediaType;
		if (charset != null) {
			contentType += ";charset=" + charset;
		}

		_header(HEADER_CONTENT_TYPE, contentType, true);
		return (T) this;
	}




	public T connectionKeepAlive(boolean keepAlive) {
		if (keepAlive) {
			header(HEADER_CONNECTION, HEADER_KEEP_ALIVE, true);
		} else {
			header(HEADER_CONNECTION, HEADER_CLOSE, true);
		}
		return (T) this;
	}


	public boolean isConnectionPersistent() {
		String connection = header(HEADER_CONNECTION);
		if (connection == null) {
			return !httpVersion.equalsIgnoreCase(HTTP_1_0);
		}

		return !connection.equalsIgnoreCase(HEADER_CLOSE);
	}




	public String contentLength() {
		return header(HEADER_CONTENT_LENGTH);
	}


	public T contentLength(int value) {
		_header(HEADER_CONTENT_LENGTH, String.valueOf(value), true);
		return (T) this;
	}


	public String contentEncoding() {
		return header(HEADER_CONTENT_ENCODING);
	}


	public String accept() {
		return header(HEADER_ACCEPT);
	}


	public T accept(String encodings) {
		header(HEADER_ACCEPT, encodings, true);
		return (T) this;
	}
	

	public String acceptEncoding() {
		return header(HEADER_ACCEPT_ENCODING);
	}


	public T acceptEncoding(String encodings) {
		header(HEADER_ACCEPT_ENCODING, encodings, true);
		return (T) this;
	}




	protected void initForm() {
		if (form == null) {
			form = HttpValuesMap.ofObjects();
		}
	}


	protected Object wrapFormValue(Object value) {
		if (value == null) {
			return null;
		}
		if (value instanceof CharSequence) {
			return value.toString();
		}
		if (value instanceof Number) {
			return value.toString();
		}
		if (value instanceof Boolean) {
			return value.toString();
		}
		if (value instanceof File) {
			return new FileUploadable((File) value);
		}
		if (value instanceof byte[]) {
			return new ByteArrayUploadable((byte[]) value, null);
		}
		if (value instanceof Uploadable) {
			return value;
		}

		throw new HttpException("Unsupported value type: " + value.getClass().getName());
	}


	public T form(String name, Object value) {
		initForm();

		value = wrapFormValue(value);
		form.add(name, value);

		return (T) this;
	}


	public T form(String name, Object value, boolean overwrite) {
		initForm();

		value = wrapFormValue(value);

		if (overwrite) {
			form.set(name, value);
		} else {
			form.add(name, value);
		}

		return (T) this;
	}


	public T form(String name, Object value, Object... parameters) {
		initForm();

		form(name, value);

		for (int i = 0; i < parameters.length; i += 2) {
			name = parameters[i].toString();

			form(name, parameters[i + 1]);
		}
		return (T) this;
	}


	public T form(Map<String, Object> formMap) {
		initForm();

		for (Map.Entry<String, Object> entry : formMap.entrySet()) {
			form(entry.getKey(), entry.getValue());
		}
		return (T) this;
	}


	public Map<String, Object[]> form() {
		return form;
	}



	protected String formEncoding = JoddHttp.defaultFormEncoding;


	public T formEncoding(String encoding) {
		this.formEncoding = encoding;
		return (T) this;
	}




	public String body() {
		return body;
	}


	public byte[] bodyBytes() {
		if (body == null) {
			return null;
		}
		try {
			return body.getBytes(StringPool.ISO_8859_1);
		} catch (UnsupportedEncodingException ignore) {
			return null;
		}
	}


	public String bodyText() {
		if (body == null) {
			return StringPool.EMPTY;
		}
		if (charset != null) {
			return StringUtil.convertCharset(body, StringPool.ISO_8859_1, charset);
		}
		return body();
	}


	public T body(String body) {
		this.body = body;
		this.form = null;
		contentLength(body.length());
		return (T) this;
	}


	public T bodyText(String body, String mediaType, String charset) {
		body = StringUtil.convertCharset(body, charset, StringPool.ISO_8859_1);
		contentType(mediaType, charset);
		body(body);
		return (T) this;
	}


	public T bodyText(String body, String mediaType) {
		return bodyText(body, mediaType, JoddHttp.defaultBodyEncoding);
	}

	public T bodyText(String body) {
		return bodyText(body, JoddHttp.defaultBodyMediaType, JoddHttp.defaultBodyEncoding);
	}


	public T body(byte[] content, String contentType) {
		String body = null;
		try {
			body = new String(content, StringPool.ISO_8859_1);
		} catch (UnsupportedEncodingException ignore) {
		}
		contentType(contentType);
		return body(body);
	}



	protected boolean multipart = false;


	protected boolean isFormMultipart() {
		if (multipart) {
			return true;
		}
		for (Object[] values : form.values()) {
			if (values == null) {
				continue;
			}

			for (Object value : values) {
				if (value instanceof Uploadable) {
					return true;
				}
			}
		}
	    return false;
	}


	protected Buffer formBuffer() {
		Buffer buffer = new Buffer();
		if (form == null || form.isEmpty()) {
			return buffer;
		}

		if (!isFormMultipart()) {
			String formEncoding = resolveFormEncoding();


			String formQueryString = HttpUtil.buildQuery(form, formEncoding);

			contentType("application/x-www-form-urlencoded", null);
			contentLength(formQueryString.length());

			buffer.append(formQueryString);
			return buffer;
		}

		String boundary = StringUtil.repeat('-', 10) + RandomString.getInstance().randomAlphaNumeric(10);

		for (Map.Entry<String, Object[]> entry : form.entrySet()) {

			buffer.append("--");
			buffer.append(boundary);
			buffer.append(CRLF);

			String name = entry.getKey();
			Object[] values = entry.getValue();

			for (Object value : values) {
				if (value instanceof String) {
					String string = (String) value;
					buffer.append("Content-Disposition: form-data; name=\"").append(name).append('"').append(CRLF);
					buffer.append(CRLF);

					String formEncoding = resolveFormEncoding();

					String utf8Stirng = StringUtil.convertCharset(
						string, formEncoding, StringPool.ISO_8859_1);

					buffer.append(utf8Stirng);
				}
				else if (value instanceof Uploadable) {
					Uploadable uploadable = (Uploadable) value;

					String fileName = uploadable.getFileName();
					if (fileName == null) {
						fileName = name;
					}

					buffer.append("Content-Disposition: form-data; name=\"").append(name);
					buffer.append("\"; filename=\"").append(fileName).append('"').append(CRLF);

					String mimeType = uploadable.getMimeType();
					if (mimeType == null) {
						mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(fileName));
					}
					buffer.append(HEADER_CONTENT_TYPE).append(": ").append(mimeType).append(CRLF);

					buffer.append("Content-Transfer-Encoding: binary").append(CRLF);
					buffer.append(CRLF);

					buffer.append(uploadable);





				} else {

					throw new HttpException("Unsupported type");
				}
				buffer.append(CRLF);
			}
		}

		buffer.append("--").append(boundary).append("--");
		buffer.append(CRLF);


		contentType("multipart/form-data; boundary=" + boundary);
		contentLength(buffer.size());

		return buffer;
	}


	protected String resolveFormEncoding() {

		String formEncoding = charset;

		if (formEncoding == null) {
			formEncoding = this.formEncoding;
		}
		return formEncoding;
	}




	public String toString() {
		return toString(true);
	}


	public String toString(boolean fullResponse) {
		Buffer buffer = buffer(fullResponse);

		StringWriter stringWriter = new StringWriter();

		try {
			buffer.writeTo(stringWriter);
		}
		catch (IOException ioex) {
			throw new HttpException(ioex);
		}

		return stringWriter.toString();
	}


	public byte[] toByteArray() {
		Buffer buffer = buffer(true);

		ByteArrayOutputStream baos = new ByteArrayOutputStream(buffer.size());

		try {
			buffer.writeTo(baos);
		}
		catch (IOException ioex) {
			throw new HttpException(ioex);
		}

		return baos.toByteArray();
	}


	protected abstract Buffer buffer(boolean full);



	protected HttpProgressListener httpProgressListener;


	public void sendTo(OutputStream out) throws IOException {
		Buffer buffer = buffer(true);

		if (httpProgressListener == null) {
			buffer.writeTo(out);
		}
		else {
			buffer.writeTo(out, httpProgressListener);
		}

		out.flush();
	}




	protected void readHeaders(BufferedReader reader) {
		while (true) {
			String line;
			try {
				line = reader.readLine();
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}

			if (StringUtil.isBlank(line)) {
				break;
			}

			int ndx = line.indexOf(':');
			if (ndx != -1) {
				header(line.substring(0, ndx), line.substring(ndx + 1));
			} else {
				throw new HttpException("Invalid header: " + line);
			}
		}
	}


	protected void readBody(BufferedReader reader) {
		String bodyString = null;


		boolean isChunked = false;

		String transferEncoding = header("Transfer-Encoding");
		if (transferEncoding != null && transferEncoding.equalsIgnoreCase("chunked")) {
			isChunked = true;
		}



		String contentLen = contentLength();
		int contentLenValue = -1;

		if (contentLen != null && !isChunked) {
			contentLenValue = Integer.parseInt(contentLen);

			if (contentLenValue > 0) {
				FastCharArrayWriter fastCharArrayWriter = new FastCharArrayWriter(contentLenValue);

				try {
					StreamUtil.copy(reader, fastCharArrayWriter, contentLenValue);
				} catch (IOException ioex) {
					throw new HttpException(ioex);
				}

				bodyString = fastCharArrayWriter.toString();
			}
		}


		if (isChunked) {

			FastCharArrayWriter fastCharArrayWriter = new FastCharArrayWriter();
			try {
				while (true) {
					String line = reader.readLine();

					int len = Integer.parseInt(line, 16);

					if (len > 0) {
						StreamUtil.copy(reader, fastCharArrayWriter, len);
						reader.readLine();
					} else {

						readHeaders(reader);
						break;
					}
				}
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}

			bodyString = fastCharArrayWriter.toString();
		}


		if (bodyString == null && contentLenValue != 0) {

			FastCharArrayWriter fastCharArrayWriter = new FastCharArrayWriter();
			try {
				StreamUtil.copy(reader, fastCharArrayWriter);
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}
			bodyString = fastCharArrayWriter.toString();
		}


		String charset = this.charset;
		if (charset == null) {
			charset = StringPool.ISO_8859_1;
		}
		body = bodyString;

		String mediaType = mediaType();

		if (mediaType == null) {
			mediaType = StringPool.EMPTY;
		} else {
			mediaType = mediaType.toLowerCase();
		}

		if (mediaType.equals("application/x-www-form-urlencoded")) {
			form = HttpUtil.parseQuery(bodyString, true);
			return;
		}

		if (mediaType.equals("multipart/form-data")) {
			form = HttpValuesMap.ofObjects();

			MultipartStreamParser multipartParser = new MultipartStreamParser();

			try {
				byte[] bodyBytes = bodyString.getBytes(StringPool.ISO_8859_1);
				ByteArrayInputStream bin = new ByteArrayInputStream(bodyBytes);
				multipartParser.parseRequestStream(bin, charset);
			} catch (IOException ioex) {
				throw new HttpException(ioex);
			}


			for (String paramName : multipartParser.getParameterNames()) {
				String[] values = multipartParser.getParameterValues(paramName);
				if (values.length == 1) {
					form.add(paramName, values[0]);
				} else {
					form.put(paramName, values);
				}
			}


			for (String paramName : multipartParser.getFileParameterNames()) {
				FileUpload[] values = multipartParser.getFiles(paramName);
				if (values.length == 1) {
					form.add(paramName, values[0]);
				} else {
					form.put(paramName, values);
				}
			}

			return;
		}



		form = null;
	}

}
<code block>

























package jodd.http;

import jodd.io.StreamUtil;
import jodd.util.StringPool;
import jodd.util.StringUtil;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

public class EchoServlet extends HttpServlet {

	public static Data ref;

	public static void testinit() {
		ref = new Data();
	}

	public static class Data {
		public boolean get;
		public boolean post;
		public String queryString;
		public String body;
		public Map<String, String> header;
		public Map<String, String> params;
		public Map<String, String> parts;
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		ref.get = true;
		ref.post = false;
		readAll(req);
		write(resp, ref.body);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		ref.post = true;
		ref.get = false;
		readAll(req);
		write(resp, ref.body);
	}



	protected void write(HttpServletResponse resp, String text) throws IOException {
		if (text != null) {
			resp.setContentLength(text.getBytes(StringPool.UTF_8).length);
			resp.setContentType("text/html;charset=UTF-8");
			resp.getWriter().write(text);
			resp.flushBuffer();
		}
	}



	protected void readAll(HttpServletRequest req) throws IOException {
		ref.body = readRequestBody(req);
		ref.queryString = req.getQueryString();
		ref.header = copyHeaders(req);
	}

	protected String readRequestBody(HttpServletRequest request) throws IOException {
		BufferedReader buff = request.getReader();
		StringWriter out = new StringWriter();
		StreamUtil.copy(buff, out);
		return out.toString();
	}

	protected Map<String, String> copyHeaders(HttpServletRequest req) {
		Enumeration enumeration = req.getHeaderNames();
		Map<String, String> header = new HashMap<String, String>();

		while (enumeration.hasMoreElements()) {
			String name = enumeration.nextElement().toString();
			String value = req.getHeader(name);
			header.put(name, value);
		}

		return header;
	}

	protected Map<String, String> copyParams(HttpServletRequest req) {
		String charset = req.getParameter("enc");

		Enumeration enumeration = req.getParameterNames();
		Map<String, String> params = new HashMap<String, String>();

		while (enumeration.hasMoreElements()) {
			String name = enumeration.nextElement().toString();
			String value = req.getParameter(name);
			if (charset != null) {
				value = StringUtil.convertCharset(value, StringPool.ISO_8859_1, charset);
			}
			params.put(name, value);
		}

		return params;
	}

	protected Map<String, String> copyParts(HttpServletRequest req) {
     Map<String, String> parts = new HashMap<String, String>();

     String enc = "UTF-8";

     try {
         Collection<Part> prs = req.getParts();

         for (Part p : prs) {
             parts.put(p.getName(), new String(StreamUtil.readBytes(p.getInputStream()), enc));
         }
     } catch (IOException e) {
         e.printStackTrace();
     } catch (ServletException e) {
         e.printStackTrace();
     }

     return parts;
 }


}
<code block>

























package jodd.http;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

@MultipartConfig
public class Echo2Servlet extends EchoServlet {

	protected void readAll(HttpServletRequest req) throws IOException {
		ref.queryString = req.getQueryString();
		ref.header = copyHeaders(req);
		ref.params = copyParams(req);
		ref.parts = copyParts(req);
	}

}
<code block>

























package jodd.http;

import jodd.util.StringPool;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

public class EncodingTest {

	static TestServer testServer;

	@BeforeClass
	public static void startServer() throws Exception {
		testServer = new TomcatServer();
		testServer.start();
	}

	@AfterClass
	public static void stopServer() throws Exception {
		testServer.stop();
	}

	@Before
	public void setUp() {
		EchoServlet.testinit();
	}

	@Test
	public void testContentTypeHeader() {
		HttpRequest req = HttpRequest.get("localhost/hello");

		assertNull(req.contentType());

		req.contentType("text/plain;charset=UTF-8");

		assertEquals("text/plain", req.mediaType());
		assertEquals("UTF-8", req.charset());
		assertEquals("text/plain;charset=UTF-8", req.contentType());

		req.mediaType("text/html");
		assertEquals("text/html;charset=UTF-8", req.contentType());
		req.mediaType(null);
		assertEquals("text/html;charset=UTF-8", req.contentType());
		req.charset("ASCII");
		assertEquals("text/html;charset=ASCII", req.contentType());
		req.charset(null);
		assertEquals("text/html", req.contentType());

		req.contentType("text/plain;charset=UTF-8;boundary=123");
		assertEquals("text/plain", req.mediaType());
		assertEquals("UTF-8", req.charset());
		assertEquals("text/plain;charset=UTF-8;boundary=123", req.contentType());
	}

	@Test
	public void testRequestEncoding1() throws IOException {
		testRequestEncoding(1);
	}
	@Test
	public void testRequestEncoding2() throws IOException {
		testRequestEncoding(2);
	}
	@Test
	public void testRequestEncoding3() throws IOException {
		testRequestEncoding(3);
	}
	@Test
	public void testRequestEncoding4() throws IOException {
		testRequestEncoding(4);
	}
	private void testRequestEncoding(int i) throws IOException {
		HttpRequest request =
				(i == 1 || i == 2) ?
				HttpRequest.get("http://localhost:8173/echo?id=12"):
				HttpRequest.post("http://localhost:8173/echo?id=12");

		String utf8String = (i == 1 || i == 3) ? "Hello!" : "ÑÐµÐ»Ð»Ð¾!";
		byte[] utf8Bytes = utf8String.getBytes(StringPool.UTF_8);
		int utf8StringRealLen = utf8Bytes.length;

		request.bodyText(utf8String);

		String rawBody = request.body();
		assertEquals(utf8StringRealLen, rawBody.length());
		assertArrayEquals(utf8Bytes, request.bodyBytes());

		HttpResponse response = request.send();
		assertEquals(200, response.statusCode());



		if (i < 3) {
			assertTrue(EchoServlet.ref.get);
			assertFalse(EchoServlet.ref.post);
		} else {
			assertFalse(EchoServlet.ref.get);
			assertTrue(EchoServlet.ref.post);
		}

		assertEquals(String.valueOf(utf8StringRealLen), EchoServlet.ref.header.get("content-length"));
		assertEquals("text/html;charset=UTF-8", EchoServlet.ref.header.get("content-type"));
		assertEquals(utf8String, EchoServlet.ref.body);



		assertEquals(String.valueOf(utf8StringRealLen), response.contentLength());
		assertEquals("text/html;charset=UTF-8", response.contentType());
		assertEquals(utf8String, response.bodyText());
		assertEquals(new String(utf8Bytes, StringPool.ISO_8859_1), response.body());
	}

	@Test
	public void testFormParams1() {
		testFormParams(1);
	}
	@Test
	public void testFormParams2() {
		testFormParams(2);
	}
	@Test
	public void testFormParams3() {
		testFormParams(3);
	}
	private void testFormParams(int i) {
		String encoding = i == 1 ?  "UTF-8" : "CP1251";

		HttpRequest request = HttpRequest.post("http://localhost:8173/echo2");
		request.formEncoding(encoding);

		if (i == 3) {
			request.charset("UTF-8");
		}

		String value1 = "value";
		String value2 = "Ð²Ð°Ð»ÑÐµ";

		request.form("one", value1);
		request.form("two", value2);
		if (i != 3) {
			request.form("enc", encoding);
		}

		HttpResponse httpResponse = request.send();

		assertEquals("application/x-www-form-urlencoded", request.mediaType());
		if (i == 3) {
			assertEquals("UTF-8", request.charset());
			assertEquals("CP1251", request.formEncoding);
		} else {
			assertNull(request.charset());
		}

		assertFalse(EchoServlet.ref.get);
		assertTrue(EchoServlet.ref.post);

		assertEquals(i == 3 ? 2 : 3, EchoServlet.ref.params.size());
		assertEquals(value1, EchoServlet.ref.params.get("one"));
		assertEquals(value2, EchoServlet.ref.params.get("two"));
	}

	@Test
	public void testQueryParams1() throws IOException {
		testQueryParams(1);
	}
	@Test
	public void testQueryParams2() throws IOException {
		testQueryParams(2);
	}
	private void testQueryParams(int i) throws IOException {
		String encoding = i == 1 ?  "UTF-8" : "CP1251";

		HttpRequest request = HttpRequest.get("http://localhost:8173/echo2");
		request.queryEncoding(encoding);

		String value1 = "value";
		String value2 = "Ð²Ð°Ð»ÑÐµ";

		request.query("one", value1);
		request.query("two", value2);
		request.query("enc", encoding);

		HttpResponse httpResponse = request.send();

		assertTrue(EchoServlet.ref.get);
		assertFalse(EchoServlet.ref.post);

		assertEquals(3, EchoServlet.ref.params.size());
		assertEquals(value1, EchoServlet.ref.params.get("one"));
		assertEquals(value2, EchoServlet.ref.params.get("two"));
	}

	@Test
	public void testMultipart() {
		HttpRequest request = HttpRequest.post("http://localhost:8173/echo2");
		request
			.formEncoding("UTF-8")		
			.multipart(true);

		String value1 = "value";
		String value2 = "Ð²Ð°Ð»ÑÐµ";

		request.form("one", value1);
		request.form("two", value2);

		System.out.println(request);

		HttpResponse httpResponse = request.send();

		assertEquals("multipart/form-data", request.mediaType());

		assertFalse(EchoServlet.ref.get);
		assertTrue(EchoServlet.ref.post);

		assertEquals(value1, EchoServlet.ref.parts.get("one"));
		assertEquals(value2, EchoServlet.ref.parts.get("two"));
	}

}