
package org.crsh.auth;

import org.apache.sshd.common.keyprovider.AbstractKeyPairProvider;
import org.apache.sshd.common.util.SecurityUtils;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.crsh.ssh.util.KeyPairUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.security.KeyPair;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;


class FilePublicKeyProvider extends AbstractKeyPairProvider {


  private static final Logger LOG = LoggerFactory.getLogger(FilePublicKeyProvider.class);


  private String[] files;

  FilePublicKeyProvider(String[] files) {
    this.files = files;
  }

  public Iterable<KeyPair> loadKeys() {
    if (!SecurityUtils.isBouncyCastleRegistered()) {
      throw new IllegalStateException("BouncyCastle must be registered as a JCE provider");
    }
    List<KeyPair> keys = new ArrayList<KeyPair>();
    for (String file : files) {
      try {
          Object o = KeyPairUtils.readKey(new InputStreamReader(new FileInputStream(file)));
          if (o instanceof KeyPair) {
            keys.add(new KeyPair(((KeyPair)o).getPublic(), null));
          } else if (o instanceof PublicKey) {
            keys.add(new KeyPair((PublicKey)o, null));
          } else if (o instanceof PEMKeyPair) {
            PEMKeyPair keyPair = (PEMKeyPair)o;
            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
            keys.add(new KeyPair(converter.getPublicKey(keyPair.getPublicKeyInfo()), null));
          }
      }
      catch (Exception e) {
        LOG.info("Unable to read key {}: {}", file, e);
      }
    }
    return keys;
  }
}

<code block>

package org.crsh.auth;

import org.apache.sshd.common.keyprovider.AbstractKeyPairProvider;
import org.apache.sshd.common.util.SecurityUtils;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.openssl.PEMException;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.crsh.ssh.util.KeyPairUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.security.KeyPair;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;


class FilePublicKeyProvider extends AbstractKeyPairProvider {


  private static final Logger LOG = LoggerFactory.getLogger(FilePublicKeyProvider.class);


  private String[] files;

  FilePublicKeyProvider(String[] files) {
    this.files = files;
  }

  public Iterable<KeyPair> loadKeys() {
    if (!SecurityUtils.isBouncyCastleRegistered()) {
      throw new IllegalStateException("BouncyCastle must be registered as a JCE provider");
    }
    List<KeyPair> keys = new ArrayList<KeyPair>();
    for (String file : files) {
      try {
          Object o = KeyPairUtils.readKey(new InputStreamReader(new FileInputStream(file)));
          if (o instanceof KeyPair) {
            keys.add(new KeyPair(((KeyPair)o).getPublic(), null));
          } else if (o instanceof PublicKey) {
            keys.add(new KeyPair((PublicKey)o, null));
          } else if (o instanceof PEMKeyPair) {
            PEMKeyPair keyPair = (PEMKeyPair)o;
            keys.add(convertPemKeyPair(keyPair));
          } else if (o instanceof SubjectPublicKeyInfo) {
            PEMKeyPair keyPair = new PEMKeyPair((SubjectPublicKeyInfo) o, null);
            keys.add(convertPemKeyPair(keyPair));
          } else {
            throw new UnsupportedOperationException(String.format("Key type %s not supported.", o.getClass().getName()));
          }
      }
      catch (Exception e) {
        LOG.info("Unable to read key {}: {}", file, e);
      }
    }
    return keys;
  }

  private KeyPair convertPemKeyPair(PEMKeyPair pemKeyPair) throws PEMException {
    JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
    return new KeyPair(converter.getPublicKey(pemKeyPair.getPublicKeyInfo()), null);
  }

}

<code block>
package org.crsh.auth;

import static org.junit.Assert.assertTrue;

import java.io.File;

import org.junit.Test;

public class FilePublicKeyProviderTest {

  @Test
  public void test() {
    String pubKeyFile = Thread.currentThread().getContextClassLoader().getResource("test_authorized_key.pem").getFile();
    assertTrue(new File(pubKeyFile).exists());
    FilePublicKeyProvider SUT = new FilePublicKeyProvider(new String[]{pubKeyFile});
    assertTrue(SUT.loadKeys().iterator().hasNext());
  }

}
