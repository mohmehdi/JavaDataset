package com.bumptech.glide.request.target;

import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.support.annotation.Nullable;
import android.widget.ImageView;

import com.bumptech.glide.request.transition.Transition;


public abstract class ImageViewTarget<Z> extends ViewTarget<ImageView, Z>
    implements Transition.ViewAdapter {

  @Nullable
  private Animatable animatable;

  public ImageViewTarget(ImageView view) {
    super(view);
  }


  @Override
  @Nullable
  public Drawable getCurrentDrawable() {
    return view.getDrawable();
  }


  @Override
  public void setDrawable(Drawable drawable) {
    view.setImageDrawable(drawable);
  }


  @Override
  public void onLoadStarted(@Nullable Drawable placeholder) {
    setResource(null);
    setDrawable(placeholder);
  }


  @Override
  public void onLoadFailed(@Nullable Drawable errorDrawable) {
    setResource(null);
    setDrawable(errorDrawable);
  }


  @Override
  public void onLoadCleared(@Nullable Drawable placeholder) {
    setResource(null);
    setDrawable(placeholder);
  }

  @Override
  public void onResourceReady(Z resource, @Nullable Transition<? super Z> transition) {
    if (transition == null || !transition.transition(resource, this)) {
      setResource(resource);
    }

    if (resource instanceof Animatable) {
      animatable = (Animatable) resource;
      animatable.start();
    }
  }

  @Override
  public void onStart() {
    if (animatable != null) {
      animatable.start();
    }
  }

  @Override
  public void onStop() {
    if (animatable != null) {
      animatable.stop();
    }
  }

  protected abstract void setResource(@Nullable Z resource);
}


<code block>
package com.bumptech.glide.request.target;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Point;
import android.os.Build;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver;
import android.view.WindowManager;

import com.bumptech.glide.request.Request;
import com.bumptech.glide.util.Preconditions;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;


public abstract class ViewTarget<T extends View, Z> extends BaseTarget<Z> {
  private static final String TAG = "ViewTarget";
  private static boolean isTagUsedAtLeastOnce = false;
  @Nullable private static Integer tagId = null;

  protected final T view;
  private final SizeDeterminer sizeDeterminer;

  public ViewTarget(T view) {
    this.view = Preconditions.checkNotNull(view);
    sizeDeterminer = new SizeDeterminer(view);
  }


  public T getView() {
    return view;
  }


  @Override
  public void getSize(SizeReadyCallback cb) {
    sizeDeterminer.getSize(cb);
  }


  @Override
  public void setRequest(@Nullable Request request) {
    setTag(request);
  }


  @Override
  @Nullable
  public Request getRequest() {
    Object tag = getTag();
    Request request = null;
    if (tag != null) {
      if (tag instanceof Request) {
        request = (Request) tag;
      } else {
        throw new IllegalArgumentException(
            "You must not call setTag() on a view Glide is targeting");
      }
    }
    return request;
  }

  @Override
  public String toString() {
    return "Target for: " + view;
  }

  private void setTag(@Nullable Object tag) {
    if (tagId == null) {
      isTagUsedAtLeastOnce = true;
      view.setTag(tag);
    } else {
      view.setTag(tagId, tag);
    }
  }

  @Nullable
  private Object getTag() {
    if (tagId == null) {
      return view.getTag();
    } else {
      return view.getTag(tagId);
    }
  }


  public static void setTagId(int tagId) {
      if (ViewTarget.tagId != null || isTagUsedAtLeastOnce) {
          throw new IllegalArgumentException("You cannot set the tag id more than once or change"
              + " the tag id after the first request has been made");
      }
      ViewTarget.tagId = tagId;
  }

  private static class SizeDeterminer {

    private static final int PENDING_SIZE = 0;
    private final View view;
    private final List<SizeReadyCallback> cbs = new ArrayList<>();

    @Nullable private SizeDeterminerLayoutListener layoutListener;
    @Nullable private Point displayDimens;

    public SizeDeterminer(View view) {
      this.view = view;
    }

    private void notifyCbs(int width, int height) {
      for (SizeReadyCallback cb : cbs) {
        cb.onSizeReady(width, height);
      }
      cbs.clear();
    }

    private void checkCurrentDimens() {
      if (cbs.isEmpty()) {
        return;
      }

      int currentWidth = getViewWidthOrParam();
      int currentHeight = getViewHeightOrParam();
      if (!isSizeValid(currentWidth) || !isSizeValid(currentHeight)) {
        return;
      }

      notifyCbs(currentWidth, currentHeight);






      ViewTreeObserver observer = view.getViewTreeObserver();
      if (observer.isAlive()) {
        observer.removeOnPreDrawListener(layoutListener);
      }
      layoutListener = null;
    }

    public void getSize(SizeReadyCallback cb) {
      int currentWidth = getViewWidthOrParam();
      int currentHeight = getViewHeightOrParam();
      if (isSizeValid(currentWidth) && isSizeValid(currentHeight)) {
        cb.onSizeReady(currentWidth, currentHeight);
      } else {



        if (!cbs.contains(cb)) {
          cbs.add(cb);
        }
        if (layoutListener == null) {
          final ViewTreeObserver observer = view.getViewTreeObserver();
          layoutListener = new SizeDeterminerLayoutListener(this);
          observer.addOnPreDrawListener(layoutListener);
        }
      }
    }

    private int getViewHeightOrParam() {
      final LayoutParams layoutParams = view.getLayoutParams();
      if (isSizeValid(view.getHeight())) {
        return view.getHeight();
      } else if (layoutParams != null) {
        return getSizeForParam(layoutParams.height, true );
      } else {
        return PENDING_SIZE;
      }
    }

    private int getViewWidthOrParam() {
      final LayoutParams layoutParams = view.getLayoutParams();
      if (isSizeValid(view.getWidth())) {
        return view.getWidth();
      } else if (layoutParams != null) {
        return getSizeForParam(layoutParams.width, false );
      } else {
        return PENDING_SIZE;
      }
    }

    private int getSizeForParam(int param, boolean isHeight) {
      if (param == LayoutParams.WRAP_CONTENT) {
        Point displayDimens = getDisplayDimens();
        return isHeight ? displayDimens.y : displayDimens.x;
      } else {
        return param;
      }
    }

    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    @SuppressWarnings("deprecation")
    private Point getDisplayDimens() {
      if (displayDimens != null) {
        return displayDimens;
      }
      WindowManager windowManager =
          (WindowManager) view.getContext().getSystemService(Context.WINDOW_SERVICE);
      Display display = windowManager.getDefaultDisplay();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
        displayDimens = new Point();
        display.getSize(displayDimens);
      } else {
        displayDimens = new Point(display.getWidth(), display.getHeight());
      }
      return displayDimens;
    }

    private boolean isSizeValid(int size) {
      return size > 0 || size == LayoutParams.WRAP_CONTENT;
    }

    private static class SizeDeterminerLayoutListener implements ViewTreeObserver
        .OnPreDrawListener {
      private final WeakReference<SizeDeterminer> sizeDeterminerRef;

      public SizeDeterminerLayoutListener(SizeDeterminer sizeDeterminer) {
        sizeDeterminerRef = new WeakReference<>(sizeDeterminer);
      }

      @Override
      public boolean onPreDraw() {
        if (Log.isLoggable(TAG, Log.VERBOSE)) {
          Log.v(TAG, "OnGlobalLayoutListener called listener=" + this);
        }
        SizeDeterminer sizeDeterminer = sizeDeterminerRef.get();
        if (sizeDeterminer != null) {
          sizeDeterminer.checkCurrentDimens();
        }
        return true;
      }
    }
  }
}

<code block>
package com.bumptech.glide.request.target;

import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.support.annotation.Nullable;
import android.widget.ImageView;

import com.bumptech.glide.request.transition.Transition;


public abstract class ImageViewTarget<Z> extends ViewTarget<ImageView, Z>
    implements Transition.ViewAdapter {

  @Nullable
  private Animatable animatable;

  public ImageViewTarget(ImageView view) {
    super(view);
  }


  @Override
  @Nullable
  public Drawable getCurrentDrawable() {
    return view.getDrawable();
  }


  @Override
  public void setDrawable(Drawable drawable) {
    view.setImageDrawable(drawable);
  }


  @Override
  public void onLoadStarted(@Nullable Drawable placeholder) {
    super.onLoadStarted(placeholder);
    setResource(null);
    setDrawable(placeholder);
  }


  @Override
  public void onLoadFailed(@Nullable Drawable errorDrawable) {
    super.onLoadFailed(errorDrawable);
    setResource(null);
    setDrawable(errorDrawable);
  }


  @Override
  public void onLoadCleared(@Nullable Drawable placeholder) {
    super.onLoadCleared(placeholder);
    setResource(null);
    setDrawable(placeholder);
  }

  @Override
  public void onResourceReady(Z resource, @Nullable Transition<? super Z> transition) {
    if (transition == null || !transition.transition(resource, this)) {
      setResource(resource);
    }

    if (resource instanceof Animatable) {
      animatable = (Animatable) resource;
      animatable.start();
    }
  }

  @Override
  public void onStart() {
    if (animatable != null) {
      animatable.start();
    }
  }

  @Override
  public void onStop() {
    if (animatable != null) {
      animatable.stop();
    }
  }

  protected abstract void setResource(@Nullable Z resource);
}


<code block>
package com.bumptech.glide.request.target;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver;
import android.view.WindowManager;

import com.bumptech.glide.request.Request;
import com.bumptech.glide.util.Preconditions;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;


public abstract class ViewTarget<T extends View, Z> extends BaseTarget<Z> {
  private static final String TAG = "ViewTarget";
  private static boolean isTagUsedAtLeastOnce = false;
  @Nullable private static Integer tagId = null;

  protected final T view;
  private final SizeDeterminer sizeDeterminer;

  public ViewTarget(T view) {
    this.view = Preconditions.checkNotNull(view);
    sizeDeterminer = new SizeDeterminer(view);
  }


  public T getView() {
    return view;
  }


  @Override
  public void getSize(SizeReadyCallback cb) {
    sizeDeterminer.getSize(cb);
  }

  @Override
  public void onLoadCleared(Drawable placeholder) {
    super.onLoadCleared(placeholder);
    sizeDeterminer.clearCallbacksAndListener();
  }


  @Override
  public void setRequest(@Nullable Request request) {
    setTag(request);
  }


  @Override
  @Nullable
  public Request getRequest() {
    Object tag = getTag();
    Request request = null;
    if (tag != null) {
      if (tag instanceof Request) {
        request = (Request) tag;
      } else {
        throw new IllegalArgumentException(
            "You must not call setTag() on a view Glide is targeting");
      }
    }
    return request;
  }

  @Override
  public String toString() {
    return "Target for: " + view;
  }

  private void setTag(@Nullable Object tag) {
    if (tagId == null) {
      isTagUsedAtLeastOnce = true;
      view.setTag(tag);
    } else {
      view.setTag(tagId, tag);
    }
  }

  @Nullable
  private Object getTag() {
    if (tagId == null) {
      return view.getTag();
    } else {
      return view.getTag(tagId);
    }
  }


  public static void setTagId(int tagId) {
      if (ViewTarget.tagId != null || isTagUsedAtLeastOnce) {
          throw new IllegalArgumentException("You cannot set the tag id more than once or change"
              + " the tag id after the first request has been made");
      }
      ViewTarget.tagId = tagId;
  }

  private static class SizeDeterminer {

    private static final int PENDING_SIZE = 0;
    private final View view;
    private final List<SizeReadyCallback> cbs = new ArrayList<>();

    @Nullable private SizeDeterminerLayoutListener layoutListener;
    @Nullable private Point displayDimens;

    public SizeDeterminer(View view) {
      this.view = view;
    }

    private void notifyCbs(int width, int height) {
      for (SizeReadyCallback cb : cbs) {
        cb.onSizeReady(width, height);
      }
    }

    private void checkCurrentDimens() {
      if (cbs.isEmpty()) {
        return;
      }

      int currentWidth = getViewWidthOrParam();
      int currentHeight = getViewHeightOrParam();
      if (!isSizeValid(currentWidth) || !isSizeValid(currentHeight)) {
        return;
      }

      notifyCbs(currentWidth, currentHeight);
      clearCallbacksAndListener();
    }

    void getSize(SizeReadyCallback cb) {
      int currentWidth = getViewWidthOrParam();
      int currentHeight = getViewHeightOrParam();
      if (isSizeValid(currentWidth) && isSizeValid(currentHeight)) {
        cb.onSizeReady(currentWidth, currentHeight);
      } else {



        if (!cbs.contains(cb)) {
          cbs.add(cb);
        }
        if (layoutListener == null) {
          final ViewTreeObserver observer = view.getViewTreeObserver();
          layoutListener = new SizeDeterminerLayoutListener(this);
          observer.addOnPreDrawListener(layoutListener);
        }
      }
    }

    void clearCallbacksAndListener() {






      ViewTreeObserver observer = view.getViewTreeObserver();
      if (observer.isAlive()) {
        observer.removeOnPreDrawListener(layoutListener);
      }
      layoutListener = null;
      cbs.clear();
    }

    private int getViewHeightOrParam() {
      final LayoutParams layoutParams = view.getLayoutParams();
      if (isSizeValid(view.getHeight())) {
        return view.getHeight();
      } else if (layoutParams != null) {
        return getSizeForParam(layoutParams.height, true );
      } else {
        return PENDING_SIZE;
      }
    }

    private int getViewWidthOrParam() {
      final LayoutParams layoutParams = view.getLayoutParams();
      if (isSizeValid(view.getWidth())) {
        return view.getWidth();
      } else if (layoutParams != null) {
        return getSizeForParam(layoutParams.width, false );
      } else {
        return PENDING_SIZE;
      }
    }

    private int getSizeForParam(int param, boolean isHeight) {
      if (param == LayoutParams.WRAP_CONTENT) {
        Point displayDimens = getDisplayDimens();
        return isHeight ? displayDimens.y : displayDimens.x;
      } else {
        return param;
      }
    }

    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    @SuppressWarnings("deprecation")
    private Point getDisplayDimens() {
      if (displayDimens != null) {
        return displayDimens;
      }
      WindowManager windowManager =
          (WindowManager) view.getContext().getSystemService(Context.WINDOW_SERVICE);
      Display display = windowManager.getDefaultDisplay();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
        displayDimens = new Point();
        display.getSize(displayDimens);
      } else {
        displayDimens = new Point(display.getWidth(), display.getHeight());
      }
      return displayDimens;
    }

    private boolean isSizeValid(int size) {
      return size > 0 || size == LayoutParams.WRAP_CONTENT;
    }

    private static class SizeDeterminerLayoutListener implements ViewTreeObserver
        .OnPreDrawListener {
      private final WeakReference<SizeDeterminer> sizeDeterminerRef;

      public SizeDeterminerLayoutListener(SizeDeterminer sizeDeterminer) {
        sizeDeterminerRef = new WeakReference<>(sizeDeterminer);
      }

      @Override
      public boolean onPreDraw() {
        if (Log.isLoggable(TAG, Log.VERBOSE)) {
          Log.v(TAG, "OnGlobalLayoutListener called listener=" + this);
        }
        SizeDeterminer sizeDeterminer = sizeDeterminerRef.get();
        if (sizeDeterminer != null) {
          sizeDeterminer.checkCurrentDimens();
        }
        return true;
      }
    }
  }
}
