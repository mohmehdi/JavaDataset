


















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;
import com.puppycrawl.tools.checkstyle.checks.CheckUtils;


public final class NestedIfDepthCheck extends AbstractNestedDepthCheck {

    
    public static final String MSG_KEY = "nested.if.depth";

    
    private static final int DEFAULT_MAX = 1;

    
    public NestedIfDepthCheck() {
        super(DEFAULT_MAX);
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {TokenTypes.LITERAL_IF};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {TokenTypes.LITERAL_IF};
    }

    @Override
    public void visitToken(DetailAST literalIf) {
        if (!CheckUtils.isElseIf(literalIf)) {
            nestIn(literalIf, MSG_KEY);
        }
    }

    @Override
    public void leaveToken(DetailAST literalIf) {
        if (!CheckUtils.isElseIf(literalIf)) {
            nestOut();
        }
    }

}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;


public final class NestedForDepthCheck extends AbstractNestedDepthCheck {

    
    public static final String MSG_KEY = "nested.for.depth";

    
    private static final int DEFAULT_MAX = 1;

    
    public NestedForDepthCheck() {
        super(DEFAULT_MAX);
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {TokenTypes.LITERAL_FOR};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {TokenTypes.LITERAL_FOR};
    }

    @Override
    public void visitToken(DetailAST ast) {
        nestIn(ast, MSG_KEY);
    }

    @Override
    public void leaveToken(DetailAST ast) {
        nestOut();
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.Check;
import com.puppycrawl.tools.checkstyle.api.DetailAST;


public abstract class AbstractNestedDepthCheck extends Check {
    
    private int max;
    
    private int depth;

    
    public AbstractNestedDepthCheck(int max) {
        setMax(max);
    }

    @Override
    public final int[] getRequiredTokens() {
        return getDefaultTokens();
    }

    @Override
    public void beginTree(DetailAST rootAST) {
        depth = 0;
    }

    
    public final void setMax(int max) {
        this.max = max;
    }

    
    protected final void nestIn(DetailAST ast, String messageId) {
        if (depth > max) {
            log(ast, messageId, depth, max);
        }
        ++depth;
    }

    
    protected final void nestOut() {
        --depth;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;


public final class NestedTryDepthCheck extends AbstractNestedDepthCheck {

    
    public static final String MSG_KEY = "nested.try.depth";

    
    private static final int DEFAULT_MAX = 1;

    
    public NestedTryDepthCheck() {
        super(DEFAULT_MAX);
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {TokenTypes.LITERAL_TRY};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {TokenTypes.LITERAL_TRY};
    }

    @Override
    public void visitToken(DetailAST literalTry) {
        nestIn(literalTry, MSG_KEY);
    }

    @Override
    public void leaveToken(DetailAST literalTry) {
        nestOut();
    }

}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;
import com.puppycrawl.tools.checkstyle.checks.CheckUtils;


public final class NestedIfDepthCheck extends AbstractNestedDepthCheck {

    
    public static final String MSG_KEY = "nested.if.depth";

    
    private static final int DEFAULT_MAX = 1;

    
    public NestedIfDepthCheck() {
        super(DEFAULT_MAX);
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {TokenTypes.LITERAL_IF};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {TokenTypes.LITERAL_IF};
    }

    @Override
    public void visitToken(DetailAST ast) {
        if (ast.getType() == TokenTypes.LITERAL_IF) {
            visitLiteralIf(ast);
        }
        else {
            throw new IllegalStateException(ast.toString());
        }
    }

    @Override
    public void leaveToken(DetailAST ast) {
        if (ast.getType() == TokenTypes.LITERAL_IF) {
            leaveLiteralIf(ast);
        }
        else {
            throw new IllegalStateException(ast.toString());
        }
    }

    
    private void visitLiteralIf(DetailAST literalIf) {
        if (!CheckUtils.isElseIf(literalIf)) {
            nestIn(literalIf, MSG_KEY);
        }
    }

    
    private void leaveLiteralIf(DetailAST literalIf) {
        if (!CheckUtils.isElseIf(literalIf)) {
            nestOut();
        }
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;


public final class NestedForDepthCheck extends AbstractNestedDepthCheck {

    
    public static final String MSG_KEY = "nested.for.depth";

    
    private static final int DEFAULT_MAX = 1;

    
    public NestedForDepthCheck() {
        super(DEFAULT_MAX);
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {TokenTypes.LITERAL_FOR};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {TokenTypes.LITERAL_FOR};
    }

    @Override
    public void visitToken(DetailAST ast) {
        if (TokenTypes.LITERAL_FOR == ast.getType()) {
            nestIn(ast, MSG_KEY);
        }
    }

    @Override
    public void leaveToken(DetailAST ast) {
        if (TokenTypes.LITERAL_FOR == ast.getType()) {
            nestOut();
        }
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.Check;
import com.puppycrawl.tools.checkstyle.api.DetailAST;


public abstract class AbstractNestedDepthCheck extends Check {
    
    private int max;
    
    private int depth;

    
    public AbstractNestedDepthCheck(int max) {
        setMax(max);
    }

    @Override
    public final int[] getRequiredTokens() {
        return getDefaultTokens();
    }

    @Override
    public void beginTree(DetailAST rootAST) {
        depth = 0;
    }

    
    public final int getMax() {
        return max;
    }

    
    public final void setMax(int max) {
        this.max = max;
    }

    
    protected final void nestIn(DetailAST ast, String messageId) {
        if (depth > max) {
            log(ast, messageId, depth, max);
        }
        ++depth;
    }

    
    protected final void nestOut() {
        --depth;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;


public final class NestedTryDepthCheck extends AbstractNestedDepthCheck {

    
    public static final String MSG_KEY = "nested.try.depth";

    
    private static final int DEFAULT_MAX = 1;

    
    public NestedTryDepthCheck() {
        super(DEFAULT_MAX);
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {TokenTypes.LITERAL_TRY};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {TokenTypes.LITERAL_TRY};
    }

    @Override
    public void visitToken(DetailAST ast) {
        if (ast.getType() == TokenTypes.LITERAL_TRY) {
            visitLiteralTry(ast);
        }
        else {
            throw new IllegalStateException(ast.toString());
        }
    }

    @Override
    public void leaveToken(DetailAST ast) {
        if (ast.getType() == TokenTypes.LITERAL_TRY) {
            leaveLiteralTry();
        }
        else {
            throw new IllegalStateException(ast.toString());
        }
    }

    
    private void visitLiteralTry(DetailAST literalTry) {
        nestIn(literalTry, MSG_KEY);
    }

    
    private void leaveLiteralTry() {
        nestOut();
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.ScopeUtils;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;
import com.puppycrawl.tools.checkstyle.checks.DeclarationCollector;


public class RequireThisCheck extends DeclarationCollector {

    
    public static final String MSG_METHOD = "require.this.method";

    
    public static final String MSG_VARIABLE = "require.this.variable";

    
    private boolean checkFields = true;
    
    private boolean checkMethods = true;

    
    public void setCheckFields(boolean checkFields) {
        this.checkFields = checkFields;
    }

    
    public void setCheckMethods(boolean checkMethods) {
        this.checkMethods = checkMethods;
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {
            TokenTypes.CLASS_DEF,
            TokenTypes.CTOR_DEF,
            TokenTypes.ENUM_DEF,
            TokenTypes.IDENT,
            TokenTypes.INTERFACE_DEF,
            TokenTypes.METHOD_DEF,
            TokenTypes.PARAMETER_DEF,
            TokenTypes.SLIST,
            TokenTypes.VARIABLE_DEF,
        };
    }

    @Override
    public int[] getRequiredTokens() {
        return getDefaultTokens();
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {
            TokenTypes.IDENT,
        };
    }

    @Override
    public void visitToken(DetailAST ast) {
        super.visitToken(ast);
        if (ast.getType() == TokenTypes.IDENT) {
            processIDENT(ast);
        }
    }

    
    private void processIDENT(DetailAST ast) {
        final int parentType = ast.getParent().getType();
        switch (parentType) {
            case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:
            case TokenTypes.ANNOTATION:
            case TokenTypes.ANNOTATION_FIELD_DEF:
                
                break;
            case TokenTypes.METHOD_CALL: {
                
                if (checkMethods && isClassMethod(ast.getText())) {
                    log(ast, "require.this.method", ast.getText());
                }
                break;
            }
            default: {
                if (checkFields) {
                    processField(ast, parentType);
                }
                break;
            }
        }
    }

    
    private void processField(DetailAST ast, int parentType) {
        if (ScopeUtils.getSurroundingScope(ast) == null) {
            
            
            
            return;
        }

        if (parentType == TokenTypes.DOT
                && ast.getPreviousSibling() != null) {
            
            return;
        }
        if (parentType == TokenTypes.TYPE
                || parentType == TokenTypes.LITERAL_NEW) {
            
            return;
        }
        if (isDeclarationToken(parentType)) {
            
            return;
        }

        final String name = ast.getText();
        if (isClassField(name)) {
            log(ast, "require.this.variable", name);
        }
    }

    
    private boolean isDeclarationToken(int parentType) {
        return parentType == TokenTypes.VARIABLE_DEF
            || parentType == TokenTypes.CTOR_DEF
            || parentType == TokenTypes.METHOD_DEF
            || parentType == TokenTypes.CLASS_DEF
            || parentType == TokenTypes.ENUM_DEF
            || parentType == TokenTypes.INTERFACE_DEF
            || parentType == TokenTypes.PARAMETER_DEF
            || parentType == TokenTypes.TYPE_ARGUMENT;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.coding;

import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.ScopeUtils;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;
import com.puppycrawl.tools.checkstyle.checks.DeclarationCollector;


public class RequireThisCheck extends DeclarationCollector {

    
    public static final String MSG_METHOD = "require.this.method";

    
    public static final String MSG_VARIABLE = "require.this.variable";

    
    private boolean checkFields = true;
    
    private boolean checkMethods = true;

    
    public void setCheckFields(boolean checkFields) {
        this.checkFields = checkFields;
    }

    
    public void setCheckMethods(boolean checkMethods) {
        this.checkMethods = checkMethods;
    }

    @Override
    public int[] getDefaultTokens() {
        return new int[] {
            TokenTypes.CLASS_DEF,
            TokenTypes.CTOR_DEF,
            TokenTypes.ENUM_DEF,
            TokenTypes.IDENT,
            TokenTypes.INTERFACE_DEF,
            TokenTypes.METHOD_DEF,
            TokenTypes.PARAMETER_DEF,
            TokenTypes.SLIST,
            TokenTypes.VARIABLE_DEF,
        };
    }

    @Override
    public int[] getRequiredTokens() {
        return getDefaultTokens();
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {
            TokenTypes.IDENT,
        };
    }

    @Override
    public void visitToken(DetailAST ast) {
        super.visitToken(ast);
        if (ast.getType() == TokenTypes.IDENT) {
            processIDENT(ast);
        }
    }

    
    private void processIDENT(DetailAST ast) {
        final int parentType = ast.getParent().getType();

        if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR
            || parentType == TokenTypes.ANNOTATION
            || parentType == TokenTypes.ANNOTATION_FIELD_DEF) {
            
            return;
        }

        
        if (parentType == TokenTypes.METHOD_CALL) {
            if (checkMethods && isClassMethod(ast.getText())) {
                log(ast, "require.this.method", ast.getText());
            }
            return;
        }

        
        if (!checkFields) {
            
            return;
        }

        if (ScopeUtils.getSurroundingScope(ast) == null) {
            
            
            
            return;
        }

        if (parentType == TokenTypes.DOT
            && ast.getPreviousSibling() != null) {
            
            return;
        }
        if (parentType == TokenTypes.TYPE
            || parentType == TokenTypes.LITERAL_NEW) {
            
            return;
        }
        if (parentType == TokenTypes.VARIABLE_DEF
            || parentType == TokenTypes.CTOR_DEF
            || parentType == TokenTypes.METHOD_DEF
            || parentType == TokenTypes.CLASS_DEF
            || parentType == TokenTypes.ENUM_DEF
            || parentType == TokenTypes.INTERFACE_DEF
            || parentType == TokenTypes.PARAMETER_DEF
            || parentType == TokenTypes.TYPE_ARGUMENT) {
            
            return;
        }

        final String name = ast.getText();
        if (isClassField(name)) {
            log(ast, "require.this.variable", name);
        }
    }
}

<code block>
package com.google.checkstyle.test.chapter5naming.rule521packagenames;

import java.io.File;
import java.io.IOException;

import org.junit.BeforeClass;
import org.junit.Test;

import com.google.checkstyle.test.base.ConfigurationBuilder;
import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
import com.puppycrawl.tools.checkstyle.api.Configuration; 
import com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck;
import com.google.checkstyle.test.base.BaseCheckTestSupport;

public class PackageNameTest extends BaseCheckTestSupport{
    
	private Class<PackageNameCheck> clazz = PackageNameCheck.class;
	private static ConfigurationBuilder builder;
	private static Configuration checkConfig;
	private String msgKey = "name.invalidPattern";
	private static String format;
    
    
    @BeforeClass
    public static void setConfigurationBuilder() throws CheckstyleException, IOException {
        builder = new ConfigurationBuilder(new File("src/it/"));
        checkConfig = builder.getCheckConfig("PackageName");
        format = checkConfig.getAttribute("format");
    }

    @Test
    public void goodPackageNameTest() throws IOException, Exception {
        
        
        final String[] expected = {};
        
        String filePath = builder.getFilePath("PackageNameInputGood");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }
    
    @Test
    public void badPackageNameTest() throws IOException, Exception {
        
        String packagePath =
                "com.google.checkstyle.test.chapter5naming.rule521packageNamesCamelCase";
        String msg = getCheckMessage(checkConfig.getMessages(), msgKey, packagePath, format);

        final String[] expected = {
            "1:9: " + msg,
        };
        
        String filePath = builder.getFilePath("PackageNameInputBad");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }

    @Test
    public void badPackageName2Test() throws IOException, Exception {
        
        
        String packagePath = "com.google.checkstyle.test.chapter5naming.rule521_packagenames";
        String msg = getCheckMessage(checkConfig.getMessages(), msgKey, packagePath, format);

        final String[] expected = {
            "1:9: " + msg,
        };
        
        String filePath = builder.getFilePath("BadPackageNameInput2");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }
    
    @Test
    public void badPackageName3Test() throws IOException, Exception {
        
        
        String packagePath = "com.google.checkstyle.test.chapter5naming.rule521$packagenames";
        String msg = getCheckMessage(checkConfig.getMessages(), msgKey, packagePath, format);

        final String[] expected = {
            "1:9: " + msg,
        };
        
        String filePath = builder.getFilePath("PackageBadNameInput3");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }
}



<code block>
package com.google.checkstyle.test.chapter5naming.rule521packageNamesCamelCase; 
final class PackageNameInputBad {}

<code block>
package com.google.checkstyle.test.chapter4formatting.rule4822variabledistance;
import java.util.*;
public class InputVariableDeclarationUsageDistanceCheck {

	private static int test1 = 0;

	static {
		int b = 0;
		int d = 0;
		{
			d = ++b;
		}
	}

	static {
		int c = 0;
		int a = 3;
		int b = 2;
		{
			a = a + b;
			c = b;
		}
		{
			c--;
		}
		a = 7;
	}

	static {
		int a = -1;
		int b = 2;
		b++;
		int c = --b;
		a = b; 
	}

	public InputVariableDeclarationUsageDistanceCheck(int test1) {
		int temp = -1;
		this.test1 = test1;
		temp = test1; 
	}

	public boolean testMethod() {
		int temp = 7;
		new InputVariableDeclarationUsageDistanceCheck(2);
		String.valueOf(temp); 
		boolean result = false;
		String str = "";
		if (test1 > 1) {
			str = "123";
			result = true;
		}
		return result;
	}

	public void testMethod2() {
		int count;
		int a = 3;
		int b = 2;
		{
			a = a
					+ b
					- 5
					+ 2
					* a;
			count = b; 
		}
	}

	public void testMethod3() {
		int count; 
		int a = 3;
		int b = 3;
		a = a + b;
		b = a + a;
		testMethod2();
		count = b; 
	}

	public void testMethod4(int arg) {
		int d = 0;
		for (int i = 0; i < 10; i++) {
			d++;
			if (i > 5) {
				d += arg;
			}
		}

		String ar[] = { "1", "2" };
		for (String st : ar) {
			System.out.println(st);
		}
	}

	public void testMethod5() {
		int arg = 7;
		boolean b = true;
		boolean bb = false;
		if (b)
			if (!bb)
				b = false;
		testMethod4(arg); 
	}

	public void testMethod6() {
		int blockNumWithSimilarVar = 3;
		int dist = 0;
		int index = 0;
		int block = 0;

		if (blockNumWithSimilarVar <= 1) {
			do {
				dist++;
				if (block > 4) {
					break;
				}
				index++;
				block++;
			} while (index < 7);
		} else {
			while (index < 8) {
				dist += block;
				index++;
				block++;
			}
		}
	}

	public boolean testMethod7(int a) {
		boolean res;
		switch (a) {
		case 1:
			res = true;
			break;
		default:
			res = false;
		}
		return res;
	}

	public void testMethod8() {
		int b = 0;
		int c = 0;
		int m = 0;
		int n = 0;
		{
			c++;
			b++;
		}
		{
			n++; 
			m++; 
			b++;
		}
	}

	public void testMethod9() {
		boolean result = false;
		boolean b1 = true;
		boolean b2 = false;
		if (b1) {
			if (!b2) {
				result = true;
			}
			result = true;
		}
	}

	public boolean testMethod10() {
		boolean result;
		try {
			result = true;
		} catch (Exception e) {
			result = false;
		} finally {
			result = false;
		}
		return result;
	}

	public void testMethod11() {
		int a = 0;
		int b = 10;
		boolean result;
		try {
			b--;
		} catch (Exception e) {
			b++;
			result = false; 
		} finally {
			a++;
		}
	}

	public void testMethod12() {
		boolean result = false;
		boolean b3 = true;
		boolean b1 = true;
		boolean b2 = false;
		if (b1) {
			if (b3) {
				if (!b2) {
					result = true;
				}
				result = true;
			}
		}
	}

	public void testMethod13() {
		int i = 9;
		int j = 6;
		int g = i + 8;
		int k = j + 10;
	}

	public void testMethod14() {
		Session s = openSession();
		Transaction t = s.beginTransaction(); 
		A a = new A();
		E d1 = new E();
		C1 c = new C1();
		E d2 = new E();
		a.setForward(d1);
		d1.setReverse(a);
		c.setForward(d2); 
							
		d2.setReverse(c);
		Serializable aid = s.save(a);
		Serializable d2id = s.save(d2);
		t.commit(); 
		s.close();
	}

	public boolean isCheckBoxEnabled(int path) {
		String model = "";
		if (true) {
			for (int index = 0; index < path; ++index) {
				int nodeIndex = model.codePointAt(path);
				if (model.contains("")) {
					return false;
				}
			}
		} else {
			int nodeIndex = model.codePointAt(path);
			if (model.contains("")) {
				return false;
			}
		}
		return true;
	}

	public Object readObject(String in) throws Exception {
		String startDay = new String("");
		String endDay = new String("");
		return new String(startDay + endDay);
	}

	public int[] getSelectedIndices() {
		int[] selected = new int[5];
		String model = "";
		int a = 0;
		a++;
		for (int index = 0; index < 5; ++index) {
			selected[index] = Integer.parseInt(model.valueOf(a)); 
																						
		}
		return selected;
	}

	public void testMethod15() {
		String confDebug = "";
		if (!confDebug.equals("") && !confDebug.equals("null")) {
			LogLog.warn("The \"" + "\" attribute is deprecated.");
			LogLog.warn("Use the \"" + "\" attribute instead.");
			LogLog.setInternalDebugging(confDebug, true);
		}

		int i = 0;
		int k = 7;
		boolean b = false;
		for (; i < k; i++) {
			b = true;
			k++;
		}

		int sw;
		switch (i) {
		case 0:
			k++;
			sw = 0; 
			break;
		case 1:
			b = false;
			break;
		default:
			b = true;
		}

		int wh = 0;
		b = true;
		do {
			k--;
			i++;
		} while (wh > 0); 

		if (wh > 0) {
			k++;
		} else if (!b) {
			i++;
		} else {
			i--;
		}
	}

	public void testMethod16() {
		int wh = 1, i = 4, k = 0;
		if (i > 0) {
			k++;
		} else if (wh > 0) {
			i++;
		} else {
			i--;
		}
	}
	
	protected JMenuItem createSubMenuItem(LogLevel level) {
	    final JMenuItem result = new JMenuItem(level.toString());
	    final LogLevel logLevel = level;
	    result.setMnemonic(level.toString().charAt(0));
	    result.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent e) {
	        showLogLevelColorChangeDialog(result, logLevel); 
	      }
	    });

	    return result;

	  }
	
	public static Color darker(Color color, double fraction) {
        int red = (int) Math.round(color.getRed() * (1.0 - fraction));
        int green = (int) Math.round(color.getGreen() * (1.0 - fraction));
        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction));

        if (red < 0) {
            red = 0;
        } else if (red > 255) {
            red = 255;
        }
        if (green < 0) { 
            green = 0;
        } else if (green > 255) {
            green = 255;
        }
        if (blue < 0) { 
            
        }

        int alpha = color.getAlpha();

        return new Color(red, green, blue, alpha);
    }
	
	public void testFinal() {
		AuthUpdateTask authUpdateTask = null;
		final long intervalMs = 30 * 60000L;
		Object authCheckUrl = null, authInfo = null;
        authUpdateTask = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {
            @Override
            public void authTokenChanged(String cookie, String token) {
                fireAuthTokenChanged(cookie, token);
            }
        });

        Timer authUpdateTimer = new Timer("Auth Guard", true);
        authUpdateTimer.schedule(authUpdateTask, intervalMs / 2, intervalMs); 
	}
	
	public void testForCycle() {
		int filterCount = 0;
		for (int i = 0; i < 10; i++, filterCount++) {
			int abc = 0;
			System.out.println(abc);

			for (int j = 0; j < 10; j++) {
				abc = filterCount;
				System.out.println(abc);
			}
		}
	}
	
	public void testIssue32_1()
    {
        Option srcDdlFile = OptionBuilder.create("f");
        Option logDdlFile = OptionBuilder.create("o");
        Option help = OptionBuilder.create("h");

        Options options = new Options();
        options.something();
        options.something();
        options.something();
        options.something();
        options.addOption(srcDdlFile, logDdlFile, help); 
    }

    public void testIssue32_2()
    {
        int mm = Integer.parseInt("2");
        long timeNow = 0;
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(timeNow);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        cal.set(Calendar.HOUR_OF_DAY, mm);
        cal.set(Calendar.MINUTE, mm); 
    }
    
    public void testIssue32_3(MyObject[] objects) {
        Calendar cal = Calendar.getInstance();
        for(int i=0; i<objects.length; i++) {
            objects[i].setEnabled(true);
            objects[i].setColor(0x121212);
            objects[i].setUrl("http:
            objects[i].setSize(789);
            objects[i].setCalendar(cal); 
        }
    }
    
    public String testIssue32_4(boolean flag) {
        StringBuilder builder = new StringBuilder();
        builder.append("flag is ");
        builder.append(flag);
        final String line = "";
        if(flag) {
            builder.append("line of AST is:");
            builder.append("\n");
            builder.append(String.valueOf(line)); 
            builder.append("\n");
        }
        return builder.toString();
    }
    
    public void testIssue32_5() {
        Option a = null;
        Option b = null;
        Option c = null;
        boolean isCNull = isNull(c); 
        boolean isBNull = isNull(b); 
        boolean isANull = isNull(a); 
    }
  
    public void testIssue32_6() {
        Option aOpt = null;
        Option bOpt = null;
        Option cOpt = null;
        isNull(cOpt); 
        isNull(bOpt); 
        isNull(aOpt); 
    }
    
    public void testIssue32_7() {
        String line = "abc";
        otherWriter.write(line);
        line.charAt(1);
        builder.append(line);
        test(line, line, line);
    }
    
    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {
        String l1="1";

        
        w3.write(l1); 
    }
    
    public void testIssue32_9() {
        Options options = new Options();
        Option myOption = null; 
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        System.out.println("message");
        myOption.setArgName("abc"); 
    }
    
    public void testIssue32_10() {
        Options options = new Options();
        Option myOption = null; 
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        myOption.setArgName("q"); 
    }
    
    
    public int testIssue32_11(String toDir)
            throws Exception
    {
        int count = 0;
        String[] files = {};

        System.out.println("Data archivation started");
        files.notify();
        System.out.println("sss");

        if (files == null || files.length == 0) {
            System.out.println("No files on a remote site");
        }
        else {
            System.out.println("Files on remote site: " + files.length);

            for (String ftpFile : files) {
                if (files.length == 0) {
                    "".concat("");
                    ftpFile.concat(files[2]);
                    count++;
                }
            }
        }

        System.out.println();

        return count;
    }
    
    private Session openSession() {
        return null;
        
    }
    
    class Session {

        public Transaction beginTransaction() {
            return null;
        }

        public void close() {
        }

        public Serializable save(E d2) {
            return null;
        }

        public Serializable save(A a) {
            return null;
        }
        
    }
    
    class Transaction {

        public void commit() {
            
        }
        
    }
    
    class A {

        public void setForward(E d1) {
            
        }
        
    }
    
    class E {

        public void setReverse(C1 c) {
            
        }

        public void setReverse(A a) {
            
        }
        
    }
    
    class C1 {

        public void setForward(E d2) {
            
        }
        
    }
    
    class Serializable {
        
    }
    
    class JMenuItem {

        public JMenuItem(String string) {
        }

        public void addActionListener(ActionListener actionListener) {
            
        }

        public void setMnemonic(char charAt) {
            
        }
        
    }
    
    class LogLevel {
        
    }
    
    class ActionListener {
        
    }
    
    class ActionEvent {
        
    }
    
    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }
    
    static class Color {

        public Color(int red, int green, int blue, int alpha) {
        }

        public double getRed() {
            return 0;
        }

        public int getAlpha() {
            return 0;
        }

        public double getBlue() {
            return 0;
        }

        public double getGreen() {
            return 0;
        }
        
    }
    
    class AuthUpdateTask {

        public AuthUpdateTask(Object authCheckUrl, Object authInfo,
                IAuthListener iAuthListener) {
        }
        
    }
    
    interface IAuthListener {

        void authTokenChanged(String cookie, String token);
        
    }
    
    void fireAuthTokenChanged(String s, String s1) {}
    
    class Timer {

        public Timer(String string, boolean b) {
        }

        public void schedule(AuthUpdateTask authUpdateTask, long l,
                long intervalMs) {
        }
        
    }
    
    class Option {

        public void setArgName(String string) {
        }
        
    }
    
    boolean isNull(Option o) {
		return false;}
    
    class Writer {

        public void write(String l3) {
            
        }
        
    }
    
    class Options {

        public void addBindFile(Object object) {
            
        }

		public void
				addOption(Option srcDdlFile, Option logDdlFile, Option help)
		{
			
		}

		public void something()
		{
			
		}
        
    }
    
    class TreeMapNode {

        public TreeMapNode(String label, double d, DefaultValue defaultValue) {
        }

        public TreeMapNode(String label) {
        }
        
    }

    class DefaultValue {

        public DefaultValue(double d) {
        }
        
    }
    
    static class LogLog {

		public static void warn(String string)
		{
			
		}

		public static void setInternalDebugging(String confDebug, boolean b)
		{
			
		}
    	
    }
    
    static class OptionBuilder {

		public static Option create(String string)
		{
			return null;
		}
    	
    }
    
    class MyObject {

		public void setEnabled(boolean b)
		{
			
		}

		public void setCalendar(Calendar cal)
		{
			
		}

		public void setSize(int i)
		{
			
		}

		public void setUrl(String string)
		{
			
		}

		public void setColor(int i)
		{
			
		}
    	
    }
    
    static class otherWriter {

		public static void write(String line)
		{
			
		}
    	
    }
    
    void test(String s, String s1, String s2) {
    	
    }
    
    static class builder {

		public static void append(String line)
		{
			
		}
    	
    }
    
}

<code block>
package com.google.checkstyle.test.chapter5naming.rule521packagenames;

import java.io.File;
import java.io.IOException;

import org.junit.BeforeClass;
import org.junit.Test;

import com.google.checkstyle.test.base.ConfigurationBuilder;
import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
import com.puppycrawl.tools.checkstyle.api.Configuration; 
import com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck;
import com.google.checkstyle.test.base.BaseCheckTestSupport;

public class PackageNameTest extends BaseCheckTestSupport{
    
	private Class<PackageNameCheck> clazz = PackageNameCheck.class;
	private static ConfigurationBuilder builder;
	private static Configuration checkConfig;
	private String msgKey = "name.invalidPattern";
	private static String format;
    
    
    @BeforeClass
    public static void setConfigurationBuilder() throws CheckstyleException, IOException {
        builder = new ConfigurationBuilder(new File("src/it/"));
        checkConfig = builder.getCheckConfig("PackageName");
        format = checkConfig.getAttribute("format");
    }

    @Test
    public void goodPackageNameTest() throws IOException, Exception {
        
        
        final String[] expected = {};
        
        String filePath = builder.getFilePath("PackageNameInputGood");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }
    
    @Test
    public void badPackageNameTest() throws IOException, Exception {
        
        String packagePath = "com.google.checkstyle.test.chapter5naming.rule521packageNames";
        String msg = getCheckMessage(checkConfig.getMessages(), msgKey, packagePath, format);

        final String[] expected = {
            "1:9: " + msg,
        };
        
        String filePath = builder.getFilePath("PackageNameInputBad");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }

    @Test
    public void badPackageName2Test() throws IOException, Exception {
        
        
        String packagePath = "com.google.checkstyle.test.chapter5naming.rule521_packagenames";
        String msg = getCheckMessage(checkConfig.getMessages(), msgKey, packagePath, format);

        final String[] expected = {
            "1:9: " + msg,
        };
        
        String filePath = builder.getFilePath("BadPackageNameInput2");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }
    
    @Test
    public void badPackageName3Test() throws IOException, Exception {
        
        
        String packagePath = "com.google.checkstyle.test.chapter5naming.rule521$packagenames";
        String msg = getCheckMessage(checkConfig.getMessages(), msgKey, packagePath, format);

        final String[] expected = {
            "1:9: " + msg,
        };
        
        String filePath = builder.getFilePath("PackageBadNameInput3");
        
        Integer[] warnList = builder.getLinesWithWarn(filePath);
        verify(checkConfig, filePath, expected, warnList);
    }
}



<code block>
package com.google.checkstyle.test.chapter5naming.rule521packageNames; 
final class PackageNameInputBad {}

<code block>
package com.google.checkstyle.test.chapter4formatting.rule4822variabledistance;
import java.util.*;
public class InputVariableDeclarationUsageDistanceCheck {

	private static int test1 = 0;

	static {
		int b = 0;
		int d = 0;
		{
			d = ++b;
		}
	}

	static {
		int c = 0;
		int a = 3;
		int b = 2;
		{
			a = a + b;
			c = b;
		}
		{
			c--;
		}
		a = 7;
	}

	static {
		int a = -1;
		int b = 2;
		b++;
		int c = --b;
		a = b; 
	}

	public InputVariableDeclarationUsageDistanceCheck(int test1) {
		int temp = -1;
		this.test1 = test1;
		temp = test1; 
	}

	public boolean testMethod() {
		int temp = 7;
		new InputVariableDeclarationUsageDistanceCheck(2);
		String.valueOf(temp); 
		boolean result = false;
		String str = "";
		if (test1 > 1) {
			str = "123";
			result = true;
		}
		return result;
	}

	public void testMethod2() {
		int count;
		int a = 3;
		int b = 2;
		{
			a = a
					+ b
					- 5
					+ 2
					* a;
			count = b; 
		}
	}

	public void testMethod3() {
		int count; 
		int a = 3;
		int b = 3;
		a = a + b;
		b = a + a;
		testMethod2();
		count = b; 
	}

	public void testMethod4(int arg) {
		int d = 0;
		for (int i = 0; i < 10; i++) {
			d++;
			if (i > 5) {
				d += arg;
			}
		}

		String ar[] = { "1", "2" };
		for (String st : ar) {
			System.out.println(st);
		}
	}

	public void testMethod5() {
		int arg = 7;
		boolean b = true;
		boolean bb = false;
		if (b)
			if (!bb)
				b = false;
		testMethod4(arg); 
	}

	public void testMethod6() {
		int blockNumWithSimilarVar = 3;
		int dist = 0;
		int index = 0;
		int block = 0;

		if (blockNumWithSimilarVar <= 1) {
			do {
				dist++;
				if (block > 4) {
					break;
				}
				index++;
				block++;
			} while (index < 7);
		} else {
			while (index < 8) {
				dist += block;
				index++;
				block++;
			}
		}
	}

	public boolean testMethod7(int a) {
		boolean res;
		switch (a) {
		case 1:
			res = true;
			break;
		default:
			res = false;
		}
		return res;
	}

	public void testMethod8() {
		int b = 0;
		int c = 0;
		int m = 0;
		int n = 0;
		{
			c++;
			b++;
		}
		{
			n++; 
			m++; 
			b++;
		}
	}

	public void testMethod9() {
		boolean result = false;
		boolean b1 = true;
		boolean b2 = false;
		if (b1) {
			if (!b2) {
				result = true;
			}
			result = true;
		}
	}

	public boolean testMethod10() {
		boolean result;
		try {
			result = true;
		} catch (Exception e) {
			result = false;
		} finally {
			result = false;
		}
		return result;
	}

	public void testMethod11() {
		int a = 0;
		int b = 10;
		boolean result;
		try {
			b--;
		} catch (Exception e) {
			b++;
			result = false; 
		} finally {
			a++;
		}
	}

	public void testMethod12() {
		boolean result = false;
		boolean b3 = true;
		boolean b1 = true;
		boolean b2 = false;
		if (b1) {
			if (b3) {
				if (!b2) {
					result = true;
				}
				result = true;
			}
		}
	}

	public void testMethod13() {
		int i = 9;
		int j = 6;
		int g = i + 8;
		int k = j + 10;
	}

	public void testMethod14() {
		Session s = openSession();
		Transaction t = s.beginTransaction(); 
		A a = new A();
		E d1 = new E();
		C1 c = new C1();
		E d2 = new E();
		a.setForward(d1);
		d1.setReverse(a);
		c.setForward(d2); 
							
		d2.setReverse(c);
		Serializable aid = s.save(a);
		Serializable d2id = s.save(d2);
		t.commit(); 
		s.close();
	}

	public boolean isCheckBoxEnabled(int path) {
		String model = "";
		if (true) {
			for (int index = 0; index < path; ++index) {
				int nodeIndex = model.codePointAt(path);
				if (model.contains("")) {
					return false;
				}
			}
		} else {
			int nodeIndex = model.codePointAt(path);
			if (model.contains("")) {
				return false;
			}
		}
		return true;
	}

	public Object readObject(String in) throws Exception {
		String startDay = new String("");
		String endDay = new String("");
		return new String(startDay + endDay);
	}

	public int[] getSelectedIndices() {
		int[] selected = new int[5];
		String model = "";
		int a = 0;
		a++;
		for (int index = 0; index < 5; ++index) {
			selected[index] = Integer.parseInt(model.valueOf(a)); 
																						
		}
		return selected;
	}

	public void testMethod15() {
		String confDebug = "";
		if (!confDebug.equals("") && !confDebug.equals("null")) {
			LogLog.warn("The \"" + "\" attribute is deprecated.");
			LogLog.warn("Use the \"" + "\" attribute instead.");
			LogLog.setInternalDebugging(confDebug, true);
		}

		int i = 0;
		int k = 7;
		boolean b = false;
		for (; i < k; i++) {
			b = true;
			k++;
		}

		int sw;
		switch (i) {
		case 0:
			k++;
			sw = 0; 
			break;
		case 1:
			b = false;
			break;
		default:
			b = true;
		}

		int wh = 0;
		b = true;
		do {
			k--;
			i++;
		} while (wh > 0); 

		if (wh > 0) {
			k++;
		} else if (!b) {
			i++;
		} else {
			i--;
		}
	}

	public void testMethod16() {
		int wh = 1, i = 4, k = 0;
		if (i > 0) {
			k++;
		} else if (wh > 0) {
			i++;
		} else {
			i--;
		}
	}
	
	protected JMenuItem createSubMenuItem(LogLevel level) {
	    final JMenuItem result = new JMenuItem(level.toString());
	    final LogLevel logLevel = level;
	    result.setMnemonic(level.toString().charAt(0));
	    result.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent e) {
	        showLogLevelColorChangeDialog(result, logLevel); 
	      }
	    });

	    return result;

	  }
	
	public static Color darker(Color color, double fraction) {
        int red = (int) Math.round(color.getRed() * (1.0 - fraction));
        int green = (int) Math.round(color.getGreen() * (1.0 - fraction));
        int blue = (int) Math.round(color.getBlue() * (1.0 - fraction));

        if (red < 0) {
            red = 0;
        } else if (red > 255) {
            red = 255;
        }
        if (green < 0) { 
            green = 0;
        } else if (green > 255) {
            green = 255;
        }
        if (blue < 0) { 
            
        }

        int alpha = color.getAlpha();

        return new Color(red, green, blue, alpha);
    }
	
	public void testFinal() {
		AuthUpdateTask authUpdateTask = null;
		final long intervalMs = 30 * 60000L;
		Object authCheckUrl = null, authInfo = null;
        authUpdateTask = new AuthUpdateTask(authCheckUrl, authInfo, new IAuthListener() {
            @Override
            public void authTokenChanged(String cookie, String token) {
                fireAuthTokenChanged(cookie, token);
            }
        });

        Timer authUpdateTimer = new Timer("Auth Guard", true);
        authUpdateTimer.schedule(authUpdateTask, intervalMs / 2, intervalMs); 
	}
	
	public void testForCycle() {
		int filterCount = 0;
		for (int i = 0; i < 10; i++, filterCount++) {
			int abc = 0;
			System.out.println(abc);

			for (int j = 0; j < 10; j++) {
				abc = filterCount;
				System.out.println(abc);
			}
		}
	}
	
	public void testIssue32_1()
    {
        Option srcDdlFile = OptionBuilder.create("f");
        Option logDdlFile = OptionBuilder.create("o");
        Option help = OptionBuilder.create("h");

        Options options = new Options();
        options.something();
        options.something();
        options.something();
        options.something();
        options.addOption(srcDdlFile, logDdlFile, help); 
    }

    public void testIssue32_2()
    {
        int mm = Integer.parseInt("2");
        long timeNow = 0;
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(timeNow);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        cal.set(Calendar.HOUR_OF_DAY, mm);
        cal.set(Calendar.MINUTE, mm); 
    }
    
    public void testIssue32_3(MyObject[] objects) {
        Calendar cal = Calendar.getInstance();
        for(int i=0; i<objects.length; i++) {
            objects[i].setEnabled(true);
            objects[i].setColor(0x121212);
            objects[i].setUrl("http:
            objects[i].setSize(789);
            objects[i].setCalendar(cal); 
        }
    }
    
    public String testIssue32_4(boolean flag) {
        StringBuilder builder = new StringBuilder();
        builder.append("flag is ");
        builder.append(flag);
        final String line = "";
        if(flag) {
            builder.append("line of AST is:");
            builder.append("\n");
            builder.append(String.valueOf(line)); 
            builder.append("\n");
        }
        return builder.toString();
    }
    
    public void testIssue32_5() {
        Option a = null;
        Option b = null;
        Option c = null;
        boolean isCNull = isNull(c); 
        boolean isBNull = isNull(b); 
        boolean isANull = isNull(a); 
    }
  
    public void testIssue32_6() {
        Option aOpt = null;
        Option bOpt = null;
        Option cOpt = null;
        isNull(cOpt); 
        isNull(bOpt); 
        isNull(aOpt); 
    }
    
    public void testIssue32_7() {
        String line = "abc";
        writer.write(line);
        line.charAt(1);
        builder.append(line);
        test(line, line, line);
    }
    
    public void testIssue32_8(Writer w1, Writer w2, Writer w3) {
        String l1="1";

        
        w3.write(l1); 
    }
    
    public void testIssue32_9() {
        Options options = new Options();
        Option myOption = null; 
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        System.out.println("message");
        myOption.setArgName("abc"); 
    }
    
    public void testIssue32_10() {
        Options options = new Options();
        Option myOption = null; 
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        options.addBindFile(null);
        myOption.setArgName("q"); 
    }
    
    
    public int testIssue32_11(String toDir)
            throws Exception
    {
        int count = 0;
        String[] files = {};

        System.out.println("Data archivation started");
        files.notify();
        System.out.println("sss");

        if (files == null || files.length == 0) {
            System.out.println("No files on a remote site");
        }
        else {
            System.out.println("Files on remote site: " + files.length);

            for (String ftpFile : files) {
                if (files.length == 0) {
                    "".concat("");
                    ftpFile.concat(files[2]);
                    count++;
                }
            }
        }

        System.out.println();

        return count;
    }
    
    private Session openSession() {
        return null;
        
    }
    
    class Session {

        public Transaction beginTransaction() {
            return null;
        }

        public void close() {
        }

        public Serializable save(E d2) {
            return null;
        }

        public Serializable save(A a) {
            return null;
        }
        
    }
    
    class Transaction {

        public void commit() {
            
        }
        
    }
    
    class A {

        public void setForward(E d1) {
            
        }
        
    }
    
    class E {

        public void setReverse(C1 c) {
            
        }

        public void setReverse(A a) {
            
        }
        
    }
    
    class C1 {

        public void setForward(E d2) {
            
        }
        
    }
    
    class Serializable {
        
    }
    
    class JMenuItem {

        public JMenuItem(String string) {
        }

        public void addActionListener(ActionListener actionListener) {
            
        }

        public void setMnemonic(char charAt) {
            
        }
        
    }
    
    class LogLevel {
        
    }
    
    class ActionListener {
        
    }
    
    class ActionEvent {
        
    }
    
    private void showLogLevelColorChangeDialog(JMenuItem j, LogLevel l) {   }
    
    static class Color {

        public Color(int red, int green, int blue, int alpha) {
        }

        public double getRed() {
            return 0;
        }

        public int getAlpha() {
            return 0;
        }

        public double getBlue() {
            return 0;
        }

        public double getGreen() {
            return 0;
        }
        
    }
    
    class AuthUpdateTask {

        public AuthUpdateTask(Object authCheckUrl, Object authInfo,
                IAuthListener iAuthListener) {
        }
        
    }
    
    interface IAuthListener {

        void authTokenChanged(String cookie, String token);
        
    }
    
    void fireAuthTokenChanged(String s, String s1) {}
    
    class Timer {

        public Timer(String string, boolean b) {
        }

        public void schedule(AuthUpdateTask authUpdateTask, long l,
                long intervalMs) {
        }
        
    }
    
    class Option {

        public void setArgName(String string) {
        }
        
    }
    
    boolean isNull(Option o) {
		return false;}
    
    class Writer {

        public void write(String l3) {
            
        }
        
    }
    
    class Options {

        public void addBindFile(Object object) {
            
        }

		public void
				addOption(Option srcDdlFile, Option logDdlFile, Option help)
		{
			
		}

		public void something()
		{
			
		}
        
    }
    
    class TreeMapNode {

        public TreeMapNode(String label, double d, DefaultValue defaultValue) {
        }

        public TreeMapNode(String label) {
        }
        
    }

    class DefaultValue {

        public DefaultValue(double d) {
        }
        
    }
    
    static class LogLog {

		public static void warn(String string)
		{
			
		}

		public static void setInternalDebugging(String confDebug, boolean b)
		{
			
		}
    	
    }
    
    static class OptionBuilder {

		public static Option create(String string)
		{
			return null;
		}
    	
    }
    
    class MyObject {

		public void setEnabled(boolean b)
		{
			
		}

		public void setCalendar(Calendar cal)
		{
			
		}

		public void setSize(int i)
		{
			
		}

		public void setUrl(String string)
		{
			
		}

		public void setColor(int i)
		{
			
		}
    	
    }
    
    static class writer {

		public static void write(String line)
		{
			
		}
    	
    }
    
    void test(String s, String s1, String s2) {
    	
    }
    
    static class builder {

		public static void append(String line)
		{
			
		}
    	
    }
    
}
<code block>



















package com.puppycrawl.tools.checkstyle.api;

import java.util.Map;

import com.google.common.collect.ImmutableMap;
import com.puppycrawl.tools.checkstyle.ScopeUtils;


public enum JavadocTagInfo {
    
    AUTHOR("@author", "author", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF;
        }
    },

    
    CODE("{@code}", "code", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    DOC_ROOT("{@docRoot}", "docRoot", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    DEPRECATED("@deprecated", "deprecated", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.ENUM_CONSTANT_DEF
                || type == TokenTypes.ANNOTATION_FIELD_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    EXCEPTION("@exception", "exception", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.METHOD_DEF || type == TokenTypes.CTOR_DEF;
        }
    },

    
    INHERIT_DOC("{@inheritDoc}", "inheritDoc", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();

            return type == TokenTypes.METHOD_DEF
                && !ast.branchContains(TokenTypes.LITERAL_STATIC)
                && ScopeUtils.getScopeFromMods(ast
                    .findFirstToken(TokenTypes.MODIFIERS)) != Scope.PRIVATE;
        }
    },

    
    LINK("{@link}", "link", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    LINKPLAIN("{@linkplain}", "linkplain", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    LITERAL("{@literal}", "literal", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    PARAM("@param", "param", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF;
        }
    },

    
    RETURN("@return", "return", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            final DetailAST returnType = ast.findFirstToken(TokenTypes.TYPE);

            return type == TokenTypes.METHOD_DEF
                && returnType.getFirstChild().getType() != TokenTypes.LITERAL_VOID;

        }
    },

    
    SEE("@see", "see", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    SERIAL("@serial", "serial", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();

            return type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    SERIAL_DATA("@serialData", "serialData", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            final DetailAST methodNameAst = ast.findFirstToken(TokenTypes.IDENT);
            final String methodName = methodNameAst.getText();

            return type == TokenTypes.METHOD_DEF
                && ("writeObject".equals(methodName)
                    || "readObject".equals(methodName)
                    || "writeExternal".equals(methodName)
                    || "readExternal".equals(methodName)
                    || "writeReplace".equals(methodName)
                    || "readResolve".equals(methodName));
        }
    },

    
    SERIAL_FIELD("@serialField", "serialField", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            final DetailAST varType = ast.findFirstToken(TokenTypes.TYPE);

            return type == TokenTypes.VARIABLE_DEF
                && varType.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR
                && "ObjectStreafield".equals(varType.getFirstChild().getText());
        }
    },

    
    SINCE("@since", "since", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    THROWS("@throws", "throws", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF;
        }
    },

    
    VALUE("{@value}", "value", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    VERSION("@version", "version", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF;
        }
    };

    
    private static final Map<String, JavadocTagInfo> TEXT_TO_TAG;
    
    private static final Map<String, JavadocTagInfo> NAME_TO_TAG;

    static {
        final ImmutableMap.Builder<String, JavadocTagInfo> textToTagBuilder =
            new ImmutableMap.Builder<>();

        final ImmutableMap.Builder<String, JavadocTagInfo> nameToTagBuilder =
            new ImmutableMap.Builder<>();

        for (final JavadocTagInfo tag : JavadocTagInfo.values()) {
            textToTagBuilder.put(tag.getText(), tag);
            nameToTagBuilder.put(tag.getName(), tag);
        }

        TEXT_TO_TAG = textToTagBuilder.build();
        NAME_TO_TAG = nameToTagBuilder.build();
    }

    
    private final String text;
    
    private final String name;
    
    private final Type type;

    
    JavadocTagInfo(final String text, final String name,
        final Type type) {
        this.text = text;
        this.name = name;
        this.type = type;
    }

    
    public abstract boolean isValidOn(DetailAST ast);

    
    public String getText() {
        return this.text;
    }

    
    public String getName() {
        return this.name;
    }

    
    public Type getType() {
        return this.type;
    }

    
    public static JavadocTagInfo fromText(final String text) {
        if (text == null) {
            throw new IllegalArgumentException("the text is null");
        }

        final JavadocTagInfo tag = TEXT_TO_TAG.get(text);

        if (tag == null) {
            throw new IllegalArgumentException("the text [" + text
                + "] is not a valid Javadoc tag text");
        }

        return tag;
    }

    
    public static JavadocTagInfo fromName(final String name) {
        if (name == null) {
            throw new IllegalArgumentException("the name is null");
        }

        final JavadocTagInfo tag = NAME_TO_TAG.get(name);

        if (tag == null) {
            throw new IllegalArgumentException("the name [" + name
                + "] is not a valid Javadoc tag name");
        }

        return tag;
    }

    
    public static boolean isValidName(final String name) {
        return NAME_TO_TAG.containsKey(name);
    }

    
    @Override
    public String toString() {
        return "text [" + this.text + "] name [" + this.name
            + "] type [" + this.type + "]";
    }

    
    public enum Type {
        
        BLOCK,

        
        INLINE
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;


public enum LineSeparatorOption {
    
    CRLF("\r\n"),

    
    CR("\r"),

    
    LF("\n"),

    
    LF_CR_CRLF("##"), 

    
    SYSTEM(System.getProperty("line.separator"));

    
    private final byte[] lineSeparator;

    
    LineSeparatorOption(String sep) {
        lineSeparator = sep.getBytes(StandardCharsets.US_ASCII);
    }

    
    public boolean matches(byte... bytes) {
        if (this == LF_CR_CRLF) {
            
            
            return CRLF.matches(bytes)
                || LF.matches(Arrays.copyOfRange(bytes, 1, 2))
                || CR.matches(Arrays.copyOfRange(bytes, 1, 2));
        }
        else {
            return Arrays.equals(bytes, lineSeparator);
        }
    }

    
    public int length() {
        return lineSeparator.length;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.modifier;

import java.util.ArrayList;
import java.util.List;

import com.puppycrawl.tools.checkstyle.api.Check;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;


public class RedundantModifierCheck
    extends Check {

    
    public static final String MSG_KEY = "redundantModifier";

    
    private static final int[] TOKENS_FOR_INTERFACE_MODIFIERS = new int[] {
        TokenTypes.LITERAL_STATIC,
        TokenTypes.ABSTRACT,
    };

    @Override
    public int[] getDefaultTokens() {
        return new int[] {
            TokenTypes.METHOD_DEF,
            TokenTypes.VARIABLE_DEF,
            TokenTypes.ANNOTATION_FIELD_DEF,
            TokenTypes.INTERFACE_DEF,
            TokenTypes.CTOR_DEF,
        };
    }

    @Override
    public int[] getRequiredTokens() {
        return new int[] {};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {
            TokenTypes.METHOD_DEF,
            TokenTypes.VARIABLE_DEF,
            TokenTypes.ANNOTATION_FIELD_DEF,
            TokenTypes.INTERFACE_DEF,
            TokenTypes.CTOR_DEF,
        };
    }

    @Override
    public void visitToken(DetailAST ast) {
        if (TokenTypes.INTERFACE_DEF == ast.getType()) {
            checkInterfaceModifiers(ast);
        }
        else if (TokenTypes.CTOR_DEF == ast.getType()
                && isEnumMember(ast)) {
            checkEnumConstructorModifiers(ast);
        }
        else if (isInterfaceOrAnnotationMember(ast)) {
            processInterfaceOrAnnotation(ast);
        }
        else if (ast.getType() == TokenTypes.METHOD_DEF) {
            processMethods(ast);
        }
    }

    
    private void checkInterfaceModifiers(DetailAST ast) {
        final DetailAST modifiers =
            ast.findFirstToken(TokenTypes.MODIFIERS);

        for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {
            final DetailAST modifier =
                    modifiers.findFirstToken(tokenType);
            if (modifier != null) {
                log(modifier.getLineNo(), modifier.getColumnNo(),
                        MSG_KEY, modifier.getText());
            }
        }
    }

    
    private void checkEnumConstructorModifiers(DetailAST ast) {
        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
        final DetailAST modifier = modifiers.getFirstChild();
        if (modifier != null) {
            log(modifier.getLineNo(), modifier.getColumnNo(),
                    MSG_KEY, modifier.getText());
        }
    }

    
    private void processInterfaceOrAnnotation(DetailAST ast) {
        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
        DetailAST modifier = modifiers.getFirstChild();
        while (modifier != null) {

            
            
            

            final int type = modifier.getType();
            if (type == TokenTypes.LITERAL_PUBLIC
                || type == TokenTypes.LITERAL_STATIC
                        && ast.getType() != TokenTypes.METHOD_DEF
                || type == TokenTypes.ABSTRACT
                || type == TokenTypes.FINAL) {
                log(modifier.getLineNo(), modifier.getColumnNo(),
                        MSG_KEY, modifier.getText());
                break;
            }

            modifier = modifier.getNextSibling();
        }
    }

    
    private void processMethods(DetailAST ast) {
        final DetailAST modifiers =
                        ast.findFirstToken(TokenTypes.MODIFIERS);
        
        boolean checkFinal =
            modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
        
        DetailAST parent = ast.getParent();
        while (parent != null) {
            if (parent.getType() == TokenTypes.CLASS_DEF) {
                final DetailAST classModifiers =
                    parent.findFirstToken(TokenTypes.MODIFIERS);
                checkFinal |=
                    classModifiers.branchContains(TokenTypes.FINAL);
                break;
            }
            parent = parent.getParent();
        }
        if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {
            DetailAST modifier = modifiers.getFirstChild();
            while (modifier != null) {
                final int type = modifier.getType();
                if (type == TokenTypes.FINAL) {
                    log(modifier.getLineNo(), modifier.getColumnNo(),
                            MSG_KEY, modifier.getText());
                    break;
                }
                modifier = modifier.getNextSibling();
            }
        }
    }

    
    private boolean isEnumMember(DetailAST ast) {
        final DetailAST parentTypeDef = ast.getParent().getParent();
        return parentTypeDef.getType() == TokenTypes.ENUM_DEF;
    }

    
    private static boolean isInterfaceOrAnnotationMember(DetailAST ast) {
        final DetailAST parentTypeDef = ast.getParent().getParent();
        return parentTypeDef.getType() == TokenTypes.INTERFACE_DEF
               || parentTypeDef.getType() == TokenTypes.ANNOTATION_DEF;
    }

    
    private static boolean isAnnotatedWithSafeVarargs(DetailAST methodDef) {
        boolean result = false;
        final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);
        for (DetailAST annotationNode : methodAnnotationsList) {
            if ("SafeVarargs".equals(annotationNode.getLastChild().getText())) {
                result = true;
                break;
            }
        }
        return result;
    }

    
    private static List<DetailAST> getMethodAnnotationsList(DetailAST methodDef) {
        final List<DetailAST> annotationsList = new ArrayList<>();
        final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);
        DetailAST modifier = modifiers.getFirstChild();
        while (modifier != null) {
            if (modifier.getType() == TokenTypes.ANNOTATION) {
                annotationsList.add(modifier);
            }
            modifier = modifier.getNextSibling();
        }
        return annotationsList;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.modifier;

import static com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.MSG_KEY;

import java.io.File;

import org.junit.Assert;
import org.junit.Test;

import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;

public class RedundantModifierTest
    extends BaseCheckTestSupport {
    @Test
    public void testIt() throws Exception {
        final DefaultConfiguration checkConfig =
            createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
            "54:12: " + getCheckMessage(MSG_KEY, "static"),
            "57:9: " + getCheckMessage(MSG_KEY, "public"),
            "63:9: " + getCheckMessage(MSG_KEY, "abstract"),
            "66:9: " + getCheckMessage(MSG_KEY, "public"),
            
            "72:9: " + getCheckMessage(MSG_KEY, "final"),
            "79:13: " + getCheckMessage(MSG_KEY, "final"),
            "88:12: " + getCheckMessage(MSG_KEY, "final"),
            "99:1: " + getCheckMessage(MSG_KEY, "abstract"),
            "116:5: " + getCheckMessage(MSG_KEY, "public"),
            "117:5: " + getCheckMessage(MSG_KEY, "final"),
            "118:5: " + getCheckMessage(MSG_KEY, "static"),
            "120:5: " + getCheckMessage(MSG_KEY, "public"),
            "121:5: " + getCheckMessage(MSG_KEY, "abstract"),
        };
        verify(checkConfig, getPath("InputModifier.java"), expected);
    }

    @Test
    public void testStaticMethodInInterface()
        throws Exception {
        final DefaultConfiguration checkConfig =
                createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
        };
        verify(checkConfig,
                new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
                        + "checkstyle/InputStaticModifierInInterface.java").getCanonicalPath(),
                expected);
    }

    @Test
    public void testFinalInInterface()
        throws Exception {
        final DefaultConfiguration checkConfig =
                createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
            "3:9: " + getCheckMessage(MSG_KEY, "final"),
        };
        verify(checkConfig,
                new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
                        + "checkstyle/InputFinalInDefaultMethods.java").getCanonicalPath(),
                expected);
    }

    @Test
    public void testEnumConstructorIsImplicitlyPrivate() throws Exception {
        final DefaultConfiguration checkConfig =
                createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
            "10:5: " + getCheckMessage(MSG_KEY, "private"),
        };
        verify(checkConfig, getPath("InputRedundantConstructorModifier.java"), expected);
    }

    @Test
    public void testGetAcceptableTokens() {
        RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
        int[] actual = redundantModifierCheckObj.getAcceptableTokens();
        int[] expected = new int[] {
            TokenTypes.METHOD_DEF,
            TokenTypes.VARIABLE_DEF,
            TokenTypes.ANNOTATION_FIELD_DEF,
            TokenTypes.INTERFACE_DEF,
            TokenTypes.CTOR_DEF,
        };
        Assert.assertNotNull(actual);
        Assert.assertArrayEquals(expected, actual);
    }

    @Test
    public void testGetRequiredTokens() {
        RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
        int[] actual = redundantModifierCheckObj.getRequiredTokens();
        int[] expected = new int[] {};
        Assert.assertNotNull(actual);
        Assert.assertArrayEquals(expected, actual);
    }
}

<code block>




package com.puppycrawl.tools.checkstyle;

public enum InputRedundantConstructorModifier {
    VAL1, VAL2;

    private InputRedundantConstructorModifier() { }

    InputRedundantConstructorModifier(int i) { }

    InputRedundantConstructorModifier(char c) { }
}

class ProperPrivateConstructor {
    private ProperPrivateConstructor() { }
}

<code block>



















package com.puppycrawl.tools.checkstyle.api;

import java.util.Map;

import com.google.common.collect.ImmutableMap;
import com.puppycrawl.tools.checkstyle.ScopeUtils;


public enum JavadocTagInfo {
    
    AUTHOR("@author", "author", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF;
        }
    },

    
    CODE("{@code}", "code", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    DOC_ROOT("{@docRoot}", "docRoot", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    DEPRECATED("@deprecated", "deprecated", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.ENUM_CONSTANT_DEF
                || type == TokenTypes.ANNOTATION_FIELD_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    EXCEPTION("@exception", "exception", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.METHOD_DEF || type == TokenTypes.CTOR_DEF;
        }
    },

    
    INHERIT_DOC("{@inheritDoc}", "inheritDoc", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();

            return type == TokenTypes.METHOD_DEF
                && !ast.branchContains(TokenTypes.LITERAL_STATIC)
                && ScopeUtils.getScopeFromMods(ast
                    .findFirstToken(TokenTypes.MODIFIERS)) != Scope.PRIVATE;
        }
    },

    
    LINK("{@link}", "link", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    LINKPLAIN("{@linkplain}", "linkplain", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    LITERAL("{@literal}", "literal", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    PARAM("@param", "param", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF;
        }
    },

    
    RETURN("@return", "return", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            final DetailAST returnType = ast.findFirstToken(TokenTypes.TYPE);

            return type == TokenTypes.METHOD_DEF
                && returnType.getFirstChild().getType() != TokenTypes.LITERAL_VOID;

        }
    },

    
    SEE("@see", "see", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    SERIAL("@serial", "serial", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();

            return type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    SERIAL_DATA("@serialData", "serialData", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            final DetailAST methodNameAst = ast.findFirstToken(TokenTypes.IDENT);
            final String methodName = methodNameAst.getText();

            return type == TokenTypes.METHOD_DEF
                && ("writeObject".equals(methodName)
                    || "readObject".equals(methodName)
                    || "writeExternal".equals(methodName)
                    || "readExternal".equals(methodName)
                    || "writeReplace".equals(methodName)
                    || "readResolve".equals(methodName));
        }
    },

    
    SERIAL_FIELD("@serialField", "serialField", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            final DetailAST varType = ast.findFirstToken(TokenTypes.TYPE);

            return type == TokenTypes.VARIABLE_DEF
                && varType.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR
                && "ObjectStreafield".equals(varType.getFirstChild().getText());
        }
    },

    
    SINCE("@since", "since", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    THROWS("@throws", "throws", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF;
        }
    },

    
    VALUE("{@value}", "value", Type.INLINE) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF
                || type == TokenTypes.METHOD_DEF
                || type == TokenTypes.CTOR_DEF
                || type == TokenTypes.VARIABLE_DEF
                && !ScopeUtils.isLocalVariableDef(ast);
        }
    },

    
    VERSION("@version", "version", Type.BLOCK) {
        
        @Override
        public boolean isValidOn(final DetailAST ast) {
            final int type = ast.getType();
            return type == TokenTypes.PACKAGE_DEF
                || type == TokenTypes.CLASS_DEF
                || type == TokenTypes.INTERFACE_DEF
                || type == TokenTypes.ENUM_DEF
                || type == TokenTypes.ANNOTATION_DEF;
        }
    };

    
    private static final Map<String, JavadocTagInfo> TEXT_TO_TAG;
    
    private static final Map<String, JavadocTagInfo> NAME_TO_TAG;

    static {
        final ImmutableMap.Builder<String, JavadocTagInfo> textToTagBuilder =
            new ImmutableMap.Builder<>();

        final ImmutableMap.Builder<String, JavadocTagInfo> nameToTagBuilder =
            new ImmutableMap.Builder<>();

        for (final JavadocTagInfo tag : JavadocTagInfo.values()) {
            textToTagBuilder.put(tag.getText(), tag);
            nameToTagBuilder.put(tag.getName(), tag);
        }

        TEXT_TO_TAG = textToTagBuilder.build();
        NAME_TO_TAG = nameToTagBuilder.build();
    }

    
    private final String text;
    
    private final String name;
    
    private final Type type;

    
    private JavadocTagInfo(final String text, final String name,
        final Type type) {
        this.text = text;
        this.name = name;
        this.type = type;
    }

    
    public abstract boolean isValidOn(DetailAST ast);

    
    public String getText() {
        return this.text;
    }

    
    public String getName() {
        return this.name;
    }

    
    public Type getType() {
        return this.type;
    }

    
    public static JavadocTagInfo fromText(final String text) {
        if (text == null) {
            throw new IllegalArgumentException("the text is null");
        }

        final JavadocTagInfo tag = TEXT_TO_TAG.get(text);

        if (tag == null) {
            throw new IllegalArgumentException("the text [" + text
                + "] is not a valid Javadoc tag text");
        }

        return tag;
    }

    
    public static JavadocTagInfo fromName(final String name) {
        if (name == null) {
            throw new IllegalArgumentException("the name is null");
        }

        final JavadocTagInfo tag = NAME_TO_TAG.get(name);

        if (tag == null) {
            throw new IllegalArgumentException("the name [" + name
                + "] is not a valid Javadoc tag name");
        }

        return tag;
    }

    
    public static boolean isValidName(final String name) {
        return NAME_TO_TAG.containsKey(name);
    }

    
    @Override
    public String toString() {
        return "text [" + this.text + "] name [" + this.name
            + "] type [" + this.type + "]";
    }

    
    public enum Type {
        
        BLOCK,

        
        INLINE
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;


public enum LineSeparatorOption {
    
    CRLF("\r\n"),

    
    CR("\r"),

    
    LF("\n"),

    
    LF_CR_CRLF("##"), 

    
    SYSTEM(System.getProperty("line.separator"));

    
    private final byte[] lineSeparator;

    
    private LineSeparatorOption(String sep) {
        lineSeparator = sep.getBytes(StandardCharsets.US_ASCII);
    }

    
    public boolean matches(byte... bytes) {
        if (this == LF_CR_CRLF) {
            
            
            return CRLF.matches(bytes)
                || LF.matches(Arrays.copyOfRange(bytes, 1, 2))
                || CR.matches(Arrays.copyOfRange(bytes, 1, 2));
        }
        else {
            return Arrays.equals(bytes, lineSeparator);
        }
    }

    
    public int length() {
        return lineSeparator.length;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.modifier;

import java.util.ArrayList;
import java.util.List;

import com.puppycrawl.tools.checkstyle.api.Check;
import com.puppycrawl.tools.checkstyle.api.DetailAST;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;


public class RedundantModifierCheck
    extends Check {

    
    public static final String MSG_KEY = "redundantModifier";

    
    private static final int[] TOKENS_FOR_INTERFACE_MODIFIERS = new int[] {
        TokenTypes.LITERAL_STATIC,
        TokenTypes.ABSTRACT,
    };

    @Override
    public int[] getDefaultTokens() {
        return new int[] {
            TokenTypes.METHOD_DEF,
            TokenTypes.VARIABLE_DEF,
            TokenTypes.ANNOTATION_FIELD_DEF,
            TokenTypes.INTERFACE_DEF,
        };
    }

    @Override
    public int[] getRequiredTokens() {
        return new int[] {};
    }

    @Override
    public int[] getAcceptableTokens() {
        return new int[] {
            TokenTypes.METHOD_DEF,
            TokenTypes.VARIABLE_DEF,
            TokenTypes.ANNOTATION_FIELD_DEF,
            TokenTypes.INTERFACE_DEF,
        };
    }

    @Override
    public void visitToken(DetailAST ast) {
        if (TokenTypes.INTERFACE_DEF == ast.getType()) {
            final DetailAST modifiers =
                ast.findFirstToken(TokenTypes.MODIFIERS);

            for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {
                final DetailAST modifier =
                        modifiers.findFirstToken(tokenType);
                if (modifier != null) {
                    log(modifier.getLineNo(), modifier.getColumnNo(),
                            MSG_KEY, modifier.getText());
                }
            }
        }
        else if (isInterfaceOrAnnotationMember(ast)) {
            processInterfaceOrAnnotation(ast);
        }
        else if (ast.getType() == TokenTypes.METHOD_DEF) {
            processMethods(ast);
        }
    }

    
    private void processInterfaceOrAnnotation(DetailAST ast) {
        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
        DetailAST modifier = modifiers.getFirstChild();
        while (modifier != null) {

            
            
            

            final int type = modifier.getType();
            if (type == TokenTypes.LITERAL_PUBLIC
                || type == TokenTypes.LITERAL_STATIC
                        && ast.getType() != TokenTypes.METHOD_DEF
                || type == TokenTypes.ABSTRACT
                || type == TokenTypes.FINAL) {
                log(modifier.getLineNo(), modifier.getColumnNo(),
                        MSG_KEY, modifier.getText());
                break;
            }

            modifier = modifier.getNextSibling();
        }
    }

    
    private void processMethods(DetailAST ast) {
        final DetailAST modifiers =
                        ast.findFirstToken(TokenTypes.MODIFIERS);
        
        boolean checkFinal =
            modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);
        
        DetailAST parent = ast.getParent();
        while (parent != null) {
            if (parent.getType() == TokenTypes.CLASS_DEF) {
                final DetailAST classModifiers =
                    parent.findFirstToken(TokenTypes.MODIFIERS);
                checkFinal |=
                    classModifiers.branchContains(TokenTypes.FINAL);
                break;
            }
            parent = parent.getParent();
        }
        if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {
            DetailAST modifier = modifiers.getFirstChild();
            while (modifier != null) {
                final int type = modifier.getType();
                if (type == TokenTypes.FINAL) {
                    log(modifier.getLineNo(), modifier.getColumnNo(),
                            MSG_KEY, modifier.getText());
                    break;
                }
                modifier = modifier.getNextSibling();
            }
        }
    }

    
    private static boolean isInterfaceOrAnnotationMember(DetailAST ast) {
        final DetailAST parentTypeDef = ast.getParent().getParent();
        return parentTypeDef.getType() == TokenTypes.INTERFACE_DEF
               || parentTypeDef.getType() == TokenTypes.ANNOTATION_DEF;
    }

    
    private static boolean isAnnotatedWithSafeVarargs(DetailAST methodDef) {
        boolean result = false;
        final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);
        for (DetailAST annotationNode : methodAnnotationsList) {
            if ("SafeVarargs".equals(annotationNode.getLastChild().getText())) {
                result = true;
                break;
            }
        }
        return result;
    }

    
    private static List<DetailAST> getMethodAnnotationsList(DetailAST methodDef) {
        final List<DetailAST> annotationsList = new ArrayList<>();
        final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);
        DetailAST modifier = modifiers.getFirstChild();
        while (modifier != null) {
            if (modifier.getType() == TokenTypes.ANNOTATION) {
                annotationsList.add(modifier);
            }
            modifier = modifier.getNextSibling();
        }
        return annotationsList;
    }
}

<code block>



















package com.puppycrawl.tools.checkstyle.checks.modifier;

import static com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.MSG_KEY;

import java.io.File;

import org.junit.Assert;
import org.junit.Test;

import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;

public class RedundantModifierTest
    extends BaseCheckTestSupport {
    @Test
    public void testIt() throws Exception {
        final DefaultConfiguration checkConfig =
            createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
            "54:12: " + getCheckMessage(MSG_KEY, "static"),
            "57:9: " + getCheckMessage(MSG_KEY, "public"),
            "63:9: " + getCheckMessage(MSG_KEY, "abstract"),
            "66:9: " + getCheckMessage(MSG_KEY, "public"),
            
            "72:9: " + getCheckMessage(MSG_KEY, "final"),
            "79:13: " + getCheckMessage(MSG_KEY, "final"),
            "88:12: " + getCheckMessage(MSG_KEY, "final"),
            "99:1: " + getCheckMessage(MSG_KEY, "abstract"),
            "116:5: " + getCheckMessage(MSG_KEY, "public"),
            "117:5: " + getCheckMessage(MSG_KEY, "final"),
            "118:5: " + getCheckMessage(MSG_KEY, "static"),
            "120:5: " + getCheckMessage(MSG_KEY, "public"),
            "121:5: " + getCheckMessage(MSG_KEY, "abstract"),
        };
        verify(checkConfig, getPath("InputModifier.java"), expected);
    }

    @Test
    public void testStaticMethodInInterface()
        throws Exception {
        final DefaultConfiguration checkConfig =
                createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
        };
        verify(checkConfig,
                new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
                        + "checkstyle/InputStaticModifierInInterface.java").getCanonicalPath(),
                expected);
    }

    @Test
    public void testFinalInInterface()
        throws Exception {
        final DefaultConfiguration checkConfig =
                createCheckConfig(RedundantModifierCheck.class);
        final String[] expected = {
            "3:9: " + getCheckMessage(MSG_KEY, "final"),
        };
        verify(checkConfig,
                new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
                        + "checkstyle/InputFinalInDefaultMethods.java").getCanonicalPath(),
                expected);
    }

    @Test
    public void testGetAcceptableTokens() {
        RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
        int[] actual = redundantModifierCheckObj.getAcceptableTokens();
        int[] expected = new int[] {
            TokenTypes.METHOD_DEF,
            TokenTypes.VARIABLE_DEF,
            TokenTypes.ANNOTATION_FIELD_DEF,
            TokenTypes.INTERFACE_DEF,
        };
        Assert.assertNotNull(actual);
        Assert.assertArrayEquals(expected, actual);
    }

    @Test
    public void testGetRequiredTokens() {
        RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
        int[] actual = redundantModifierCheckObj.getRequiredTokens();
        int[] expected = new int[] {};
        Assert.assertNotNull(actual);
        Assert.assertArrayEquals(expected, actual);
    }
}
