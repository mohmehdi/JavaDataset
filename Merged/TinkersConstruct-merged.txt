package tconstruct.tools;

import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumChatFormatting;

import tconstruct.library.modifiers.Modifier;
import tconstruct.library.modifiers.ModifierAspect;
import tconstruct.library.modifiers.ModifierNBT;
import tconstruct.library.utils.TagUtil;
import tconstruct.library.utils.Tags;
import tconstruct.library.utils.TinkerUtil;

public class RedstoneModifier extends Modifier {
  private final int max;

  public RedstoneModifier(int max) {
    super("Redstone");

    this.max = max;

    addItem(Items.redstone);
    addItem(Blocks.redstone_block, 9);

    addAspects(new ModifierAspect.MultiAspect(this, EnumChatFormatting.DARK_RED, 5, max, 1));
  }

  @Override
  public void updateNBT(NBTTagCompound modifierTag) {
    
  }

  @Override
  public void applyEffect(NBTTagCompound rootCompound, NBTTagCompound modifierTag) {
    ModifierNBT.IntegerNBT data = ModifierNBT.readInteger(modifierTag);

    NBTTagCompound tag = TagUtil.getToolTag(rootCompound);
    float speed = tag.getFloat(Tags.MININGSPEED);
    speed += data.current/10f;
    tag.setFloat(Tags.MININGSPEED, speed);
  }
}

<code block>
package tconstruct.library.mantle;

import com.google.common.collect.Lists;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;

import java.util.Collection;
import java.util.List;


public class RecipeMatchRegistry {
  protected final List<RecipeMatch> items = Lists.newArrayList();

  public RecipeMatch.Match matches(Collection<ItemStack> stacks) {
    return matches(stacks.toArray(new ItemStack[stacks.size()]));
  }

  
  public RecipeMatch.Match matches(ItemStack[] stacks) {
    for(RecipeMatch recipe : items) {
      RecipeMatch.Match match = recipe.matches(stacks);
      if(match != null) {
        return match;
      }
    }

    return null;
  }

  
  public void addItem(String oredictItem, int amountNeeded, int amountMatched) {
    items.add(new RecipeMatch.Oredict(oredictItem, amountNeeded));
  }

  
  public void addItem(String oredictItem) {
    addItem(oredictItem, 1, 1);
  }

  
  public void addItem(Block block, int amountMatched) {
    items.add(new RecipeMatch.Item(new ItemStack(block), 1, amountMatched));
  }

  
  public void addItem(Item item, int amountNeeded, int amountMatched) {
    items.add(new RecipeMatch.Item(new ItemStack(item), 1, amountMatched));
  }

  
  public void addItem(Item item) {
    addItem(item, 1, 1);
  }

  public void addRecipeMatch(RecipeMatch match) {
    items.add(match);
  }
}

<code block>
package tconstruct.library.mantle;

import com.google.common.collect.Lists;

import net.minecraft.item.ItemStack;
import net.minecraftforge.oredict.OreDictionary;

import java.util.List;

import tconstruct.library.TinkerRegistry;




public abstract class RecipeMatch {

  public abstract Match matches(ItemStack[] stacks);

  
  public static void removeMatch(ItemStack[] stacks, Match match) {
    for(ItemStack stack : match.stacks) {
      for(int i = 0; i < stacks.length; i++) {
        
        if(ItemStack.areItemsEqual(stack, stacks[i]) && ItemStack.areItemStackTagsEqual(stack, stacks[i])) {
          if(stacks[i].stackSize < stack.stackSize) {
            TinkerRegistry.log.error("RecipeMatch has incorrect stacksize! {}", stacks[i].toString());
            break;
          }
          else {
            stacks[i].stackSize -= stack.stackSize;
            if(stacks[i].stackSize == 0) {
              stacks[i] = null;
            }
          }
        }
      }
    }
  }

  
  public static class Item extends RecipeMatch {
    private final ItemStack template;
    private final int amountNeeded;
    private final int amountMatched;

    public Item(ItemStack template, int amountNeeded) {
      this(template, amountNeeded, 1);
    }

    
    public Item(ItemStack template, int amountNeeded, int amountMatched) {
      this.template = template;
      this.amountNeeded = amountNeeded;
      this.amountMatched = amountMatched;
    }

    @Override
    public Match matches(ItemStack[] stacks) {
      List<ItemStack> found = Lists.newLinkedList();
      int stillNeeded = amountNeeded;

      for(ItemStack stack : stacks) {
        if(OreDictionary.itemMatches(template, stack, false)) {
          
          ItemStack copy = stack.copy();
          copy.stackSize = Math.min(copy.stackSize, stillNeeded);
          found.add(copy);
          stillNeeded -= copy.stackSize;

          
          if(stillNeeded <= 0) {
            return new Match(found, amountMatched);
          }
        }
      }

      return null;
    }
  }

  
  public static class Oredict extends RecipeMatch {

    private final String oredictEntry; 
    private final int amountNeeded;
    private final int amountMatched;

    public Oredict(String oredictEntry, int amountNeeded) {
      this(oredictEntry, amountNeeded, 1);
    }

    public Oredict(String oredictEntry, int amountNeeded, int amountMatched) {
      this.oredictEntry = oredictEntry;
      this.amountNeeded = amountNeeded;
      this.amountMatched = amountMatched;
    }

    @Override
    public Match matches(ItemStack[] stacks) {
      List<ItemStack> found = Lists.newLinkedList();
      int stillNeeded = amountNeeded;

      for(ItemStack ore : OreDictionary.getOres(oredictEntry)) {
        for(ItemStack stack : stacks) {
          if(OreDictionary.itemMatches(ore, stack, false)) {
            
            ItemStack copy = stack.copy();
            copy.stackSize = Math.min(copy.stackSize, stillNeeded);
            found.add(copy);
            stillNeeded -= copy.stackSize;

            
            if(stillNeeded <= 0) {
              return new Match(found, amountMatched);
            }
          }
        }
      }

      return null;
    }
  }

  
  public static class Match {

    
    public List<ItemStack> stacks;

    
    public int amount;

    public Match(List<ItemStack> stacks, int amount) {
      this.stacks = stacks;
      this.amount = amount;
    }
  }
}

<code block>
package tconstruct.library.modifiers;

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

import tconstruct.library.mantle.RecipeMatch;

public interface IModifier {

  String getIdentifier();

  
  RecipeMatch.Match matches(ItemStack[] stacks);

  
  boolean canApply(ItemStack stack) throws ModifyException;

  
  void apply(ItemStack stack);

  
  void apply(NBTTagCompound root);

  
  void updateNBT(NBTTagCompound modifierTag);

  
  void applyEffect(NBTTagCompound rootCompound, NBTTagCompound modifierTag);

  
  String getTooltip(NBTTagCompound modifierTag);

  String getLocalizedName();

  
  @SideOnly(Side.CLIENT)
  boolean hasTexturePerMaterial();

}

<code block>
package tconstruct.library.modifiers;

import com.google.common.collect.Lists;

import com.sun.istack.internal.NotNull;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.util.StatCollector;

import java.util.Arrays;
import java.util.List;

import tconstruct.library.TinkerRegistry;
import tconstruct.library.mantle.RecipeMatch;
import tconstruct.library.mantle.RecipeMatchRegistry;
import tconstruct.library.utils.TagUtil;
import tconstruct.library.utils.TinkerUtil;

public abstract class Modifier implements IModifier {

  public static final String LOCALIZATION_STRING = "modifier.%s.name";

  public final String identifier;

  
  protected final RecipeMatchRegistry modifierItems = new RecipeMatchRegistry();
  protected final List<ModifierAspect> aspects = Lists.newLinkedList();

  public Modifier(@NotNull String identifier) {
    this.identifier = identifier;

    TinkerRegistry.registerModifier(this);
  }

  @Override
  public String getIdentifier() {
    return identifier;
  }

  public void addItem(String oredictItem) {
    modifierItems.addItem(oredictItem);
  }

  public void addItem(Item item) {
    modifierItems.addItem(item);
  }

  public void addItem(Block block, int count) {
    modifierItems.addItem(block, count);
  }

  public RecipeMatchRegistry getItemRegistry() {
    return modifierItems;
  }

  protected void addAspects(ModifierAspect... aspects) {
    this.aspects.addAll(Arrays.asList(aspects));
  }

  @Override
  public RecipeMatch.Match matches(ItemStack[] stacks) {
    return modifierItems.matches(stacks);
  }

  @Override
  public final boolean canApply(ItemStack stack) throws ModifyException {
    
    for(ModifierAspect aspect : aspects) {
      if(!aspect.canApply(stack)) {
        return false;
      }
    }

    return canApplyCustom(stack);
  }

  protected boolean canApplyCustom(ItemStack stack) {
    return true;
  }

  @Override
  public void apply(ItemStack stack) {
    NBTTagCompound root = TagUtil.getTagSafe(stack);
    apply(root);
    stack.setTagCompound(root);
  }

  @Override
  public void apply(NBTTagCompound root) {
    
    NBTTagList tagList;

    
    if(!TinkerUtil.hasModifier(root, getIdentifier())) {
      tagList = TagUtil.getBaseModifiersTagList(root);;
      tagList.appendTag(new NBTTagString(getIdentifier()));
      TagUtil.setBaseModifiersTagList(root, tagList);
    }

    
    NBTTagCompound modifierTag = new NBTTagCompound();
    tagList = TagUtil.getModifiersTagList(root);
    int index = TinkerUtil.getIndexInList(tagList, identifier);
    if(index >= 0) {
      modifierTag = tagList.getCompoundTagAt(index);
    }

    
    for(ModifierAspect aspect : aspects) {
      aspect.updateNBT(root, modifierTag);
    }

    updateNBT(modifierTag);

    
    if(!modifierTag.hasNoTags()) {
      
      ModifierNBT data = ModifierNBT.readTag(modifierTag);
      if(!identifier.equals(data.identifier)) {
        data.identifier = identifier;
        data.write(modifierTag);
      }
    }

    
    if(index >= 0) {
      tagList.set(index, modifierTag);
    }
    else {
      tagList.appendTag(modifierTag);
    }

    TagUtil.setModifiersTagList(root, tagList);

    applyEffect(root, modifierTag);
  }

  @Override
  public String getTooltip(NBTTagCompound modifierTag) {
    StringBuilder sb = new StringBuilder();

    ModifierNBT data = ModifierNBT.readTag(modifierTag);

    sb.append(getLocalizedName());
    if(data.level > 1) {
      sb.append(" ");
      sb.append(TinkerUtil.getRomanNumeral(data.level));
    }

    return sb.toString();
  }

  @Override
  public String getLocalizedName() {
    return StatCollector.translateToLocalFormatted(LOCALIZATION_STRING, identifier);
  }

  @Override
  public boolean hasTexturePerMaterial() {
    return false;
  }
}

<code block>
package tconstruct.tools;

import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumChatFormatting;

import tconstruct.library.modifiers.Modifier;
import tconstruct.library.modifiers.ModifierAspect;
import tconstruct.library.modifiers.ModifierNBT;
import tconstruct.library.utils.TagUtil;
import tconstruct.library.utils.Tags;
import tconstruct.library.utils.TinkerUtil;

public class RedstoneModifier extends Modifier {
  private final int max;

  public RedstoneModifier(int max) {
    super("Redstone");

    this.max = max;

    addItem(Items.redstone);
    addItem(Blocks.redstone_block, 1);

    addAspects(new ModifierAspect.MultiAspect(this, EnumChatFormatting.DARK_RED, 5, max, 1));
  }

  @Override
  public void updateNBT(NBTTagCompound modifierTag) {
    
  }

  @Override
  public void applyEffect(NBTTagCompound rootCompound, NBTTagCompound modifierTag) {
    ModifierNBT.IntegerNBT data = ModifierNBT.readInteger(modifierTag);

    NBTTagCompound tag = TagUtil.getToolTag(rootCompound);
    float speed = tag.getFloat(Tags.MININGSPEED);
    speed += data.current/10f;
    tag.setFloat(Tags.MININGSPEED, speed);
  }
}

<code block>
package tconstruct.library.modifiers;

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public interface IModifier {

  String getIdentifier();

  
  RecipeMatch.Match matches(ItemStack[] stacks);

  
  boolean canApply(ItemStack stack) throws ModifyException;

  
  void apply(ItemStack stack);

  
  void apply(NBTTagCompound root);

  
  void updateNBT(NBTTagCompound modifierTag);

  
  void applyEffect(NBTTagCompound rootCompound, NBTTagCompound modifierTag);

  
  String getTooltip(NBTTagCompound modifierTag);

  String getLocalizedName();

  
  @SideOnly(Side.CLIENT)
  boolean hasTexturePerMaterial();

}

<code block>
package tconstruct.library.modifiers;

import com.google.common.collect.Lists;

import net.minecraft.item.ItemStack;
import net.minecraftforge.oredict.OreDictionary;

import java.util.List;

import tconstruct.library.TinkerRegistry;




public abstract class RecipeMatch {

  public abstract Match matches(ItemStack[] stacks);

  
  public static void removeMatch(ItemStack[] stacks, Match match) {
    for(ItemStack stack : match.stacks) {
      for(int i = 0; i < stacks.length; i++) {
        
        if(ItemStack.areItemsEqual(stack, stacks[i]) && ItemStack.areItemStackTagsEqual(stack, stacks[i])) {
          if(stacks[i].stackSize < stack.stackSize) {
            TinkerRegistry.log.error("RecipeMatch has incorrect stacksize! {}", stacks[i].toString());
            break;
          }
          else {
            stacks[i].stackSize -= stack.stackSize;
            if(stacks[i].stackSize == 0) {
              stacks[i] = null;
            }
          }
        }
      }
    }
  }

  
  public static class Item extends RecipeMatch {
    private final ItemStack template;
    private final int amountNeeded;

    public Item(ItemStack template, int amountNeeded) {
      this.template = template;
      this.amountNeeded = amountNeeded;
    }

    @Override
    public Match matches(ItemStack[] stacks) {
      List<ItemStack> found = Lists.newLinkedList();
      int stillNeeded = amountNeeded;

      for(ItemStack stack : stacks) {
        if(OreDictionary.itemMatches(template, stack, false)) {
          
          ItemStack copy = stack.copy();
          copy.stackSize = Math.min(copy.stackSize, stillNeeded);
          found.add(copy);
          stillNeeded -= copy.stackSize;

          
          if(stillNeeded <= 0) {
            return new Match(found, 1);
          }
        }
      }

      return null;
    }
  }

  
  public static class Oredict extends RecipeMatch {

    private final String oredictEntry;
    private final int amountNeeded;

    public Oredict(String oredictEntry, int amountNeeded) {
      this.oredictEntry = oredictEntry;
      this.amountNeeded = amountNeeded;
    }

    @Override
    public Match matches(ItemStack[] stacks) {
      List<ItemStack> found = Lists.newLinkedList();
      int stillNeeded = amountNeeded;

      for(ItemStack ore : OreDictionary.getOres(oredictEntry)) {
        for(ItemStack stack : stacks) {
          if(OreDictionary.itemMatches(ore, stack, false)) {
            
            ItemStack copy = stack.copy();
            copy.stackSize = Math.min(copy.stackSize, stillNeeded);
            found.add(copy);
            stillNeeded -= copy.stackSize;

            
            if(stillNeeded <= 0) {
              return new Match(found, 1);
            }
          }
        }
      }

      return null;
    }
  }

  
  public static class Match {

    
    public List<ItemStack> stacks;

    
    public int amount;

    public Match(List<ItemStack> stacks, int amount) {
      this.stacks = stacks;
      this.amount = amount;
    }
  }
}

<code block>
package tconstruct.library.modifiers;

import com.google.common.collect.Lists;

import com.sun.istack.internal.NotNull;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.util.StatCollector;

import java.util.Arrays;
import java.util.List;

import tconstruct.library.TinkerRegistry;
import tconstruct.library.utils.TagUtil;
import tconstruct.library.utils.TinkerUtil;

public abstract class Modifier implements IModifier {

  public static final String LOCALIZATION_STRING = "modifier.%s.name";

  public final String identifier;
  public int requiredModifiers = 1;

  
  protected final List<RecipeMatch> modifierItems = Lists.newLinkedList();
  protected final List<ModifierAspect> aspects = Lists.newLinkedList();

  public Modifier(@NotNull String identifier) {
    this.identifier = identifier;

    TinkerRegistry.registerModifier(this);
  }

  @Override
  public String getIdentifier() {
    return identifier;
  }

  public void addItem(String oredictItem, int count) {
    modifierItems.add(new RecipeMatch.Oredict(oredictItem, count));
  }

  public void addItem(String oredictItem) {
    addItem(oredictItem, 1);
  }

  public void addItem(Item item, int count) {
    modifierItems.add(new RecipeMatch.Item(new ItemStack(item), count));
  }

  public void addItem(Block block, int count) {
    modifierItems.add(new RecipeMatch.Item(new ItemStack(block), count));
  }

  public void addItem(Item item) {
    addItem(item, 1);
  }

  protected void addAspects(ModifierAspect... aspects) {
    this.aspects.addAll(Arrays.asList(aspects));
  }

  @Override
  public RecipeMatch.Match matches(ItemStack[] stacks) {
    for(RecipeMatch recipe : modifierItems) {
      RecipeMatch.Match match = recipe.matches(stacks);
      if(match != null) {
        return match;
      }
    }

    return null;
  }

  @Override
  public final boolean canApply(ItemStack stack) throws ModifyException {
    
    for(ModifierAspect aspect : aspects) {
      if(!aspect.canApply(stack)) {
        return false;
      }
    }

    return canApplyCustom(stack);
  }

  protected boolean canApplyCustom(ItemStack stack) {
    return true;
  }

  @Override
  public void apply(ItemStack stack) {
    NBTTagCompound root = TagUtil.getTagSafe(stack);
    apply(root);
    stack.setTagCompound(root);
  }

  @Override
  public void apply(NBTTagCompound root) {
    
    NBTTagList tagList;

    
    if(!TinkerUtil.hasModifier(root, getIdentifier())) {
      tagList = TagUtil.getBaseModifiersTagList(root);;
      tagList.appendTag(new NBTTagString(getIdentifier()));
      TagUtil.setBaseModifiersTagList(root, tagList);
    }

    
    NBTTagCompound modifierTag = new NBTTagCompound();
    tagList = TagUtil.getModifiersTagList(root);
    int index = TinkerUtil.getIndexInList(tagList, identifier);
    if(index >= 0) {
      modifierTag = tagList.getCompoundTagAt(index);
    }

    
    for(ModifierAspect aspect : aspects) {
      aspect.updateNBT(root, modifierTag);
    }

    updateNBT(modifierTag);

    
    if(!modifierTag.hasNoTags()) {
      
      ModifierNBT data = ModifierNBT.readTag(modifierTag);
      if(!identifier.equals(data.identifier)) {
        data.identifier = identifier;
        data.write(modifierTag);
      }
    }

    
    if(index >= 0) {
      tagList.set(index, modifierTag);
    }
    else {
      tagList.appendTag(modifierTag);
    }

    TagUtil.setModifiersTagList(root, tagList);

    applyEffect(root, modifierTag);
  }

  @Override
  public String getTooltip(NBTTagCompound modifierTag) {
    StringBuilder sb = new StringBuilder();

    ModifierNBT data = ModifierNBT.readTag(modifierTag);

    sb.append(getLocalizedName());
    if(data.level > 1) {
      sb.append(" ");
      sb.append(TinkerUtil.getRomanNumeral(data.level));
    }

    return sb.toString();
  }

  @Override
  public String getLocalizedName() {
    return StatCollector.translateToLocalFormatted(LOCALIZATION_STRING, identifier);
  }

  @Override
  public boolean hasTexturePerMaterial() {
    return false;
  }
}
