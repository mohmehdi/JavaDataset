package net.osmand.plus.views;

import gnu.trove.list.array.TIntArrayList;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import net.osmand.Location;
import net.osmand.data.QuadRect;
import net.osmand.data.RotatedTileBox;
import net.osmand.plus.R;
import net.osmand.plus.render.OsmandRenderer;
import net.osmand.plus.render.OsmandRenderer.RenderingContext;
import net.osmand.plus.routing.RouteDirectionInfo;
import net.osmand.plus.routing.RoutingHelper;
import net.osmand.render.RenderingRuleSearchRequest;
import net.osmand.render.RenderingRulesStorage;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.util.FloatMath;

public class RouteLayer extends OsmandMapLayer {
	
	private OsmandMapTileView view;
	
	private final RoutingHelper helper;
	private List<Location> points = new ArrayList<Location>();
	private List<Location> actionPoints = new ArrayList<Location>();
	private Paint paint;
	private Paint actionPaint;
	private Paint paint2;
	private boolean isPaint2;
	private Paint shadowPaint;
	private boolean isShadowPaint;
	private Paint paint_1;
	private boolean isPaint_1;
	private int cachedHash;

	private Path path;


	private Bitmap coloredArrowUp;
	private Bitmap actionArrow;

	private Paint paintIcon;
	private Paint paintIconAction;

	private OsmandRenderer osmandRenderer;


	public RouteLayer(RoutingHelper helper){
		this.helper = helper;
	}
	

	private void initUI() {
		paint = new Paint();
		paint.setStyle(Style.STROKE);
		paint.setAntiAlias(true);
		paint.setStrokeCap(Cap.ROUND);
		paint.setStrokeJoin(Join.ROUND);
		actionArrow = BitmapFactory.decodeResource(view.getResources(), R.drawable.map_action_arrow, null);
		
		actionPaint = new Paint();
		actionPaint.setStyle(Style.STROKE);
		actionPaint.setAntiAlias(true);
		actionPaint.setStrokeCap(Cap.BUTT);
		actionPaint.setStrokeJoin(Join.ROUND);
		actionPaint.setStrokeWidth(7 * view.getScaleCoefficient());
		actionPaint.setColor(Color.WHITE);
		path = new Path();
		
		paintIcon = new Paint();
		paintIcon.setFilterBitmap(true);
		paintIcon.setAntiAlias(true);
		paintIcon.setColor(Color.BLACK);
		paintIcon.setStrokeWidth(3);
		

		paintIconAction = new Paint();
		paintIconAction.setFilterBitmap(true);
		paintIconAction.setAntiAlias(true);
		
	}
	
	@Override
	public void initLayer(OsmandMapTileView view) {
		this.view = view;
		osmandRenderer = view.getApplication().getResourceManager().getRenderer().getRenderer();
		initUI();
	}

	
	private void updatePaints(DrawSettings nightMode, RotatedTileBox tileBox){
		RenderingRulesStorage rrs = view.getApplication().getRendererRegistry().getCurrentSelectedRenderer();
		final boolean isNight = nightMode != null && nightMode.isNightMode();
		int hsh = calculateHash(rrs, isNight, tileBox.getMapDensity());
		if (hsh != cachedHash) {
			cachedHash = hsh;

			if (rrs != null) {
				RenderingRuleSearchRequest req = new RenderingRuleSearchRequest(rrs);
				req.setBooleanFilter(rrs.PROPS.R_NIGHT_MODE, isNight);
				if (req.searchRenderingAttribute("route")) {
					RenderingContext rc = new OsmandRenderer.RenderingContext(view.getContext());
					rc.setDensityValue((float) tileBox.getMapDensity());

					osmandRenderer.updatePaint(req, paint, 0, false, rc);
					if(paint.getStrokeWidth() == 0) {
						paint.setStrokeWidth(12 * view.getDensity());
					}
					osmandRenderer.updatePaint(req, actionPaint, 2, false, rc);
					paintIconAction.setColorFilter(new PorterDuffColorFilter(actionPaint.getColor(), Mode.MULTIPLY));
					
					isPaint2 = osmandRenderer.updatePaint(req, paint2, 1, false, rc);
					isPaint_1 = osmandRenderer.updatePaint(req, paint_1, -1, false, rc);
					isShadowPaint = req.isSpecified(rrs.PROPS.R_SHADOW_RADIUS);
					if(isShadowPaint) {
						ColorFilter cf = new PorterDuffColorFilter(req.getIntPropertyValue(rrs.PROPS.R_SHADOW_COLOR), Mode.SRC_IN);
						shadowPaint.setColorFilter(cf);
						shadowPaint.setStrokeWidth(paint.getStrokeWidth() + 2 * rc.getComplexValue(req, rrs.PROPS.R_SHADOW_RADIUS));
					}
				} else {
					System.err.println("Rendering attribute route is not found !");
					paint.setStrokeWidth(12 * view.getDensity());
				}
				actionPaint.setStrokeWidth(7 * view.getScaleCoefficient());
			}
		}
	}
	
	
	private int calculateHash(Object... o) {
		return Arrays.hashCode(o);
	}
	
	@Override
	public void onPrepareBufferImage(Canvas canvas, RotatedTileBox tileBox, DrawSettings settings) {
		path.reset();
		if (helper.getFinalLocation() != null && helper.getRoute().isCalculated()) {
			updatePaints(settings, tileBox);
			if(coloredArrowUp == null) {
				Bitmap originalArrowUp = BitmapFactory.decodeResource(view.getResources(), R.drawable.h_arrow, null);
				coloredArrowUp = originalArrowUp;


			}
			int w = tileBox.getPixWidth();
			int h = tileBox.getPixHeight();
			Location lastProjection = helper.getLastProjection();
			final RotatedTileBox cp ;
			if(lastProjection != null &&
					tileBox.containsLatLon(lastProjection.getLatitude(), lastProjection.getLongitude())){
				cp = tileBox.copy();
				cp.increasePixelDimensions(w /2, h);
			} else {
				cp = tileBox;
			}

			final QuadRect latlonRect = cp.getLatLonBounds();
			double topLatitude = latlonRect.top;
			double leftLongitude = latlonRect.left;
			double bottomLatitude = latlonRect.bottom;
			double rightLongitude = latlonRect.right;
			double lat = topLatitude - bottomLatitude + 0.1;
			double lon = rightLongitude - leftLongitude + 0.1;
			drawLocations(tileBox, canvas, topLatitude + lat, leftLongitude - lon, bottomLatitude - lat, rightLongitude + lon);
		}
	
	}
	
	@Override
	public void onDraw(Canvas canvas, RotatedTileBox tileBox, DrawSettings settings) {}

	private void drawAction(RotatedTileBox tb, Canvas canvas) {
		if (actionPoints.size() > 0) {
			canvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			try {
				Path pth = new Path();
				Matrix matrix = new Matrix();
				boolean first = true;
				int x = 0, px = 0, py = 0, y = 0;
				for (int i = 0; i < actionPoints.size(); i++) {
					Location o = actionPoints.get(i);
					if (o == null) {
						canvas.drawPath(pth, actionPaint);
						double angleRad = Math.atan2(y - py, x - px);
						double angle = (angleRad * 180 / Math.PI) + 90f;
						double distSegment = FloatMath.sqrt((y - py) * (y - py) + (x - px) * (x - px));
						if (distSegment == 0) {
							continue;
						}

						float pdx = x - px;
						float pdy = y - py;
						matrix.reset();
						matrix.postTranslate(0, -actionArrow.getHeight() / 2);
						matrix.postRotate((float) angle, actionArrow.getWidth() / 2, 0);
						matrix.postTranslate(px + pdx - actionArrow.getWidth() / 2, py + pdy);
						canvas.drawBitmap(actionArrow, matrix, paintIconAction);
						first = true;
					} else {
						px = x;
						py = y;
						x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());
						y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());
						if (first) {
							pth.reset();
							pth.moveTo(x, y);
							first = false;
						} else {
							pth.lineTo(x, y);
						}
					}
				}

			} finally {
				canvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			}
		}
	}

	private void drawSegment(RotatedTileBox tb, Canvas canvas) {
		if (points.size() > 0) {
			canvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			try {
				TIntArrayList tx = new TIntArrayList();
				TIntArrayList ty = new TIntArrayList();
				for (int i = 0; i < points.size(); i++) {
					Location o = points.get(i);
					int x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());
					int y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());
					tx.add(x);
					ty.add(y);
				}
				calculatePath(tb, tx, ty, path);

				if (isPaint_1) {
					canvas.drawPath(path, paint_1);
				}
				if (isShadowPaint) {
					canvas.drawPath(path, shadowPaint);
				}
				canvas.drawPath(path, paint);
				if (isPaint2) {
					canvas.drawPath(path, paint2);
				}
				if (tb.getZoomAnimation() == 0) {
					TIntArrayList lst = new TIntArrayList(50);
					calculateSplitPaths(tb, tx, ty, lst);
					drawArrowsOverPath(canvas, lst, coloredArrowUp);
				}
			} finally {
				canvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			}
		}
	}


	private void drawArrowsOverPath(Canvas canvas, TIntArrayList lst, Bitmap arrow) {
		float pxStep = arrow.getHeight() * 4f;
		Matrix matrix = new Matrix();
		float dist = 0;
		for (int i = 0; i < lst.size(); i += 4) {
			int px = lst.get(i);
			int py = lst.get(i + 1);
			int x = lst.get(i + 2);
			int y = lst.get(i + 3);
			float angleRad = (float) Math.atan2(y - py, x - px);
			float angle = (float) (angleRad * 180 / Math.PI) + 90f;
			float distSegment = FloatMath.sqrt((y - py) * (y - py) + (x - px) * (x - px));
			if(distSegment == 0) {
				continue;
			}
			int len = (int) (distSegment / pxStep);
			if (len > 0) {
				float pdx = ((x - px) / len);
				float pdy = ((y - py) / len);
				for (int k = 1; k <= len; k++) {
					matrix.reset();
					matrix.postTranslate(0, -arrow.getHeight() / 2);
					matrix.postRotate(angle, arrow.getWidth() / 2, 0);
					matrix.postTranslate(px + k * pdx- arrow.getWidth() / 2 , py + pdy * k);
					canvas.drawBitmap(arrow, matrix, paintIcon);
					dist = 0;
				}
			} else {
				if(dist > pxStep) {
					matrix.reset();
					matrix.postTranslate(0, -arrow.getHeight() / 2);
					matrix.postRotate(angle, arrow.getWidth() / 2, 0);
					matrix.postTranslate(px + (x - px) / 2 - arrow.getWidth() / 2, py + (y - py) / 2);
					canvas.drawBitmap(arrow, matrix, paintIcon);
					dist = 0;
				} else {
					dist += distSegment;
				}
			}
		}
	}
	
	public void drawLocations(RotatedTileBox tb, Canvas canvas, double topLatitude, double leftLongitude, double bottomLatitude, double rightLongitude) {
		points.clear();
		actionPoints.clear();
		boolean previousVisible = false;
		Location lastProjection = helper.getLastProjection();
		if (lastProjection != null) {
			if (leftLongitude <= lastProjection.getLongitude() && lastProjection.getLongitude() <= rightLongitude
					&& bottomLatitude <= lastProjection.getLatitude() && lastProjection.getLatitude() <= topLatitude) {
				points.add(lastProjection);
				previousVisible = true;
			}
		}
		List<Location> routeNodes = helper.getRoute().getRouteLocations();
		int cd = helper.getRoute().getCurrentRoute();
		List<RouteDirectionInfo> rd = helper.getRouteDirections();
		Iterator<RouteDirectionInfo> it = rd.iterator();
		for (int i = 0; i < routeNodes.size(); i++) {
			Location ls = routeNodes.get(i);
			if (leftLongitude <= ls.getLongitude() && ls.getLongitude() <= rightLongitude && bottomLatitude <= ls.getLatitude()
					&& ls.getLatitude() <= topLatitude) {
				points.add(ls);
				
				if (!previousVisible) {
					if (i > 0) {
						points.add(0, routeNodes.get(i - 1));
					} else if (lastProjection != null) {
						points.add(0, lastProjection);
					}
				}
				previousVisible = true;
			} else if (previousVisible) {
				points.add(ls);
				drawSegment(tb, canvas);
				previousVisible = false;
				points.clear();
			}
		}
		drawSegment(tb, canvas);
		if (tb.getZoom() >= 14) {
			calculateActionPoints(topLatitude, leftLongitude, bottomLatitude, rightLongitude, lastProjection,
					routeNodes, cd, it, tb.getZoom());
			drawAction(tb, canvas);
		}
	}


	private void calculateActionPoints(double topLatitude, double leftLongitude, double bottomLatitude,
			double rightLongitude, Location lastProjection, List<Location> routeNodes, int cd,
			Iterator<RouteDirectionInfo> it, int zoom) {
		RouteDirectionInfo nf = null;
		
		double DISTANCE_ACTION = 35;
		if(zoom >= 17) {
			DISTANCE_ACTION = 15;
		} else if (zoom == 15) {
			DISTANCE_ACTION = 70;
		} else if (zoom < 15) {
			DISTANCE_ACTION = 110;
		}
		double actionDist = 0;
		Location previousAction = null; 
		actionPoints.clear();
		int prevFinishPoint = -2;
		for (int i = 0; i < routeNodes.size(); i++) {
			Location ls = routeNodes.get(i);
			if(nf != null) {
				int pnt = nf.routeEndPointOffset == 0 ? nf.routePointOffset : nf.routeEndPointOffset;
				if(pnt < i + cd ) {
					nf = null;
				}
			}
			while (nf == null && it.hasNext()) {
				nf = it.next();
				int pnt = nf.routeEndPointOffset == 0 ? nf.routePointOffset : nf.routeEndPointOffset;
				if (pnt < i + cd) {
					nf = null;
				}
			}
			boolean action = nf != null && (nf.routePointOffset == i + cd ||
					(nf.routePointOffset <= i + cd && i + cd  <= nf.routeEndPointOffset));
			if(!action && previousAction == null) {
				continue;
			}
			boolean visible = leftLongitude <= ls.getLongitude() && ls.getLongitude() <= rightLongitude && bottomLatitude <= ls.getLatitude()
					&& ls.getLatitude() <= topLatitude;
			if(!action) {
				if(previousAction != null) {
					float dist = ls.distanceTo(previousAction);
					actionDist += dist;
					if(actionDist >= DISTANCE_ACTION) {
						actionPoints.add(calculateProjection(1 - (actionDist - DISTANCE_ACTION) / dist, previousAction, ls));
						actionPoints.add(null);
						prevFinishPoint = i;
						previousAction = null;
						actionDist = 0;
					} else {
						actionPoints.add(ls);
						previousAction = ls;
					}
				}
			} else {

				if(visible) {

					if (previousAction == null) {

						int ind = actionPoints.size();
						Location lprevious = ls;
						double dist = 0;
						for (int k = i - 1; k >= -1; k--) {
							Location l = k == -1 ? lastProjection : routeNodes.get(k);
							float loc = lprevious.distanceTo(l);
							if(prevFinishPoint == k) {
								if(ind >= 2) {
									actionPoints.remove(ind - 2);
									actionPoints.remove(ind - 2);
								}
								prevFinishPoint = -2;
								break;
							}
							dist += loc;
							if (dist >= DISTANCE_ACTION) {
								if(loc > 1) {
									actionPoints.add(ind, calculateProjection(1 - (dist - DISTANCE_ACTION) / loc, lprevious, l));
								}
								break;
							} else {
								actionPoints.add(ind, l);
								lprevious = l;
							}
							
						}
					}
					actionPoints.add(ls);
					previousAction = ls;
					actionDist = 0;
				}
			}
		}
		if(previousAction != null) {
			actionPoints.add(null);
		}
	}
	
	private Location calculateProjection(double part, Location lp, Location l) {
		Location p = new Location(l);
		p.setLatitude(lp.getLatitude() + part * (l.getLatitude() - lp.getLatitude()));
		p.setLongitude(lp.getLongitude() + part * (l.getLongitude() - lp.getLongitude()));
		return p;
	}


	public RoutingHelper getHelper() {
		return helper;
	}

	

	public Path getPath() {
		return path;
	}

	
	@Override
	public void destroyLayer() {
		
	}
	@Override
	public boolean drawInScreenPixels() {
		return false;
	}

	@Override
	public boolean onLongPressEvent(PointF point, RotatedTileBox tileBox) {
		return false;
	}

	@Override
	public boolean onSingleTap(PointF point, RotatedTileBox tileBox) {
		return false;
	}




}

<code block>
package net.osmand.plus.views;

import gnu.trove.list.array.TIntArrayList;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import net.osmand.Location;
import net.osmand.data.QuadRect;
import net.osmand.data.RotatedTileBox;
import net.osmand.plus.R;
import net.osmand.plus.render.OsmandRenderer;
import net.osmand.plus.render.OsmandRenderer.RenderingContext;
import net.osmand.plus.routing.RouteDirectionInfo;
import net.osmand.plus.routing.RoutingHelper;
import net.osmand.render.RenderingRuleSearchRequest;
import net.osmand.render.RenderingRulesStorage;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.util.FloatMath;

public class RouteLayer extends OsmandMapLayer {
	
	private OsmandMapTileView view;
	
	private final RoutingHelper helper;
	private List<Location> points = new ArrayList<Location>();
	private List<Location> actionPoints = new ArrayList<Location>();
	private Paint paint;
	private Paint actionPaint;
	private Paint paint2;
	private boolean isPaint2;
	private Paint shadowPaint;
	private boolean isShadowPaint;
	private Paint paint_1;
	private boolean isPaint_1;
	private int cachedHash;

	private Path path;


	private Bitmap coloredArrowUp;
	private Bitmap actionArrow;

	private Paint paintIcon;
	private Paint paintIconAction;

	private OsmandRenderer osmandRenderer;


	public RouteLayer(RoutingHelper helper){
		this.helper = helper;
	}
	

	private void initUI() {
		paint = new Paint();
		paint.setStyle(Style.STROKE);
		paint.setAntiAlias(true);
		paint.setStrokeCap(Cap.ROUND);
		paint.setStrokeJoin(Join.ROUND);
		actionArrow = BitmapFactory.decodeResource(view.getResources(), R.drawable.map_action_arrow, null);
		
		actionPaint = new Paint();
		actionPaint.setStyle(Style.STROKE);
		actionPaint.setAntiAlias(true);
		actionPaint.setStrokeCap(Cap.BUTT);
		actionPaint.setStrokeJoin(Join.ROUND);
		actionPaint.setStrokeWidth(7 * view.getScaleCoefficient());
		actionPaint.setColor(Color.WHITE);
		path = new Path();
		
		paintIcon = new Paint();
		paintIcon.setFilterBitmap(true);
		paintIcon.setAntiAlias(true);
		paintIcon.setColor(Color.BLACK);
		paintIcon.setStrokeWidth(3);
		

		paintIconAction = new Paint();
		paintIconAction.setFilterBitmap(true);
		paintIconAction.setAntiAlias(true);
		
	}
	
	@Override
	public void initLayer(OsmandMapTileView view) {
		this.view = view;
		osmandRenderer = view.getApplication().getResourceManager().getRenderer().getRenderer();
		initUI();
	}

	
	private void updatePaints(DrawSettings nightMode, RotatedTileBox tileBox){
		RenderingRulesStorage rrs = view.getApplication().getRendererRegistry().getCurrentSelectedRenderer();
		final boolean isNight = nightMode != null && nightMode.isNightMode();
		int hsh = calculateHash(rrs, isNight, tileBox.getMapDensity());
		if (hsh != cachedHash) {
			cachedHash = hsh;

			if (rrs != null) {
				RenderingRuleSearchRequest req = new RenderingRuleSearchRequest(rrs);
				req.setBooleanFilter(rrs.PROPS.R_NIGHT_MODE, isNight);
				if (req.searchRenderingAttribute("route")) {
					RenderingContext rc = new OsmandRenderer.RenderingContext(view.getContext());
					rc.setDensityValue((float) tileBox.getMapDensity());

					osmandRenderer.updatePaint(req, paint, 0, false, rc);
					if(paint.getStrokeWidth() == 0) {
						paint.setStrokeWidth(12 * view.getDensity());
					}
					osmandRenderer.updatePaint(req, actionPaint, 2, false, rc);
					paintIconAction.setColorFilter(new PorterDuffColorFilter(actionPaint.getColor(), Mode.MULTIPLY));
					
					isPaint2 = osmandRenderer.updatePaint(req, paint2, 1, false, rc);
					isPaint_1 = osmandRenderer.updatePaint(req, paint_1, -1, false, rc);
					isShadowPaint = req.isSpecified(rrs.PROPS.R_SHADOW_RADIUS);
					if(isShadowPaint) {
						ColorFilter cf = new PorterDuffColorFilter(req.getIntPropertyValue(rrs.PROPS.R_SHADOW_COLOR), Mode.SRC_IN);
						shadowPaint.setColorFilter(cf);
						shadowPaint.setStrokeWidth(paint.getStrokeWidth() + 2 * rc.getComplexValue(req, rrs.PROPS.R_SHADOW_RADIUS));
					}
				} else {
					System.err.println("Rendering attribute route is not found !");
					paint.setStrokeWidth(12 * view.getDensity());
				}
				actionPaint.setStrokeWidth(7 * view.getScaleCoefficient());
			}
		}
	}
	
	
	private int calculateHash(Object... o) {
		return Arrays.hashCode(o);
	}
	
	@Override
	public void onPrepareBufferImage(Canvas canvas, RotatedTileBox tileBox, DrawSettings settings) {
		path.reset();
		if (helper.getFinalLocation() != null && helper.getRoute().isCalculated()) {
			updatePaints(settings, tileBox);
			if(coloredArrowUp == null) {
				Bitmap originalArrowUp = BitmapFactory.decodeResource(view.getResources(), R.drawable.h_arrow, null);
				coloredArrowUp = originalArrowUp;


			}
			int w = tileBox.getPixWidth();
			int h = tileBox.getPixHeight();
			Location lastProjection = helper.getLastProjection();
			final RotatedTileBox cp ;
			if(lastProjection != null &&
					tileBox.containsLatLon(lastProjection.getLatitude(), lastProjection.getLongitude())){
				cp = tileBox.copy();
				cp.increasePixelDimensions(w /2, h);
			} else {
				cp = tileBox;
			}

			final QuadRect latlonRect = cp.getLatLonBounds();
			double topLatitude = latlonRect.top;
			double leftLongitude = latlonRect.left;
			double bottomLatitude = latlonRect.bottom;
			double rightLongitude = latlonRect.right;
			double lat = topLatitude - bottomLatitude + 0.1;
			double lon = rightLongitude - leftLongitude + 0.1;
			drawLocations(tileBox, canvas, topLatitude + lat, leftLongitude - lon, bottomLatitude - lat, rightLongitude + lon);
		}
	
	}
	
	@Override
	public void onDraw(Canvas canvas, RotatedTileBox tileBox, DrawSettings settings) {}

	private void drawAction(RotatedTileBox tb, Canvas canvas) {
		if (actionPoints.size() > 0) {
			canvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			try {
				Path pth = new Path();
				Matrix matrix = new Matrix();
				boolean first = true;
				int x = 0, px = 0, py = 0, y = 0;
				for (int i = 0; i < actionPoints.size(); i++) {
					Location o = actionPoints.get(i);
					if (o == null) {
						first = true;
						canvas.drawPath(pth, actionPaint);
						double angleRad = Math.atan2(y - py, x - px);
						double angle = (angleRad * 180 / Math.PI) + 90f;
						double distSegment = FloatMath.sqrt((y - py) * (y - py) + (x - px) * (x - px));
						if (distSegment == 0) {
							continue;
						}

						float pdx = x - px;
						float pdy = y - py;
						matrix.reset();
						matrix.postTranslate(0, -actionArrow.getHeight() / 2);
						matrix.postRotate((float) angle, actionArrow.getWidth() / 2, 0);
						matrix.postTranslate(px + pdx - actionArrow.getWidth() / 2, py + pdy);
						canvas.drawBitmap(actionArrow, matrix, paintIconAction);
					} else {
						px = x;
						py = y;
						x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());
						y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());
						if (first) {
							pth.reset();
							pth.moveTo(x, y);
							first = false;
						} else {
							pth.lineTo(x, y);
						}
					}
				}

			} finally {
				canvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			}
		}
	}

	private void drawSegment(RotatedTileBox tb, Canvas canvas) {
		if (points.size() > 0) {
			canvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			try {
				TIntArrayList tx = new TIntArrayList();
				TIntArrayList ty = new TIntArrayList();
				for (int i = 0; i < points.size(); i++) {
					Location o = points.get(i);
					int x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());
					int y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());
					tx.add(x);
					ty.add(y);
				}
				calculatePath(tb, tx, ty, path);

				if (isPaint_1) {
					canvas.drawPath(path, paint_1);
				}
				if (isShadowPaint) {
					canvas.drawPath(path, shadowPaint);
				}
				canvas.drawPath(path, paint);
				if (isPaint2) {
					canvas.drawPath(path, paint2);
				}
				if (tb.getZoomAnimation() == 0) {
					TIntArrayList lst = new TIntArrayList(50);
					calculateSplitPaths(tb, tx, ty, lst);
					drawArrowsOverPath(canvas, lst, coloredArrowUp);
				}
			} finally {
				canvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());
			}
		}
	}


	private void drawArrowsOverPath(Canvas canvas, TIntArrayList lst, Bitmap arrow) {
		float pxStep = arrow.getHeight() * 4f;
		Matrix matrix = new Matrix();
		float dist = 0;
		for (int i = 0; i < lst.size(); i += 4) {
			int px = lst.get(i);
			int py = lst.get(i + 1);
			int x = lst.get(i + 2);
			int y = lst.get(i + 3);
			float angleRad = (float) Math.atan2(y - py, x - px);
			float angle = (float) (angleRad * 180 / Math.PI) + 90f;
			float distSegment = FloatMath.sqrt((y - py) * (y - py) + (x - px) * (x - px));
			if(distSegment == 0) {
				continue;
			}
			int len = (int) (distSegment / pxStep);
			if (len > 0) {
				float pdx = ((x - px) / len);
				float pdy = ((y - py) / len);
				for (int k = 1; k <= len; k++) {
					matrix.reset();
					matrix.postTranslate(0, -arrow.getHeight() / 2);
					matrix.postRotate(angle, arrow.getWidth() / 2, 0);
					matrix.postTranslate(px + k * pdx- arrow.getWidth() / 2 , py + pdy * k);
					canvas.drawBitmap(arrow, matrix, paintIcon);
					dist = 0;
				}
			} else {
				if(dist > pxStep) {
					matrix.reset();
					matrix.postTranslate(0, -arrow.getHeight() / 2);
					matrix.postRotate(angle, arrow.getWidth() / 2, 0);
					matrix.postTranslate(px + (x - px) / 2 - arrow.getWidth() / 2, py + (y - py) / 2);
					canvas.drawBitmap(arrow, matrix, paintIcon);
					dist = 0;
				} else {
					dist += distSegment;
				}
			}
		}
	}
	
	public void drawLocations(RotatedTileBox tb, Canvas canvas, double topLatitude, double leftLongitude, double bottomLatitude, double rightLongitude) {
		points.clear();
		actionPoints.clear();
		boolean previousVisible = false;
		Location lastProjection = helper.getLastProjection();
		if (lastProjection != null) {
			if (leftLongitude <= lastProjection.getLongitude() && lastProjection.getLongitude() <= rightLongitude
					&& bottomLatitude <= lastProjection.getLatitude() && lastProjection.getLatitude() <= topLatitude) {
				points.add(lastProjection);
				previousVisible = true;
			}
		}
		List<Location> routeNodes = helper.getRoute().getRouteLocations();
		int cd = helper.getRoute().getCurrentRoute();
		List<RouteDirectionInfo> rd = helper.getRouteDirections();
		Iterator<RouteDirectionInfo> it = rd.iterator();
		for (int i = 0; i < routeNodes.size(); i++) {
			Location ls = routeNodes.get(i);
			if (leftLongitude <= ls.getLongitude() && ls.getLongitude() <= rightLongitude && bottomLatitude <= ls.getLatitude()
					&& ls.getLatitude() <= topLatitude) {
				points.add(ls);
				
				if (!previousVisible) {
					if (i > 0) {
						points.add(0, routeNodes.get(i - 1));
					} else if (lastProjection != null) {
						points.add(0, lastProjection);
					}
				}
				previousVisible = true;
			} else if (previousVisible) {
				points.add(ls);
				drawSegment(tb, canvas);
				previousVisible = false;
				points.clear();
			}
		}
		drawSegment(tb, canvas);
		if (tb.getZoom() >= 14) {
			calculateActionPoints(topLatitude, leftLongitude, bottomLatitude, rightLongitude, lastProjection,
					routeNodes, cd, it, tb.getZoom());
			drawAction(tb, canvas);
		}
	}


	private void calculateActionPoints(double topLatitude, double leftLongitude, double bottomLatitude,
			double rightLongitude, Location lastProjection, List<Location> routeNodes, int cd,
			Iterator<RouteDirectionInfo> it, int zoom) {
		RouteDirectionInfo nf = null;
		
		double DISTANCE_ACTION = 35;
		if(zoom >= 17) {
			DISTANCE_ACTION = 15;
		} else if (zoom == 15) {
			DISTANCE_ACTION = 70;
		} else if (zoom < 15) {
			DISTANCE_ACTION = 110;
		}
		double actionDist = 0;
		Location previousAction = null; 
		actionPoints.clear();
		int prevFinishPoint = -1;
		for (int routePoint = 0; routePoint < routeNodes.size(); routePoint++) {
			Location loc = routeNodes.get(routePoint);
			if(nf != null) {
				int pnt = nf.routeEndPointOffset == 0 ? nf.routePointOffset : nf.routeEndPointOffset;
				if(pnt < routePoint + cd ) {
					nf = null;
				}
			}
			while (nf == null && it.hasNext()) {
				nf = it.next();
				int pnt = nf.routeEndPointOffset == 0 ? nf.routePointOffset : nf.routeEndPointOffset;
				if (pnt < routePoint + cd) {
					nf = null;
				}
			}
			boolean action = nf != null && (nf.routePointOffset == routePoint + cd ||
					(nf.routePointOffset <= routePoint + cd && routePoint + cd  <= nf.routeEndPointOffset));
			if(!action && previousAction == null) {

				continue;
			}
			boolean visible = leftLongitude <= loc.getLongitude() && loc.getLongitude() <= rightLongitude && bottomLatitude <= loc.getLatitude()
					&& loc.getLatitude() <= topLatitude;
			if(action && !visible && previousAction == null) {
				continue;
			}
			if (!action) {

				float dist = loc.distanceTo(previousAction);
				actionDist += dist;
				if (actionDist >= DISTANCE_ACTION) {
					actionPoints.add(calculateProjection(1 - (actionDist - DISTANCE_ACTION) / dist, previousAction, loc));
					actionPoints.add(null);
					prevFinishPoint = routePoint;
					previousAction = null;
					actionDist = 0;
				} else {
					actionPoints.add(loc);
					previousAction = loc;
				}
			} else {

				if (previousAction == null) {
					addPreviousToActionPoints(lastProjection, routeNodes, DISTANCE_ACTION,
							prevFinishPoint, routePoint, loc);
				}
				actionPoints.add(loc);
				previousAction = loc;
				prevFinishPoint = -1;
				actionDist = 0;
			}
		}
		if(previousAction != null) {
			actionPoints.add(null);
		}
	}


	private void addPreviousToActionPoints(Location lastProjection, List<Location> routeNodes, double DISTANCE_ACTION,
			int prevFinishPoint, int routePoint, Location loc) {

		int ind = actionPoints.size();
		Location lprevious = loc;
		double dist = 0;
		for (int k = routePoint - 1; k >= -1; k--) {
			Location l = k == -1 ? lastProjection : routeNodes.get(k);
			float locDist = lprevious.distanceTo(l);
			dist += locDist;
			if (dist >= DISTANCE_ACTION) {
				if (locDist > 1) {
					actionPoints.add(ind,
							calculateProjection(1 - (dist - DISTANCE_ACTION) / locDist, lprevious, l));
				}
				break;
			} else {
				actionPoints.add(ind, l);
				lprevious = l;
			}
			if (prevFinishPoint == k) {
				if (ind >= 2) {
					actionPoints.remove(ind - 2);
					actionPoints.remove(ind - 2);
				}
				break;
			}
		}
	}
	
	private Location calculateProjection(double part, Location lp, Location l) {
		Location p = new Location(l);
		p.setLatitude(lp.getLatitude() + part * (l.getLatitude() - lp.getLatitude()));
		p.setLongitude(lp.getLongitude() + part * (l.getLongitude() - lp.getLongitude()));
		return p;
	}


	public RoutingHelper getHelper() {
		return helper;
	}

	

	public Path getPath() {
		return path;
	}

	
	@Override
	public void destroyLayer() {
		
	}
	@Override
	public boolean drawInScreenPixels() {
		return false;
	}

	@Override
	public boolean onLongPressEvent(PointF point, RotatedTileBox tileBox) {
		return false;
	}

	@Override
	public boolean onSingleTap(PointF point, RotatedTileBox tileBox) {
		return false;
	}




}

<code block>
package net.osmand.plus.dialogs;

import java.text.Collator;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import net.osmand.AndroidUtils;
import net.osmand.access.AccessibleToast;
import net.osmand.data.FavouritePoint;
import net.osmand.data.PointDescription;
import net.osmand.plus.FavouritesDbHelper;
import net.osmand.plus.FavouritesDbHelper.FavoriteGroup;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.R;
import net.osmand.plus.activities.FavoritesListFragment.FavouritesAdapter;
import net.osmand.plus.activities.MapActivity;
import net.osmand.util.MapUtils;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnDismissListener;
import android.content.res.Resources;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

public class FavoriteDialogs {
	public static final String KEY_FAVORITE = "favorite";
	
	public static Dialog createReplaceFavouriteDialog(final Activity activity, final Bundle args) {
		final FavouritesDbHelper helper = ((OsmandApplication) activity.getApplication()).getFavorites();
		final List<FavouritePoint> points = new ArrayList<FavouritePoint>(helper.getFavouritePoints());
		final FavouritesAdapter favouritesAdapter = new FavouritesAdapter(activity, 
				((OsmandApplication) activity.getApplication()).getFavorites().getFavouritePoints());
		final Dialog[] dlgHolder = new Dialog[1];
		OnItemClickListener click = new AdapterView.OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				FavouritePoint fp = favouritesAdapter.getItem(position);
				if(dlgHolder != null && dlgHolder.length > 0 && dlgHolder[0] != null) {
					dlgHolder[0].dismiss();
				}
				FavouritePoint point = (FavouritePoint) args.getSerializable(KEY_FAVORITE);
				if (helper.editFavourite(fp, point.getLatitude(), point.getLongitude())) {
					AccessibleToast.makeText(activity, activity.getString(R.string.fav_points_edited),
							Toast.LENGTH_SHORT).show();
				}
				if (activity instanceof MapActivity) {
					((MapActivity) activity).getMapView().refreshMap();
				}
			}
		};
		if (activity instanceof MapActivity) {
			favouritesAdapter.updateLocation(((MapActivity) activity).getMapLocation());
		}
		final String[] names = new String[points.size()];
		if(points.size() == 0){
			AccessibleToast.makeText(activity, activity.getString(R.string.fav_points_not_exist), Toast.LENGTH_SHORT).show();
			return null;
		}
		return showFavoritesDialog(activity, favouritesAdapter, click, null, dlgHolder, true);
	}
	
	public static void prepareAddFavouriteDialog(Activity activity, Dialog dialog, Bundle args, double lat, double lon, PointDescription desc) {
		final Resources resources = activity.getResources();
		String name = desc == null ? "" : desc.getName();
		if(name.length() == 0) {
			name = resources.getString(R.string.add_favorite_dialog_default_favourite_name);
		}
		OsmandApplication app = (OsmandApplication) activity.getApplication();
		final FavouritePoint point = new FavouritePoint(lat, lon, name, app.getSettings().LAST_FAV_CATEGORY_ENTERED.get());
		args.putSerializable(KEY_FAVORITE, point);
		final EditText editText =  (EditText) dialog.findViewById(R.id.Name);
		editText.setText(point.getName());
		editText.selectAll();
		editText.requestFocus();
		final AutoCompleteTextView cat =  (AutoCompleteTextView) dialog.findViewById(R.id.Category);
		cat.setText(point.getCategory());
		AndroidUtils.softKeyboardDelayed(editText);
	}
	
	public  static Dialog createAddFavouriteDialog(final Activity activity, final Bundle args) {
    	Builder builder = new AlertDialog.Builder(activity);
		builder.setTitle(R.string.favourites_context_menu_edit);
		final View v = activity.getLayoutInflater().inflate(R.layout.favorite_edit_dialog, null, false);
		final FavouritesDbHelper helper = ((OsmandApplication) activity.getApplication()).getFavorites();
		builder.setView(v);
		final EditText editText =  (EditText) v.findViewById(R.id.Name);
		final EditText description = (EditText) v.findViewById(R.id.descr);
		final AutoCompleteTextView cat =  (AutoCompleteTextView) v.findViewById(R.id.Category);
		List<FavoriteGroup> gs = helper.getFavoriteGroups();
		String[] list = new String[gs.size()];
		for (int i = 0; i < list.length; i++) {
			list[i] = gs.get(i).name;
		}
		cat.setAdapter(new ArrayAdapter<String>(activity, R.layout.list_textview, list));
		
		builder.setNegativeButton(R.string.shared_string_cancel, null);
		builder.setNeutralButton(R.string.update_existing, new DialogInterface.OnClickListener(){

			@Override
			public void onClick(DialogInterface dialog, int which) {

				Dialog dlg = createReplaceFavouriteDialog(activity, args);
				if(dlg != null) {
					dlg.show();
				}

			}
			
		});
		builder.setPositiveButton(R.string.shared_string_add, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				final FavouritePoint point = (FavouritePoint) args.getSerializable(KEY_FAVORITE);
				OsmandApplication app = (OsmandApplication) activity.getApplication();
				String categoryStr = cat.getText().toString().trim();
				final FavouritesDbHelper helper = app.getFavorites();
				app.getSettings().LAST_FAV_CATEGORY_ENTERED.set(categoryStr);
				point.setName(editText.getText().toString().trim());
				point.setDescription(description.getText().toString().trim());
				point.setCategory(categoryStr);
				Builder bld = FavouritesDbHelper.checkDublicates(point, helper, activity);
				if(bld != null) {
					bld.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							addFavorite(activity, point, helper);							
						}
					});
					bld.show();
				} else {
					addFavorite(activity, point, helper);
				}
			}

			protected void addFavorite(final Activity activity, FavouritePoint point, final FavouritesDbHelper helper) {
				boolean added = helper.addFavourite(point);
				if (added) {
					AccessibleToast.makeText(activity, MessageFormat.format(
							activity.getString(R.string.add_favorite_dialog_favourite_added_template), point.getName()), Toast.LENGTH_SHORT)
							.show();
				}
				if (activity instanceof MapActivity) {
					((MapActivity) activity).getMapView().refreshMap(true);
				}
			}
		});
		return builder.create();
    }
	
	public static final AlertDialog showFavoritesDialog(
			final Context uiContext,
			final FavouritesAdapter favouritesAdapter, final OnItemClickListener click,
			final OnDismissListener dismissListener, final Dialog[] dialogHolder, final boolean sortByDist) {
		ListView listView = new ListView(uiContext);
		Builder bld = new AlertDialog.Builder(uiContext);
		final Collator inst = Collator.getInstance();
		favouritesAdapter.sort(new Comparator<FavouritePoint>() {

			@Override
			public int compare(FavouritePoint lhs, FavouritePoint rhs) {
				if (sortByDist) {
					if (favouritesAdapter.getLocation() == null) {
						return 0;
					}
					double ld = MapUtils.getDistance(favouritesAdapter.getLocation(), lhs.getLatitude(),
							lhs.getLongitude());
					double rd = MapUtils.getDistance(favouritesAdapter.getLocation(), rhs.getLatitude(),
							rhs.getLongitude());
					return Double.compare(ld, rd);
				}
				return inst.compare(lhs.getName(), rhs.getName());
			}
		});
		
		listView.setAdapter(favouritesAdapter);
		listView.setOnItemClickListener(click);
		bld.setPositiveButton(sortByDist ? R.string.sort_by_name :
			R.string.sort_by_distance, new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				showFavoritesDialog(uiContext, favouritesAdapter, click, dismissListener, dialogHolder, !sortByDist);
			}
		});
		bld.setNegativeButton(R.string.shared_string_cancel, null);
		bld.setView(listView);
		AlertDialog dlg = bld.show();
		if(dialogHolder != null) {
			dialogHolder[0] = dlg;
		}
		dlg.setOnDismissListener(dismissListener);
		return dlg;
	}
	
}

<code block>
package net.osmand.plus.views.controls;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.osmand.ValueHolder;
import net.osmand.data.FavouritePoint;
import net.osmand.data.LatLon;
import net.osmand.data.PointDescription;
import net.osmand.data.RotatedTileBox;
import net.osmand.plus.ApplicationMode;
import net.osmand.plus.OsmAndFormatter;
import net.osmand.plus.OsmAndLocationProvider;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.OsmandPlugin;
import net.osmand.plus.OsmandSettings;
import net.osmand.plus.R;
import net.osmand.plus.TargetPointsHelper;
import net.osmand.plus.TargetPointsHelper.TargetPoint;
import net.osmand.plus.activities.FavoritesListFragment.FavouritesAdapter;
import net.osmand.plus.activities.MapActivity;
import net.osmand.plus.activities.ShowRouteInfoActivity;
import net.osmand.plus.activities.actions.AppModeDialog;
import net.osmand.plus.activities.search.SearchAddressActivity;
import net.osmand.plus.activities.search.SearchAddressFragment;
import net.osmand.plus.development.OsmandDevelopmentPlugin;
import net.osmand.plus.dialogs.FavoriteDialogs;
import net.osmand.plus.routing.RouteDirectionInfo;
import net.osmand.plus.routing.RoutingHelper;
import net.osmand.plus.routing.RoutingHelper.IRouteInformationListener;
import net.osmand.plus.views.ContextMenuLayer;
import net.osmand.plus.views.MapControlsLayer;
import net.osmand.plus.views.OsmandMapTileView;
import net.osmand.plus.views.controls.MapRoutePreferencesControl.RoutePrepareDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.graphics.PointF;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;

public class MapRouteInfoControl implements IRouteInformationListener {
	public static int directionInfo = -1;
	public static boolean controlVisible = false;
	private final ContextMenuLayer contextMenu;
	private final RoutingHelper routingHelper;
	private OsmandMapTileView mapView;
	private Dialog dialog;
	private boolean selectFromMapTouch; 
	private boolean selectFromMapForTarget;

	private boolean showDialog = false;
	private MapActivity mapActivity;
	private MapControlsLayer mapControlsLayer;
	public static final String TARGET_SELECT = "TARGET_SELECT";

	public MapRouteInfoControl(ContextMenuLayer contextMenu,
			MapActivity mapActivity, MapControlsLayer mapControlsLayer) {
		this.contextMenu = contextMenu;
		this.mapActivity = mapActivity;
		this.mapControlsLayer = mapControlsLayer;
		routingHelper = mapActivity.getRoutingHelper();
		mapView = mapActivity.getMapView();
		routingHelper.addListener(this);
	}
	
	public boolean onSingleTap(PointF point, RotatedTileBox tileBox) {
		if(selectFromMapTouch) {
			LatLon latlon = tileBox.getLatLonFromPixel(point.x, point.y);
			selectFromMapTouch = false;
			if(selectFromMapForTarget) {
				getTargets().navigateToPoint(latlon, true, -1);
			} else {
				getTargets().setStartPoint(latlon, true, null);
			}
			contextMenu.setLocation(latlon, null);
			showDialog();
			return true;
		}
		return false;
	}
	
	public void setVisible(boolean visible) {
		if(visible) {
			if (showDialog){
				if (getTargets().getPointToNavigate() == null){
					showDialog();
				}
				showDialog = false;
			}
			controlVisible = true;
		} else {
			hideDialog();
			controlVisible = false;
		}
	}
	
	
	public void showHideDialog() {
		if(dialog != null) {
			hideDialog();
		} else {
			showDialog();
		}
	}
	
	public void updateDialog() {
		if(dialog != null) {
			updateInfo(dialog.findViewById(R.id.plan_route_info));
		}
	}
	
	private void updateInfo(final View main) {
		updateWptBtn(main);
		updateViaView(main);
		updateFromSpinner(main);
		updateToSpinner(main);
		updateApplicationModes(main);
		mapControlsLayer.updateRouteButtons(main, true);
		boolean addButtons = routingHelper.isRouteCalculated();
		if(addButtons) {
			updateRouteButtons(main);
		} else {
			updateRouteCalcProgress(main);
		}
	}

	private void updateRouteCalcProgress(final View main) {
		TargetPointsHelper targets = getTargets();
		if(targets.hasTooLongDistanceToNavigate()) {
			main.findViewById(R.id.RouteInfoControls).setVisibility(View.VISIBLE);
			TextView textView = (TextView) main.findViewById(R.id.InfoTextView);
			ImageView iconView = (ImageView) main.findViewById(R.id.InfoIcon);
			main.findViewById(R.id.Prev).setVisibility(View.GONE);
			main.findViewById(R.id.Next).setVisibility(View.GONE);
			textView.setText(R.string.route_is_too_long);
			textView.setVisibility(View.VISIBLE);
			iconView.setImageDrawable(mapActivity.getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_warning));
		} else{
			main.findViewById(R.id.RouteInfoControls).setVisibility(View.GONE);
		}
	}

	private void updateWptBtn(final View parentView) {
		ImageView wptBtn = (ImageView) parentView.findViewById(R.id.waypoints);
		wptBtn.setImageDrawable(mapActivity.getMyApplication().getIconsCache()
				.getContentIcon(R.drawable.ic_action_flag_dark));
		wptBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (getTargets().checkPointToNavigateShort()) {
					hideDialog();
					mapActivity.getMapActions().openIntermediatePointsDialog();
				}
			}

		});
	}

	private void updateApplicationModes(final View parentView) {
		final OsmandSettings settings = mapActivity.getMyApplication().getSettings();
		ApplicationMode am = settings.APPLICATION_MODE.get();
		final Set<ApplicationMode> selected = new HashSet<ApplicationMode>();
		selected.add(am);
		ViewGroup vg = (ViewGroup) parentView.findViewById(R.id.app_modes);
		vg.removeAllViews();
		AppModeDialog.prepareAppModeView(mapActivity, selected, false,
				vg, true, new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						if (selected.size() > 0) {
							ApplicationMode next = selected.iterator().next();
							settings.APPLICATION_MODE.set(next);
							mapActivity.getRoutingHelper().recalculateRouteDueToSettingsChange();
						}
					}
		});
	}

	private void updateViaView(final View parentView) {
		String via = generateViaDescription();
		if(via.length() == 0){
			parentView.findViewById(R.id.ViaLayout).setVisibility(View.GONE);
		} else {
			parentView.findViewById(R.id.ViaLayout).setVisibility(View.VISIBLE);
			((TextView) parentView.findViewById(R.id.ViaView)).setText(via);
		}
	}

	private void updateToSpinner(final View parentView) {
		final Spinner toSpinner = setupToSpinner(parentView);
		toSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				if(position == 1) {
					selectFavorite(parentView, true);
				} else if(position == 2) {
					selectOnScreen(parentView, true);
				} else if(position == 3) {
					Intent intent = new Intent(mapActivity, SearchAddressActivity.class);
					intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
					intent.putExtra(TARGET_SELECT, true);
					mapActivity.startActivityForResult(intent, MapControlsLayer.REQUEST_ADDRESS_SELECT);
				}				
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});
	}

	private void updateFromSpinner(final View parentView) {
		final TargetPointsHelper targets = getTargets();
		final Spinner fromSpinner = setupFromSpinner(parentView);
		fromSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				if(position == 0) {
					if(targets.getPointToStart() != null) {
						targets.clearStartPoint(true);
					}
				} else if(position == 1) {
					selectFavorite(parentView, false);
				} else if(position == 2) {
					selectOnScreen(parentView, false);
				} else if(position == 3) {
					Intent intent = new Intent(mapActivity, SearchAddressActivity.class);
					intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
					intent.putExtra(TARGET_SELECT, false);
					mapActivity.startActivityForResult(intent, MapControlsLayer.REQUEST_ADDRESS_SELECT);
				}				
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});
	}

	protected void selectOnScreen(View parentView, boolean target) {
		selectFromMapTouch = true;
		selectFromMapForTarget =  target;
		hideDialog();
	}
	
	public void selectAddress(String name, LatLon l, final boolean target) {
		PointDescription pd = new PointDescription(PointDescription.POINT_TYPE_ADDRESS, name);
		if(target) {
			getTargets().navigateToPoint(l, true, -1, pd);
		} else {
			getTargets().setStartPoint(l, true, pd);
		}
		hideDialog();
		showDialog();
	}

	protected void selectFavorite(final View parentView, final boolean target) {
		final FavouritesAdapter favouritesAdapter = new FavouritesAdapter(mapActivity, mapActivity.getMyApplication()
				.getFavorites().getFavouritePoints());
		Dialog[] dlgHolder = new Dialog[1];
		OnItemClickListener click = getOnClickListener(target, favouritesAdapter, dlgHolder);
		OnDismissListener dismissListener = new DialogInterface.OnDismissListener() {

			@Override
			public void onDismiss(DialogInterface dialog) {
				if (target) {
					setupToSpinner(parentView);
				} else {
					setupFromSpinner(parentView);
				}
			}
		};
		favouritesAdapter.updateLocation(mapActivity.getMapLocation());
		FavoriteDialogs.showFavoritesDialog(mapActivity, favouritesAdapter, click, dismissListener, dlgHolder, true);
	}


	private OnItemClickListener getOnClickListener(final boolean target, final FavouritesAdapter favouritesAdapter,
			final Dialog[] dlg) {
		return new AdapterView.OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				FavouritePoint fp = favouritesAdapter.getItem(position);
				LatLon point = new LatLon(fp.getLatitude(), fp.getLongitude());
				if(target) {
					getTargets().navigateToPoint(point, true, -1, fp.getPointDescription());
				} else {
					getTargets().setStartPoint(point, true, fp.getPointDescription());
				}
				if(dlg != null && dlg.length > 0 && dlg[0] != null) {
					dlg[0].dismiss();
				}

				hideDialog();
				showDialog();
			}
		};
	}

	public static int getDirectionInfo() {
		return directionInfo;
	}
	
	public boolean isDialogVisible() {
		return dialog != null && dialog.isShowing();
	}

	public static boolean isControlVisible() {
		return controlVisible;
	}
	
	private void updateRouteButtons(final View mainView) {
		mainView.findViewById(R.id.RouteInfoControls).setVisibility(View.VISIBLE);
		final OsmandApplication ctx = mapActivity.getMyApplication();
		ImageView prev = (ImageView) mainView.findViewById(R.id.Prev);
		prev.setImageDrawable(ctx.getIconsCache().getContentIcon(R.drawable.ic_prev));
		if (directionInfo >= 0) {
			prev.setVisibility(View.VISIBLE);
			prev.setOnClickListener(new View.OnClickListener() {

				@Override
				public void onClick(View v) {
					if (directionInfo >= 0) {
						directionInfo--;
					}
					if (routingHelper.getRouteDirections() != null && directionInfo >= 0) {
						if (routingHelper.getRouteDirections().size() > directionInfo) {
							RouteDirectionInfo info = routingHelper.getRouteDirections().get(directionInfo);
							net.osmand.Location l = routingHelper.getLocationFromRouteDirection(info);
							contextMenu.setLocation(new LatLon(l.getLatitude(), l.getLongitude()),
									info.getDescriptionRoute(ctx));
							mapView.getAnimatedDraggingThread().startMoving(l.getLatitude(), l.getLongitude(),
									mapView.getZoom(), true);
						}
					}
					mapView.refreshMap();
					updateInfo(mainView);
				}

			});
		} else {
			prev.setVisibility(View.GONE);
		}
		ImageView next = (ImageView) mainView.findViewById(R.id.Next);
		next.setVisibility(View.VISIBLE);
		next.setImageDrawable(ctx.getIconsCache().getContentIcon(R.drawable.ic_next));
		next.setOnClickListener(new View.OnClickListener(){
			@Override
			public void onClick(View v) {
				if(routingHelper.getRouteDirections() != null && directionInfo < routingHelper.getRouteDirections().size() - 1){
					directionInfo++;
					RouteDirectionInfo info = routingHelper.getRouteDirections().get(directionInfo);
					net.osmand.Location l = routingHelper.getLocationFromRouteDirection(info);
					contextMenu.setLocation(new LatLon(l.getLatitude(), l.getLongitude()), info.getDescriptionRoute(ctx));
					mapView.getAnimatedDraggingThread().startMoving(l.getLatitude(), l.getLongitude(), mapView.getZoom(), true);
				}
				mapView.refreshMap();
				updateInfo(mainView);
			}
			
		});
		View info = mainView.findViewById(R.id.Info);
		info.setOnClickListener(new View.OnClickListener(){
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(mapView.getContext(), ShowRouteInfoActivity.class);
				intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
				mapView.getContext().startActivity(intent);
			}
		});
		
		TextView textView = (TextView) mainView.findViewById(R.id.InfoTextView);
		ImageView iconView = (ImageView) mainView.findViewById(R.id.InfoIcon);
		if(directionInfo >= 0) {
			iconView.setVisibility(View.GONE);
		} else {
			iconView.setImageDrawable(ctx.getIconsCache().getContentIcon(R.drawable.ic_action_info_dark));
			iconView.setVisibility(View.VISIBLE);
		}
		if (directionInfo >= 0 && routingHelper.getRouteDirections() != null
				&& directionInfo < routingHelper.getRouteDirections().size()) {
			RouteDirectionInfo ri = routingHelper.getRouteDirections().get(directionInfo);
			textView.setText((directionInfo + 1) + ". " + ri.getDescriptionRoutePart() + " " + OsmAndFormatter.getFormattedDistance(ri.distance, ctx));
		} else {
			textView.setText(ctx.getRoutingHelper().getGeneralRouteInformation().replace(",", ",\n"));
		}
	}

	private Button attachSimulateRoute(final View mainView, final OsmandApplication ctx) {
		final Button simulateRoute = null;
		final OsmAndLocationProvider loc = ctx.getLocationProvider();
		if(mapActivity.getRoutingHelper().isFollowingMode()) {
			simulateRoute.setVisibility(View.GONE);
		}
		if (OsmandPlugin.getEnabledPlugin(OsmandDevelopmentPlugin.class) == null) {
			simulateRoute.setVisibility(View.GONE);
		}
		simulateRoute.setText(loc.getLocationSimulation().isRouteAnimating() ? R.string.animate_route_off : R.string.animate_route);
		simulateRoute.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				mainView.findViewById(R.id.RouteInfoControls).setVisibility(View.GONE);
				if(loc.getLocationSimulation().isRouteAnimating()) {
					loc.getLocationSimulation().startStopRouteAnimation(mapActivity);
					hideDialog();
				} else {
					simulateRoute.setText(R.string.animate_route_off);
					loc.getLocationSimulation().startStopRouteAnimation(mapActivity);
				}
				
			}
		});
		return simulateRoute;
	}


	@Override
	public void newRouteIsCalculated(boolean newRoute, ValueHolder<Boolean> showToast) {
		directionInfo = -1;
		updateDialog();
		if(isDialogVisible()) {
			showToast.value = false;
		}
	}
	
	public String generateViaDescription() {
		TargetPointsHelper targets = getTargets();
		String via = "";
		List<TargetPoint> points = targets.getIntermediatePoints();
		if (points.size() == 0) {
			return via;
		}
		for (int i = 0; i < points.size(); i++) {
			if (i > 0) {
				via += "\n";
			}
			via += " " + getRoutePointDescription(points.get(i).point, points.get(i).getOnlyName());
		}
		return via;
	}
	
	public String getRoutePointDescription(double lat, double lon) {
		return mapActivity.getString(R.string.route_descr_lat_lon, lat, lon);
	}
    
	public String getRoutePointDescription(LatLon l, String d) {
		if(d != null && d.length() > 0) {
			return d.replace(':', ' ');
		}
		if(l != null) {
			return mapActivity.getString(R.string.route_descr_lat_lon, l.getLatitude(), l.getLongitude());
		}
		return "";
	}
    
	private Spinner setupFromSpinner( View view) {
		ArrayList<String> fromActions = new ArrayList<String>();
		fromActions.add(mapActivity.getString(R.string.route_descr_current_location));
		fromActions.add(mapActivity.getString(R.string.shared_string_favorite) + mapActivity.getString(R.string.shared_string_ellipsis));
		fromActions.add(mapActivity.getString(R.string.shared_string_select_on_map));
		fromActions.add(mapActivity.getString(R.string.shared_string_address) + mapActivity.getString(R.string.shared_string_ellipsis));
		
		TargetPoint start = getTargets().getPointToStart();
		if (start != null) {
			String oname = start.getOnlyName().length() > 0 ? start.getOnlyName()
					: (mapActivity.getString(R.string.route_descr_map_location) + " " + getRoutePointDescription(start.getLatitude(), start.getLongitude()));
			fromActions.add(oname);
		}
		final Spinner fromSpinner = ((Spinner) view.findViewById(R.id.FromSpinner));
		ArrayAdapter<String> fromAdapter = new ArrayAdapter<String>(view.getContext(), 
				android.R.layout.simple_spinner_item, 
				fromActions
				);
		fromAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		fromSpinner.setAdapter(fromAdapter);
		if(start != null) {
			fromSpinner.setSelection(fromActions.size() - 1);
		} else {
			if(mapActivity.getMyApplication().getLocationProvider().getLastKnownLocation() == null) {
				fromSpinner.setPromptId(R.string.search_poi_location);
			}

		}
		return fromSpinner;
	}
    
	private Spinner setupToSpinner(View view) {
		final Spinner toSpinner = ((Spinner) view.findViewById(R.id.ToSpinner));
		final TargetPointsHelper targets = getTargets();
		ArrayList<String> toActions = new ArrayList<String>();
		if (targets.getPointToNavigate() != null) {
			toActions.add(mapActivity.getString(R.string.route_descr_destination) + " "
					+ getRoutePointDescription(targets.getPointToNavigate().point, 
							targets.getPointToNavigate().getOnlyName()));
		} else {
			toSpinner.setPromptId(R.string.route_descr_select_destination);
			toActions.add(mapActivity.getString(R.string.route_descr_select_destination));			
		}
		toActions.add(mapActivity.getString(R.string.shared_string_favorite) + mapActivity.getString(R.string.shared_string_ellipsis));
		toActions.add(mapActivity.getString(R.string.shared_string_select_on_map));
		toActions.add(mapActivity.getString(R.string.shared_string_address) + mapActivity.getString(R.string.shared_string_ellipsis));
		
		ArrayAdapter<String> toAdapter = new ArrayAdapter<String>(view.getContext(), 
				android.R.layout.simple_spinner_item, 
				toActions
				);
		toAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		toSpinner.setAdapter(toAdapter);
		return toSpinner;
	}

	private TargetPointsHelper getTargets() {
		return mapActivity.getMyApplication().getTargetPointsHelper();
	}

	@Override
	public void routeWasCancelled() {
		directionInfo = -1;

	}
	
	
	public void showDialog() {
		final View ll = mapActivity.getLayoutInflater().inflate(R.layout.plan_route_info, null);
		updateInfo(ll);
		dialog = MapRoutePreferencesControl.showDialog(mapControlsLayer, mapActivity, ll, new OnDismissListener() {

			@Override
			public void onDismiss(DialogInterface d) {
				dialog = null;
			}
		});
	}
	
	public void hideDialog() {
		Dialog dialog = this.dialog;
		if (dialog != null) {
			if(dialog instanceof RoutePrepareDialog && 
				((RoutePrepareDialog) dialog).getListener() != null) {
				((RoutePrepareDialog) dialog).getListener().onDismiss(dialog);
				((RoutePrepareDialog) dialog).cancelDismissListener();
			}
			dialog.dismiss();
			this.dialog = null;
		}
	}

	public void setShowDialog() {
		showDialog = true;
	}
}

<code block>
package net.osmand.plus.activities;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.view.ActionMode;
import android.support.v7.widget.PopupMenu;
import android.support.v7.widget.SearchView;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import net.osmand.access.AccessibleToast;
import net.osmand.data.FavouritePoint;
import net.osmand.data.LatLon;
import net.osmand.data.PointDescription;
import net.osmand.plus.ContextMenuAdapter;
import net.osmand.plus.FavouritesDbHelper;
import net.osmand.plus.FavouritesDbHelper.FavoriteGroup;
import net.osmand.plus.GPXUtilities;
import net.osmand.plus.GPXUtilities.GPXFile;
import net.osmand.plus.IconsCache;
import net.osmand.plus.OsmAndFormatter;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.OsmandSettings;
import net.osmand.plus.R;
import net.osmand.plus.TargetPointsHelper;
import net.osmand.plus.base.FavoriteImageDrawable;
import net.osmand.plus.dialogs.DirectionsDialogs;
import net.osmand.plus.helpers.ColorDialogs;
import net.osmand.plus.helpers.AndroidUiHelper;
import net.osmand.plus.myplaces.FavoritesActivity;
import net.osmand.util.MapUtils;

import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gnu.trove.list.array.TIntArrayList;


public class FavoritesTreeFragment extends OsmandExpandableListFragment {

	public static final int SEARCH_ID = -1;


	public static final int DELETE_ID = 2;
	public static final int DELETE_ACTION_ID = 3;
	public static final int SHARE_ID = 4;
	public static final int SELECT_DESTINATIONS_ID = 5;
	public static final int SELECT_DESTINATIONS_ACTION_MODE_ID = 6;

	private FavouritesAdapter favouritesAdapter = new FavouritesAdapter();;
	private FavouritesDbHelper helper;

	private boolean selectionMode = false;
	private Set<FavouritePoint> favoritesSelected = new LinkedHashSet<FavouritePoint>();
	private Set<FavoriteGroup> groupsToDelete = new LinkedHashSet<FavoriteGroup>();
	private ActionMode actionMode;
	private SearchView searchView;
	Drawable arrowImage;

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);

		helper = getMyApplication().getFavorites();
		favouritesAdapter.synchronizeGroups();
		setAdapter(favouritesAdapter);

		boolean light = getMyApplication().getSettings().isLightContent();
		arrowImage = getResources().getDrawable(R.drawable.ic_destination_arrow_white);
		arrowImage.mutate();
		if (light) {
			arrowImage.setColorFilter(getResources().getColor(R.color.color_distance), PorterDuff.Mode.MULTIPLY);
		} else {
			arrowImage.setColorFilter(getResources().getColor(R.color.color_distance), PorterDuff.Mode.MULTIPLY);
		}
	}

	private void deleteFavorites() {
		new AsyncTask<Void, Object, String>() {

			@Override
			protected void onPreExecute() {
				showProgressBar();
			};

			@Override
			protected void onPostExecute(String result) {
				hideProgressBar();
				favouritesAdapter.synchronizeGroups();
			}

			@Override
			protected String doInBackground(Void... params) {
				helper.delete(groupsToDelete, favoritesSelected);
				favoritesSelected.clear();
				groupsToDelete.clear();
				return getString(R.string.favourites_delete_multiple_succesful);
			}

		}.execute();

	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.favorites_tree, container, false);
		ExpandableListView listView = (ExpandableListView)view.findViewById(android.R.id.list);
		favouritesAdapter.synchronizeGroups();
		listView.setAdapter(favouritesAdapter);
		setListView(listView);
		setHasOptionsMenu(true);
		return view;
	}

	@Override
	public void onResume() {
		super.onResume();

		favouritesAdapter.synchronizeGroups();

		collapseTrees(5);




	}
	
	private void updateSelectionMode(ActionMode m) {
		if(favoritesSelected.size() > 0) {
			m.setTitle(favoritesSelected.size() + " " + getMyApplication().getString(R.string.shared_string_selected_lowercase));
		} else{
			m.setTitle("");
		}
	}

	@Override
	public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
		IconsCache iconsCache = getMyApplication().getIconsCache();
		if (selectionMode) {
			CheckBox ch = (CheckBox) v.findViewById(R.id.check_item);
			FavouritePoint model = favouritesAdapter.getChild(groupPosition, childPosition);
			ch.setChecked(!ch.isChecked());
			if (ch.isChecked()) {
				favoritesSelected.add(model);
			} else {
				favoritesSelected.remove(model);
			}
			updateSelectionMode(actionMode);
		} else {
			final FavouritePoint point = (FavouritePoint) favouritesAdapter.getChild(groupPosition, childPosition);
			final OsmandSettings settings = getMyApplication().getSettings();
			LatLon location = new LatLon(point.getLatitude(), point.getLongitude());
			final PopupMenu optionsMenu = new PopupMenu(getActivity(), v);
			DirectionsDialogs.createDirectionActionsPopUpMenu(optionsMenu, location, point, 
					new PointDescription(PointDescription.POINT_TYPE_FAVORITE, point.getName()), settings.getLastKnownMapZoom(),
					getActivity(), true, false);

			MenuItem item = optionsMenu.getMenu().add(R.string.favourites_context_menu_edit)
					.setIcon(iconsCache.getContentIcon(R.drawable.ic_action_edit_dark));
			item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
				@Override
				public boolean onMenuItemClick(MenuItem item) {
					editPoint(getActivity(), point, new Runnable() {
						public void run() {
							favouritesAdapter.synchronizeGroups();		
						}
					});
					return true;
				}
			});

			item = optionsMenu.getMenu().add(R.string.favourites_context_menu_delete)
					.setIcon(iconsCache.getContentIcon(R.drawable.ic_action_delete_dark));
			item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
				@Override
				public boolean onMenuItemClick(MenuItem item) {
					deletePoint(point);

					return true;
				}
			});

			optionsMenu.show();
		}
		return true;
	}

	public static boolean editPoint(Context ctx, final FavouritePoint point, final Runnable callback) {
		OsmandApplication app = (OsmandApplication) ctx.getApplicationContext();
		Builder builder = new AlertDialog.Builder(ctx);
		builder.setTitle(R.string.favourites_context_menu_edit);
		final View v = LayoutInflater.from(ctx).inflate(R.layout.favorite_edit_dialog,
				null, false);
		final AutoCompleteTextView cat = (AutoCompleteTextView) v.findViewById(R.id.Category);
		final EditText editText = (EditText) v.findViewById(R.id.Name);
		final EditText editDescr = (EditText) v.findViewById(R.id.descr);
		builder.setView(v);
		editText.setText(point.getName());
		editDescr.setText(point.getDescription());
		cat.setText(point.getCategory());
		cat.setThreshold(1);
		final FavouritesDbHelper helper = app.getFavorites();
		List<FavoriteGroup> gs = helper.getFavoriteGroups();
		String[] list = new String[gs.size()];
		for(int i = 0; i < list.length; i++) {
			list[i] =gs.get(i).name;
		}
		cat.setAdapter(new ArrayAdapter<String>(ctx, R.layout.list_textview, list));
		builder.setNegativeButton(R.string.shared_string_cancel, null);
		builder.setPositiveButton(R.string.shared_string_apply, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				boolean edited = helper.editFavouriteName(point, editText.getText().toString().trim(), cat.getText()
						.toString(), editDescr.getText().toString());
				if (edited && callback != null) {
					callback.run();
					
				}

			}
		});
		builder.create().show();
		editText.requestFocus();
		return true;
	}

	private boolean deletePoint(final FavouritePoint point) {
		final Resources resources = this.getResources();
		Builder builder = new AlertDialog.Builder(getActivity());
		builder.setMessage(getString(R.string.favourites_remove_dialog_msg, point.getName()));
		builder.setNegativeButton(R.string.shared_string_no, null);
		builder.setPositiveButton(R.string.shared_string_yes, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				boolean deleted = helper.deleteFavourite(point);
				if (deleted) {
					AccessibleToast.makeText(
							getActivity(),
							MessageFormat.format(resources.getString(R.string.favourites_remove_dialog_success),
									point.getName()), Toast.LENGTH_SHORT).show();
					favouritesAdapter.synchronizeGroups();
				}

			}
		});
		builder.create().show();
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {




		if (item.getItemId() == SELECT_DESTINATIONS_ID) {
			selectDestinations();
			return true;
		} else if (item.getItemId() == SHARE_ID) {
			shareFavourites();
			return true;
		} else if (item.getItemId() == DELETE_ID) {
			enterDeleteMode();
			return true;
		} else if (item.getItemId() == DELETE_ACTION_ID) {
			deleteFavoritesAction();
			return true;
		} else {
			return super.onOptionsItemSelected(item);
		}
	}

	private void selectDestinations() {
		final TargetPointsHelper targetPointsHelper = getMyApplication().getTargetPointsHelper();
		if (targetPointsHelper.getIntermediatePoints().size() > 0) {
			final FragmentActivity act = getActivity();
			Builder builder = new AlertDialog.Builder(act);
			builder.setTitle(R.string.new_directions_point_dialog);
			builder.setItems(
					new String[] { act.getString(R.string.keep_intermediate_points),
							act.getString(R.string.clear_intermediate_points)},
					new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							if (which == 1) {
								targetPointsHelper.clearPointToNavigate(false);
							}
							enterIntermediatesMode();
						}
					});
			builder.show();
		} else {
			enterIntermediatesMode();
		}
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		menu.clear();
		MenuItem mi = createMenuItem(menu, SEARCH_ID, R.string.search_poi_filter, R.drawable.ic_action_search_dark,
				R.drawable.ic_action_search_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
		searchView = new SearchView(getActivity());
		FavoritesActivity.updateSearchView(getActivity(), searchView);
		MenuItemCompat.setActionView(mi, searchView);
		searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
			@Override
			public boolean onQueryTextSubmit(String query) {
				favouritesAdapter.getFilter().filter(query);
				return true;
			}

			@Override
			public boolean onQueryTextChange(String newText) {
				favouritesAdapter.getFilter().filter(newText);
				return true;
			}
		});
		MenuItemCompat.setOnActionExpandListener(mi, new MenuItemCompat.OnActionExpandListener() {
			@Override
			public boolean onMenuItemActionExpand(MenuItem item) {
				return true;
			}

			@Override
			public boolean onMenuItemActionCollapse(MenuItem item) {
				favouritesAdapter.setFilterResults(null);
				favouritesAdapter.synchronizeGroups();
				favouritesAdapter.notifyDataSetChanged();

				new Handler().postDelayed(new Runnable() {
					public void run() {
						hideProgressBar();
					}
				}, 100);
				return true;
			}
		});

		if (AndroidUiHelper.isOrientationPortrait(getActivity())) {
			menu = ((FavoritesActivity) getActivity()).getClearToolbar(true).getMenu();
		} else {
			((FavoritesActivity) getActivity()).getClearToolbar(false);
		}



		if (!MenuItemCompat.isActionViewExpanded(mi)) {
			createMenuItem(menu, SHARE_ID, R.string.shared_string_share, R.drawable.ic_action_gshare_dark,
					R.drawable.ic_action_gshare_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
			createMenuItem(menu, SELECT_DESTINATIONS_ID, R.string.select_destination_and_intermediate_points, R.drawable.ic_action_flage_dark,
					R.drawable.ic_action_flage_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
			createMenuItem(menu, DELETE_ID, R.string.shared_string_delete, R.drawable.ic_action_delete_dark,
					R.drawable.ic_action_delete_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS);


			
		}
	}



	public void showProgressBar() {
		getActionBarActivity().setSupportProgressBarIndeterminateVisibility(true);
	}

	public void hideProgressBar() {
		getActionBarActivity().setSupportProgressBarIndeterminateVisibility(false);
	}
	
	private void enterIntermediatesMode() {
		actionMode = getActionBarActivity().startSupportActionMode(new ActionMode.Callback() {

			@Override
			public boolean onCreateActionMode(ActionMode mode, Menu menu) {
				enableSelectionMode(true);
				createMenuItem(menu, SELECT_DESTINATIONS_ACTION_MODE_ID, R.string.select_destination_and_intermediate_points,
						R.drawable.ic_action_flage_dark, R.drawable.ic_action_flage_dark,
						MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);
				favoritesSelected.clear();
				groupsToDelete.clear();
				favouritesAdapter.notifyDataSetInvalidated();
				updateSelectionMode(mode);
				return true;
			}

			@Override
			public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
				return false;
			}

			@Override
			public void onDestroyActionMode(ActionMode mode) {
				enableSelectionMode(false);
				favouritesAdapter.notifyDataSetInvalidated();
			}

			@Override
			public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
				if (item.getItemId() == SELECT_DESTINATIONS_ACTION_MODE_ID) {
					mode.finish();
					selectDestinationImpl();
				}
				return true;
			}
		});

	}
	
	private void selectDestinationImpl() {
		if(!favoritesSelected.isEmpty()) {
			final TargetPointsHelper targetPointsHelper = getMyApplication().getTargetPointsHelper();
			for(FavouritePoint fp : favoritesSelected) {
				targetPointsHelper.navigateToPoint(new LatLon(fp.getLatitude(), fp.getLongitude()), false, 
						targetPointsHelper.getIntermediatePoints().size() + 1, 
						new PointDescription(PointDescription.POINT_TYPE_FAVORITE, fp.getName()));		
			}
			if(getMyApplication().getRoutingHelper().isRouteCalculated()) {
				targetPointsHelper.updateRouteAndReferesh(true);
			}
			IntermediatePointsDialog.openIntermediatePointsDialog(getActivity(), getMyApplication(), true);

		}
	}

	private void enterDeleteMode() {

		actionMode = getActionBarActivity().startSupportActionMode(new ActionMode.Callback() {

			@Override
			public boolean onCreateActionMode(ActionMode mode, Menu menu) {
				enableSelectionMode(true);
				createMenuItem(menu, DELETE_ACTION_ID, R.string.shared_string_delete,
						R.drawable.ic_action_delete_dark, R.drawable.ic_action_delete_dark,
						MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);
				favoritesSelected.clear();
				groupsToDelete.clear();
				favouritesAdapter.notifyDataSetInvalidated();
				updateSelectionMode(mode);
				return true;
			}

			@Override
			public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
				return false;
			}

			@Override
			public void onDestroyActionMode(ActionMode mode) {
				enableSelectionMode(false);
				favouritesAdapter.notifyDataSetInvalidated();
			}

			@Override
			public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
				if (item.getItemId() == DELETE_ACTION_ID) {
					mode.finish();
					deleteFavoritesAction();
				}
				return true;
			}

		});

	}

	private void enableSelectionMode(boolean selectionMode) {
		this.selectionMode = selectionMode;
		((FavoritesActivity)getActivity()).setToolbarVisibility(!selectionMode);
	}

	protected void openChangeGroupDialog(final FavoriteGroup group) {
		Builder bld = new AlertDialog.Builder(getActivity());
		View favEdit = getActivity().getLayoutInflater().inflate(R.layout.fav_group_edit, null);
        final TIntArrayList list = new TIntArrayList();
        final Spinner colorSpinner = (Spinner) favEdit.findViewById(R.id.ColorSpinner);
        final int intColor = group.color == 0? getResources().getColor(R.color.color_favorite) : group.color;
        ColorDialogs.setupColorSpinner(getActivity(), intColor, colorSpinner, list);
		
		final CheckBox checkBox = (CheckBox) favEdit.findViewById(R.id.Visibility);
		checkBox.setChecked(group.visible);
		bld.setTitle(R.string.edit_group);
		bld.setView(favEdit);
		bld.setNegativeButton(R.string.shared_string_cancel, null);
		bld.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				int clr = list.get(colorSpinner.getSelectedItemPosition());
				if(clr != intColor || group.visible != checkBox.isChecked()) {
					getMyApplication().getFavorites().editFavouriteGroup(group, clr, checkBox.isChecked());
					favouritesAdapter.notifyDataSetInvalidated();
				}
				
			}
		});
		bld.show();
		
	}

	private void deleteFavoritesAction() {
		if (groupsToDelete.size() + favoritesSelected.size() > 0) {

			Builder b = new AlertDialog.Builder(getActivity());
			b.setMessage(getString(R.string.favorite_delete_multiple, favoritesSelected.size(), groupsToDelete.size()));
			b.setPositiveButton(R.string.shared_string_delete, new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					if (actionMode != null) {
						actionMode.finish();
					}
					deleteFavorites();
				}
			});
			b.setNegativeButton(R.string.shared_string_cancel, null);
			b.show();
		}
	}


	private void shareFavourites() {
		if (favouritesAdapter.isEmpty()) {
			AccessibleToast.makeText(getActivity(), R.string.no_fav_to_save, Toast.LENGTH_LONG).show();
		} else {
			final AsyncTask<Void, Void, GPXFile> exportTask = new AsyncTask<Void, Void, GPXFile>() {
				@Override
				protected GPXFile doInBackground(Void... params) {
					return helper.asGpxFile();
				}

				@Override
				protected void onPreExecute() {
					showProgressBar();
				}

				@Override
				protected void onPostExecute(GPXFile gpxFile) {
					hideProgressBar();
					final Intent sendIntent = new Intent();
					sendIntent.setAction(Intent.ACTION_SEND);
					sendIntent.putExtra(Intent.EXTRA_TEXT, "Favourites.gpx:\n\n\n"+GPXUtilities.asString(gpxFile, getMyApplication()));
					sendIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share_fav_subject));
					sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(helper.getExternalFile()));

					sendIntent.setType("text/plain");
					startActivity(sendIntent);
				}
			};

			exportTask.execute();
		}
	}

	protected void export() {
		final File tosave = getMyApplication().getAppPath(FavouritesDbHelper.FILE_TO_SAVE);
		if (favouritesAdapter.isEmpty()) {
			AccessibleToast.makeText(getActivity(), R.string.no_fav_to_save, Toast.LENGTH_LONG).show();
		} else if (!tosave.getParentFile().exists()) {
			AccessibleToast.makeText(getActivity(), R.string.sd_dir_not_accessible, Toast.LENGTH_LONG).show();
		} else {
			final AsyncTask<Void, Void, String> exportTask = new AsyncTask<Void, Void, String>() {
				@Override
				protected String doInBackground(Void... params) {
					return helper.exportFavorites();
				}

				@Override
				protected void onPreExecute() {
					showProgressBar();
				}

				@Override
				protected void onPostExecute(String warning) {
					hideProgressBar();
					if (warning == null) {
						AccessibleToast.makeText(
								getActivity(),
								MessageFormat.format(getString(R.string.fav_saved_sucessfully),
										tosave.getAbsolutePath()), Toast.LENGTH_LONG).show();
					} else {
						AccessibleToast.makeText(getActivity(), warning, Toast.LENGTH_LONG).show();
					}
				};
			};

			if (tosave.exists()) {
				Builder bld = new AlertDialog.Builder(getActivity());
				bld.setPositiveButton(R.string.shared_string_yes, new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						exportTask.execute();
					}
				});
				bld.setNegativeButton(R.string.shared_string_no, null);
				bld.setMessage(R.string.fav_export_confirmation);
				bld.show();
			} else {
				exportTask.execute();
			}
		}
	}
	

	class FavouritesAdapter extends OsmandBaseExpandableListAdapter implements Filterable {

		Map<FavoriteGroup, List<FavouritePoint>> favoriteGroups = new LinkedHashMap<FavoriteGroup, List<FavouritePoint>>();
		List<FavoriteGroup> groups = new ArrayList<FavoriteGroup>();
		Filter myFilter;
		private Set<?> filter;
		
		public void deleteFavoritePoint(FavouritePoint p) {
			if (favoriteGroups.containsKey(p.getCategory())) {
				favoriteGroups.get(p.getCategory()).remove(p);
			}
			notifyDataSetChanged();
		}

		public void deleteCategory(String p) {
			favoriteGroups.remove(p);
			groups.remove(p);
			notifyDataSetChanged();
		}

		public void synchronizeGroups() {
			favoriteGroups.clear();
			groups.clear();
			List<FavoriteGroup> gs = helper.getFavoriteGroups();
			Set<?> flt = filter;
			for (FavoriteGroup key : gs) {
				boolean empty = true;
				if (flt == null || flt.contains(key)) {
					empty = false;
					favoriteGroups.put(key, new ArrayList<FavouritePoint>(key.points));
				} else {
					ArrayList<FavouritePoint> list = new ArrayList<FavouritePoint>();
					for (FavouritePoint p : key.points) {
						if (flt.contains(p)) {
							list.add(p);
							empty = false;
						}
					}
					favoriteGroups.put(key, list);
				}
				if(!empty) {
					groups.add(key);
				}
			}
			notifyDataSetChanged();
		}

		@Override
		public FavouritePoint getChild(int groupPosition, int childPosition) {
			return favoriteGroups.get(groups.get(groupPosition)).get(childPosition);
		}

		@Override
		public long getChildId(int groupPosition, int childPosition) {
			return groupPosition * 10000 + childPosition;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			return favoriteGroups.get(groups.get(groupPosition)).size();
		}

		@Override
		public FavoriteGroup getGroup(int groupPosition) {
			return groups.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			return groups.size();
		}

		@Override
		public long getGroupId(int groupPosition) {
			return groupPosition;
		}

		@Override
		public boolean hasStableIds() {
			return false;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return true;
		}

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
			View row = convertView;
			boolean checkBox = row != null && row.findViewById(R.id.check_item) instanceof CheckBox;
			boolean same = (selectionMode && checkBox) || (!selectionMode && !checkBox);
			if (row == null || !same) {
				LayoutInflater inflater = getActivity().getLayoutInflater();
				row = inflater.inflate(R.layout.expandable_list_item_category, parent, false);
				fixBackgroundRepeat(row);
			}
			adjustIndicator(groupPosition, isExpanded, row, getMyApplication().getSettings().isLightContent());
			TextView label = (TextView) row.findViewById(R.id.category_name);
			final FavoriteGroup model = getGroup(groupPosition);
			label.setText(model.name.length() == 0? getString(R.string.shared_string_favorites) : model.name);

			if (selectionMode) {
				final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
				ch.setVisibility(View.VISIBLE);
				ch.setChecked(groupsToDelete.contains(model));

				ch.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						if (ch.isChecked()) {
							groupsToDelete.add(model);
							List<FavouritePoint> fvs = model.points;
							if (fvs != null) {
								favoritesSelected.addAll(fvs);
							}
							favouritesAdapter.notifyDataSetInvalidated();
						} else {
							groupsToDelete.remove(model);
						}
						updateSelectionMode(actionMode);
					}
				});
			} else {
				final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
				ch.setVisibility(View.GONE);
			}
			final View ch = row.findViewById(R.id.options);
			if(!selectionMode) {
				((ImageView) ch).setImageDrawable(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_overflow_menu_white));
				ch.setVisibility(View.VISIBLE);
				ch.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						openChangeGroupDialog(model);
					}

				});
			} else {
				ch.setVisibility(View.GONE);
			}
			return row;
		}


		@Override
		public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView,
				ViewGroup parent) {
			View row = convertView;
			if (row == null) {
				LayoutInflater inflater = getActivity().getLayoutInflater();
				row = inflater.inflate(R.layout.favorites_list_item, parent, false);
			}

			TextView name = (TextView) row.findViewById(R.id.favourite_label);
			TextView distanceText = (TextView) row.findViewById(R.id.distance);
			ImageView icon = (ImageView) row.findViewById(R.id.favourite_icon);
			final FavouritePoint model = (FavouritePoint) getChild(groupPosition, childPosition);
			row.setTag(model);
			icon.setImageDrawable(FavoriteImageDrawable.getOrCreate(getActivity(), model.getColor(), 0));
			LatLon lastKnownMapLocation = getMyApplication().getSettings().getLastKnownMapLocation();
			int dist = (int) (MapUtils.getDistance(model.getLatitude(), model.getLongitude(),
					lastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));
			String distance = OsmAndFormatter.getFormattedDistance(dist, getMyApplication()) + "  ";
			name.setText(model.getName(), TextView.BufferType.SPANNABLE);
			name.setTypeface(Typeface.DEFAULT, model.isVisible() ? Typeface.NORMAL : Typeface.ITALIC);
			distanceText.setText(distance);
			distanceText.setTextColor(getResources().getColor(R.color.color_distance));
			row.findViewById(R.id.group_image).setVisibility(View.GONE);

			ImageView direction = (ImageView) row.findViewById(R.id.direction);
			direction.setVisibility(View.VISIBLE);
			direction.setImageDrawable(arrowImage);

			final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
			if (selectionMode) {
				ch.setVisibility(View.VISIBLE);
				ch.setChecked(favoritesSelected.contains(model));
				row.findViewById(R.id.favourite_icon).setVisibility(View.GONE);
				ch.setOnClickListener(new View.OnClickListener() {

					@Override
					public void onClick(View v) {
						if (ch.isChecked()) {
							favoritesSelected.add(model);
						} else {
							favoritesSelected.remove(model);
							if (groupsToDelete.contains(model.getCategory())) {
								groupsToDelete.remove(model.getCategory());
								favouritesAdapter.notifyDataSetInvalidated();
							}
						}
						updateSelectionMode(actionMode);
					}
				});
			} else {
				row.findViewById(R.id.favourite_icon).setVisibility(View.VISIBLE);
				ch.setVisibility(View.GONE);
			}
			return row;
		}

		@Override
		public Filter getFilter() {
			if (myFilter == null) {
				myFilter = new FavoritesFilter();
			}
			return myFilter;
		}

		public void setFilterResults(Set<?> values) {
			this.filter = values;
			
		}
	}

	public class FavoritesFilter extends Filter {


		public FavoritesFilter() {
		}

		@Override
		protected FilterResults performFiltering(CharSequence constraint) {
			FilterResults results = new FilterResults();
			if (constraint == null || constraint.length() == 0) {
				results.values = null;
				results.count = 1;
			} else {
				Set<Object> filter = new HashSet<Object>(); 
				String cs = constraint.toString().toLowerCase();
				for(FavoriteGroup g : helper.getFavoriteGroups()) {
					if(g.name.toLowerCase().indexOf(cs) != -1) {
						filter.add(g);
					} else {
						for(FavouritePoint fp : g.points) {
							if(fp.getName().toLowerCase().indexOf(cs) != -1) {
								filter.add(fp);
							}
						}
					}
				}
				results.values = filter;
				results.count = filter.size();
			}
			return results;
		}

		@Override
		protected void publishResults(CharSequence constraint, FilterResults results) {
			synchronized (favouritesAdapter) {
				favouritesAdapter.setFilterResults((Set<?>) results.values);
				favouritesAdapter.synchronizeGroups();
			}
			favouritesAdapter.notifyDataSetChanged();
			if(constraint != null && constraint.length() > 1) {
				collapseTrees(5);
			}
		}
	}
}

<code block>

package net.osmand.plus.activities;

import java.util.Comparator;
import java.util.List;

import net.osmand.data.FavouritePoint;
import net.osmand.data.LatLon;
import net.osmand.plus.OsmAndLocationProvider.OsmAndCompassListener;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.OsmandSettings;
import net.osmand.plus.R;
import net.osmand.plus.activities.search.SearchActivity;
import net.osmand.plus.activities.search.SearchActivity.SearchActivityChild;
import net.osmand.plus.base.FavoriteImageDrawable;
import net.osmand.plus.dashboard.DashLocationFragment;
import net.osmand.plus.dialogs.DirectionsDialogs;
import net.osmand.util.MapUtils;
import android.app.Activity;
import android.content.Intent;
import android.support.v4.app.ListFragment;
import android.support.v7.widget.PopupMenu;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;


public class FavoritesListFragment extends OsmAndListFragment implements SearchActivityChild, OsmAndCompassListener {

	public static final String SELECT_FAVORITE_POINT_INTENT_KEY = "SELECT_FAVORITE_POINT_INTENT_KEY";
	public static final int SELECT_FAVORITE_POINT_RESULT_OK = 1;

	private FavouritesAdapter favouritesAdapter;

	private boolean selectFavoriteMode;
	private OsmandSettings settings;
	private boolean compassRegistered;
	


	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		settings = ((OsmandApplication) getApplication()).getSettings();
		OsmandApplication app = (OsmandApplication) getApplication();
		favouritesAdapter = new FavouritesAdapter(activity, app.getFavorites().getFavouritePoints());
		setListAdapter(favouritesAdapter);
		setHasOptionsMenu(true);
	}

	private OsmandApplication getApplication() {
		return (OsmandApplication) getActivity().getApplication();
	}

	@Override
	public void onResume() {
		super.onResume();
		Intent intent = getActivity().getIntent();
		if (intent != null) {
			selectFavoriteMode = intent.hasExtra(SELECT_FAVORITE_POINT_INTENT_KEY);
			if (intent.hasExtra(SearchActivity.SEARCH_LAT) && intent.hasExtra(SearchActivity.SEARCH_LON)) {
				double lat = intent.getDoubleExtra(SearchActivity.SEARCH_LAT, 0);
				double lon = intent.getDoubleExtra(SearchActivity.SEARCH_LON, 0);
				if (lat != 0 || lon != 0) {
					favouritesAdapter.location = new LatLon(lat, lon);
				}
			}
		}

		if (favouritesAdapter.location == null && getActivity() instanceof SearchActivity) {
			favouritesAdapter.location = ((SearchActivity) getActivity()).getSearchPoint();
		}
		if (favouritesAdapter.location == null) {
			favouritesAdapter.location = settings.getLastKnownMapLocation();
		}
		favouritesAdapter.screenOrientation = DashLocationFragment.getScreenOrientation(getActivity());
		locationUpdate(favouritesAdapter.location);
	}

	@Override
	public void locationUpdate(LatLon l) {
		if (getActivity() instanceof SearchActivity) {
			if (((SearchActivity) getActivity()).isSearchAroundCurrentLocation() && l != null) {
				if (!compassRegistered) {
					((OsmandApplication) getActivity().getApplication()).getLocationProvider().addCompassListener(this);
					compassRegistered = true;
				}
				favouritesAdapter.searchAroundLocation = true;
			} else {
				favouritesAdapter.searchAroundLocation = false;
			}
		}
		if (favouritesAdapter != null) {
			favouritesAdapter.updateLocation(l);
		}
		
	}
	
	@Override
	public void onPause() {
		super.onPause();
		if(getActivity() instanceof SearchActivity) {
			((OsmandApplication) getActivity().getApplication()).getLocationProvider().removeCompassListener(this);
			compassRegistered = false;
		}
	}

	public boolean isSelectFavoriteMode() {
		return selectFavoriteMode;
	}


	@Override
	public void onCreateOptionsMenu(Menu onCreate, MenuInflater inflater) {
		if (getActivity() instanceof SearchActivity) {
			((SearchActivity) getActivity()).getClearToolbar(false);
		}
	}

	@Override
	public void onListItemClick(ListView l, View v, int position, long id) {

		if (!isSelectFavoriteMode()) {
			FavouritePoint point = favouritesAdapter.getItem(position);
			LatLon location = new LatLon(point.getLatitude(), point.getLongitude());
			final PopupMenu optionsMenu = new PopupMenu(getActivity(), v);
			DirectionsDialogs.createDirectionActionsPopUpMenu(optionsMenu, location, point, point.getPointDescription(), settings.getLastKnownMapZoom(),
					getActivity(), true, false);
			optionsMenu.show();
		} else {
			Intent intent = getActivity().getIntent();
			intent.putExtra(SELECT_FAVORITE_POINT_INTENT_KEY, favouritesAdapter.getItem(position));
			getActivity().setResult(SELECT_FAVORITE_POINT_RESULT_OK, intent);
			getActivity().finish();
		}
	}

	public static class FavouritesAdapter extends ArrayAdapter<FavouritePoint> {
		private Activity activity;
		private LatLon location;
		private OsmandApplication app;
		private boolean searchAroundLocation;
		private int screenOrientation;
		private Float heading;

		public LatLon getLocation() {
			return location;
		}

		public void updateLocation(LatLon l) {
			location = l;
			sort(new Comparator<FavouritePoint>() {
				@Override
				public int compare(FavouritePoint object1, FavouritePoint object2) {
					if (location != null) {
						double d1 = MapUtils.getDistance(location, object1.getLatitude(), object1.getLongitude());
						double d2 = MapUtils.getDistance(location, object2.getLatitude(), object2.getLongitude());
						if (d1 == d2) {
							return 0;
						} else if (d1 > d2) {
							return 1;
						}
						return -1;
					} else {
						return getName(object1).compareTo(getName(object2));
					}
				}
			});
		}

		public FavouritesAdapter(Activity activity, List<FavouritePoint> list) {
			super(activity, R.layout.favorites_list_item, list);
			this.activity = activity;
			this.app = ((OsmandApplication) activity.getApplication());
		}

		public String getName(FavouritePoint model) {
			return model.getName();
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;
			if (row == null) {
				LayoutInflater inflater = activity.getLayoutInflater();
				row = inflater.inflate(R.layout.favorites_list_item, parent, false);
			}

			TextView name = (TextView) row.findViewById(R.id.favourite_label);
			TextView distanceText = (TextView) row.findViewById(R.id.distance);
			ImageView icon = (ImageView) row.findViewById(R.id.favourite_icon);
			ImageView direction = (ImageView) row.findViewById(R.id.direction);
			ImageView giImage= (ImageView)row.findViewById(R.id.group_image);
			direction.setVisibility(View.VISIBLE);
			final FavouritePoint favorite = getItem(position);
			if (!favorite.getCategory().isEmpty()) {
				giImage.setVisibility(View.VISIBLE);
				giImage.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_small_group));
			} else {
				giImage.setVisibility(View.GONE);
			}
			((TextView) row.findViewById(R.id.group_name)).setText(favorite.getCategory());

			icon.setImageDrawable(FavoriteImageDrawable.getOrCreate(activity, favorite.getColor(), 0));
			DashLocationFragment.updateLocationView(!searchAroundLocation, location, heading, direction, distanceText, 
					favorite.getLatitude(), favorite.getLongitude(), screenOrientation, app, activity);
			
			name.setText(getName(favorite));
			final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
			icon.setVisibility(View.VISIBLE);
			ch.setVisibility(View.GONE);
			return row;
		}

	}

	public OsmandApplication getMyApplication() {
		return (OsmandApplication) getActivity().getApplication();
	}

	@Override
	public void updateCompassValue(float value) {


		float lastHeading = favouritesAdapter.heading != null ? favouritesAdapter.heading : 99;
		favouritesAdapter.heading = value;
		if (favouritesAdapter.heading != null && Math.abs(MapUtils.degreesDiff(lastHeading, favouritesAdapter.heading)) > 5) {
			favouritesAdapter.notifyDataSetChanged();
		} else {
			favouritesAdapter.heading = lastHeading;
		}
	}
}

<code block>
package net.osmand.plus.dialogs;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnDismissListener;
import android.content.res.Resources;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import net.osmand.AndroidUtils;
import net.osmand.access.AccessibleToast;
import net.osmand.data.FavouritePoint;
import net.osmand.data.PointDescription;
import net.osmand.plus.FavouritesDbHelper;
import net.osmand.plus.FavouritesDbHelper.FavoriteGroup;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.R;
import net.osmand.plus.activities.FavoritesListFragment.FavouritesAdapter;
import net.osmand.plus.activities.MapActivity;
import net.osmand.util.MapUtils;

import java.text.Collator;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class FavoriteDialogs {
	public static final String KEY_FAVORITE = "favorite";
	
	public static Dialog createReplaceFavouriteDialog(final Activity activity, final Bundle args) {
		final FavouritesDbHelper helper = ((OsmandApplication) activity.getApplication()).getFavorites();
		final List<FavouritePoint> points = new ArrayList<FavouritePoint>(helper.getFavouritePoints());
		final FavouritesAdapter favouritesAdapter = new FavouritesAdapter(activity, 
				((OsmandApplication) activity.getApplication()).getFavorites().getFavouritePoints(),
				false);
		final Dialog[] dlgHolder = new Dialog[1];
		OnItemClickListener click = new AdapterView.OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				FavouritePoint fp = favouritesAdapter.getItem(position);
				if(dlgHolder != null && dlgHolder.length > 0 && dlgHolder[0] != null) {
					dlgHolder[0].dismiss();
				}
				FavouritePoint point = (FavouritePoint) args.getSerializable(KEY_FAVORITE);
				if (helper.editFavourite(fp, point.getLatitude(), point.getLongitude())) {
					AccessibleToast.makeText(activity, activity.getString(R.string.fav_points_edited),
							Toast.LENGTH_SHORT).show();
				}
				if (activity instanceof MapActivity) {
					((MapActivity) activity).getMapView().refreshMap();
				}
			}
		};
		if (activity instanceof MapActivity) {
			favouritesAdapter.updateLocation(((MapActivity) activity).getMapLocation());
		}
		final String[] names = new String[points.size()];
		if(points.size() == 0){
			AccessibleToast.makeText(activity, activity.getString(R.string.fav_points_not_exist), Toast.LENGTH_SHORT).show();
			return null;
		}
		return showFavoritesDialog(activity, favouritesAdapter, click, null, dlgHolder, true);
	}
	
	public static void prepareAddFavouriteDialog(Activity activity, Dialog dialog, Bundle args, double lat, double lon, PointDescription desc) {
		final Resources resources = activity.getResources();
		String name = desc == null ? "" : desc.getName();
		if(name.length() == 0) {
			name = resources.getString(R.string.add_favorite_dialog_default_favourite_name);
		}
		OsmandApplication app = (OsmandApplication) activity.getApplication();
		final FavouritePoint point = new FavouritePoint(lat, lon, name, app.getSettings().LAST_FAV_CATEGORY_ENTERED.get());
		args.putSerializable(KEY_FAVORITE, point);
		final EditText editText =  (EditText) dialog.findViewById(R.id.Name);
		editText.setText(point.getName());
		editText.selectAll();
		editText.requestFocus();
		final AutoCompleteTextView cat =  (AutoCompleteTextView) dialog.findViewById(R.id.Category);
		cat.setText(point.getCategory());
		AndroidUtils.softKeyboardDelayed(editText);
	}
	
	public  static Dialog createAddFavouriteDialog(final Activity activity, final Bundle args) {
    	Builder builder = new AlertDialog.Builder(activity);
		builder.setTitle(R.string.favourites_context_menu_edit);
		final View v = activity.getLayoutInflater().inflate(R.layout.favorite_edit_dialog, null, false);
		final FavouritesDbHelper helper = ((OsmandApplication) activity.getApplication()).getFavorites();
		builder.setView(v);
		final EditText editText =  (EditText) v.findViewById(R.id.Name);
		final EditText description = (EditText) v.findViewById(R.id.descr);
		final AutoCompleteTextView cat =  (AutoCompleteTextView) v.findViewById(R.id.Category);
		List<FavoriteGroup> gs = helper.getFavoriteGroups();
		String[] list = new String[gs.size()];
		for (int i = 0; i < list.length; i++) {
			list[i] = gs.get(i).name;
		}
		cat.setAdapter(new ArrayAdapter<String>(activity, R.layout.list_textview, list));
		
		builder.setNegativeButton(R.string.shared_string_cancel, null);
		builder.setNeutralButton(R.string.update_existing, new DialogInterface.OnClickListener(){

			@Override
			public void onClick(DialogInterface dialog, int which) {

				Dialog dlg = createReplaceFavouriteDialog(activity, args);
				if(dlg != null) {
					dlg.show();
				}

			}
			
		});
		builder.setPositiveButton(R.string.shared_string_add, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				final FavouritePoint point = (FavouritePoint) args.getSerializable(KEY_FAVORITE);
				OsmandApplication app = (OsmandApplication) activity.getApplication();
				String categoryStr = cat.getText().toString().trim();
				final FavouritesDbHelper helper = app.getFavorites();
				app.getSettings().LAST_FAV_CATEGORY_ENTERED.set(categoryStr);
				point.setName(editText.getText().toString().trim());
				point.setDescription(description.getText().toString().trim());
				point.setCategory(categoryStr);
				Builder bld = FavouritesDbHelper.checkDublicates(point, helper, activity);
				if(bld != null) {
					bld.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							addFavorite(activity, point, helper);							
						}
					});
					bld.show();
				} else {
					addFavorite(activity, point, helper);
				}
			}

			protected void addFavorite(final Activity activity, FavouritePoint point, final FavouritesDbHelper helper) {
				boolean added = helper.addFavourite(point);
				if (added) {
					AccessibleToast.makeText(activity, MessageFormat.format(
							activity.getString(R.string.add_favorite_dialog_favourite_added_template), point.getName()), Toast.LENGTH_SHORT)
							.show();
				}
				if (activity instanceof MapActivity) {
					((MapActivity) activity).getMapView().refreshMap(true);
				}
			}
		});
		return builder.create();
    }
	
	public static final AlertDialog showFavoritesDialog(
			final Context uiContext,
			final FavouritesAdapter favouritesAdapter, final OnItemClickListener click,
			final OnDismissListener dismissListener, final Dialog[] dialogHolder, final boolean sortByDist) {
		ListView listView = new ListView(uiContext);
		Builder bld = new AlertDialog.Builder(uiContext);
		final Collator inst = Collator.getInstance();
		favouritesAdapter.sort(new Comparator<FavouritePoint>() {

			@Override
			public int compare(FavouritePoint lhs, FavouritePoint rhs) {
				if (sortByDist) {
					if (favouritesAdapter.getLocation() == null) {
						return 0;
					}
					double ld = MapUtils.getDistance(favouritesAdapter.getLocation(), lhs.getLatitude(),
							lhs.getLongitude());
					double rd = MapUtils.getDistance(favouritesAdapter.getLocation(), rhs.getLatitude(),
							rhs.getLongitude());
					return Double.compare(ld, rd);
				}
				return inst.compare(lhs.getName(), rhs.getName());
			}
		});
		
		listView.setAdapter(favouritesAdapter);
		listView.setOnItemClickListener(click);
		bld.setPositiveButton(sortByDist ? R.string.sort_by_name :
			R.string.sort_by_distance, new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				showFavoritesDialog(uiContext, favouritesAdapter, click, dismissListener, dialogHolder, !sortByDist);
			}
		});
		bld.setNegativeButton(R.string.shared_string_cancel, null);
		bld.setView(listView);
		AlertDialog dlg = bld.show();
		if(dialogHolder != null) {
			dialogHolder[0] = dlg;
		}
		dlg.setOnDismissListener(dismissListener);
		return dlg;
	}
	
}

<code block>
package net.osmand.plus.views.controls;

import android.app.Dialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnDismissListener;
import android.content.Intent;
import android.graphics.PointF;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;

import net.osmand.ValueHolder;
import net.osmand.data.FavouritePoint;
import net.osmand.data.LatLon;
import net.osmand.data.PointDescription;
import net.osmand.data.RotatedTileBox;
import net.osmand.plus.ApplicationMode;
import net.osmand.plus.OsmAndFormatter;
import net.osmand.plus.OsmAndLocationProvider;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.OsmandPlugin;
import net.osmand.plus.OsmandSettings;
import net.osmand.plus.R;
import net.osmand.plus.TargetPointsHelper;
import net.osmand.plus.TargetPointsHelper.TargetPoint;
import net.osmand.plus.activities.FavoritesListFragment.FavouritesAdapter;
import net.osmand.plus.activities.MapActivity;
import net.osmand.plus.activities.ShowRouteInfoActivity;
import net.osmand.plus.activities.actions.AppModeDialog;
import net.osmand.plus.activities.search.SearchAddressActivity;
import net.osmand.plus.development.OsmandDevelopmentPlugin;
import net.osmand.plus.dialogs.FavoriteDialogs;
import net.osmand.plus.routing.RouteDirectionInfo;
import net.osmand.plus.routing.RoutingHelper;
import net.osmand.plus.routing.RoutingHelper.IRouteInformationListener;
import net.osmand.plus.views.ContextMenuLayer;
import net.osmand.plus.views.MapControlsLayer;
import net.osmand.plus.views.OsmandMapTileView;
import net.osmand.plus.views.controls.MapRoutePreferencesControl.RoutePrepareDialog;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class MapRouteInfoControl implements IRouteInformationListener {
	public static int directionInfo = -1;
	public static boolean controlVisible = false;
	private final ContextMenuLayer contextMenu;
	private final RoutingHelper routingHelper;
	private OsmandMapTileView mapView;
	private Dialog dialog;
	private boolean selectFromMapTouch; 
	private boolean selectFromMapForTarget;

	private boolean showDialog = false;
	private MapActivity mapActivity;
	private MapControlsLayer mapControlsLayer;
	public static final String TARGET_SELECT = "TARGET_SELECT";

	public MapRouteInfoControl(ContextMenuLayer contextMenu,
			MapActivity mapActivity, MapControlsLayer mapControlsLayer) {
		this.contextMenu = contextMenu;
		this.mapActivity = mapActivity;
		this.mapControlsLayer = mapControlsLayer;
		routingHelper = mapActivity.getRoutingHelper();
		mapView = mapActivity.getMapView();
		routingHelper.addListener(this);
	}
	
	public boolean onSingleTap(PointF point, RotatedTileBox tileBox) {
		if(selectFromMapTouch) {
			LatLon latlon = tileBox.getLatLonFromPixel(point.x, point.y);
			selectFromMapTouch = false;
			if(selectFromMapForTarget) {
				getTargets().navigateToPoint(latlon, true, -1);
			} else {
				getTargets().setStartPoint(latlon, true, null);
			}
			contextMenu.setLocation(latlon, null);
			showDialog();
			return true;
		}
		return false;
	}
	
	public void setVisible(boolean visible) {
		if(visible) {
			if (showDialog){
				if (getTargets().getPointToNavigate() == null){
					showDialog();
				}
				showDialog = false;
			}
			controlVisible = true;
		} else {
			hideDialog();
			controlVisible = false;
		}
	}
	
	
	public void showHideDialog() {
		if(dialog != null) {
			hideDialog();
		} else {
			showDialog();
		}
	}
	
	public void updateDialog() {
		if(dialog != null) {
			updateInfo(dialog.findViewById(R.id.plan_route_info));
		}
	}
	
	private void updateInfo(final View main) {
		updateWptBtn(main);
		updateViaView(main);
		updateFromSpinner(main);
		updateToSpinner(main);
		updateApplicationModes(main);
		mapControlsLayer.updateRouteButtons(main, true);
		boolean addButtons = routingHelper.isRouteCalculated();
		if(addButtons) {
			updateRouteButtons(main);
		} else {
			updateRouteCalcProgress(main);
		}
	}

	private void updateRouteCalcProgress(final View main) {
		TargetPointsHelper targets = getTargets();
		if(targets.hasTooLongDistanceToNavigate()) {
			main.findViewById(R.id.RouteInfoControls).setVisibility(View.VISIBLE);
			TextView textView = (TextView) main.findViewById(R.id.InfoTextView);
			ImageView iconView = (ImageView) main.findViewById(R.id.InfoIcon);
			main.findViewById(R.id.Prev).setVisibility(View.GONE);
			main.findViewById(R.id.Next).setVisibility(View.GONE);
			textView.setText(R.string.route_is_too_long);
			textView.setVisibility(View.VISIBLE);
			iconView.setImageDrawable(mapActivity.getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_warning));
		} else{
			main.findViewById(R.id.RouteInfoControls).setVisibility(View.GONE);
		}
	}

	private void updateWptBtn(final View parentView) {
		ImageView wptBtn = (ImageView) parentView.findViewById(R.id.waypoints);
		wptBtn.setImageDrawable(mapActivity.getMyApplication().getIconsCache()
				.getContentIcon(R.drawable.ic_action_flag_dark));
		wptBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (getTargets().checkPointToNavigateShort()) {
					hideDialog();
					mapActivity.getMapActions().openIntermediatePointsDialog();
				}
			}

		});
	}

	private void updateApplicationModes(final View parentView) {
		final OsmandSettings settings = mapActivity.getMyApplication().getSettings();
		ApplicationMode am = settings.APPLICATION_MODE.get();
		final Set<ApplicationMode> selected = new HashSet<ApplicationMode>();
		selected.add(am);
		ViewGroup vg = (ViewGroup) parentView.findViewById(R.id.app_modes);
		vg.removeAllViews();
		AppModeDialog.prepareAppModeView(mapActivity, selected, false,
				vg, true, new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						if (selected.size() > 0) {
							ApplicationMode next = selected.iterator().next();
							settings.APPLICATION_MODE.set(next);
							mapActivity.getRoutingHelper().recalculateRouteDueToSettingsChange();
						}
					}
		});
	}

	private void updateViaView(final View parentView) {
		String via = generateViaDescription();
		if(via.length() == 0){
			parentView.findViewById(R.id.ViaLayout).setVisibility(View.GONE);
		} else {
			parentView.findViewById(R.id.ViaLayout).setVisibility(View.VISIBLE);
			((TextView) parentView.findViewById(R.id.ViaView)).setText(via);
		}
	}

	private void updateToSpinner(final View parentView) {
		final Spinner toSpinner = setupToSpinner(parentView);
		toSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				if(position == 1) {
					selectFavorite(parentView, true);
				} else if(position == 2) {
					selectOnScreen(parentView, true);
				} else if(position == 3) {
					Intent intent = new Intent(mapActivity, SearchAddressActivity.class);
					intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
					intent.putExtra(TARGET_SELECT, true);
					mapActivity.startActivityForResult(intent, MapControlsLayer.REQUEST_ADDRESS_SELECT);
				}				
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});
	}

	private void updateFromSpinner(final View parentView) {
		final TargetPointsHelper targets = getTargets();
		final Spinner fromSpinner = setupFromSpinner(parentView);
		fromSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				if(position == 0) {
					if(targets.getPointToStart() != null) {
						targets.clearStartPoint(true);
					}
				} else if(position == 1) {
					selectFavorite(parentView, false);
				} else if(position == 2) {
					selectOnScreen(parentView, false);
				} else if(position == 3) {
					Intent intent = new Intent(mapActivity, SearchAddressActivity.class);
					intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
					intent.putExtra(TARGET_SELECT, false);
					mapActivity.startActivityForResult(intent, MapControlsLayer.REQUEST_ADDRESS_SELECT);
				}				
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});
	}

	protected void selectOnScreen(View parentView, boolean target) {
		selectFromMapTouch = true;
		selectFromMapForTarget =  target;
		hideDialog();
	}
	
	public void selectAddress(String name, LatLon l, final boolean target) {
		PointDescription pd = new PointDescription(PointDescription.POINT_TYPE_ADDRESS, name);
		if(target) {
			getTargets().navigateToPoint(l, true, -1, pd);
		} else {
			getTargets().setStartPoint(l, true, pd);
		}
		hideDialog();
		showDialog();
	}

	protected void selectFavorite(final View parentView, final boolean target) {
		final FavouritesAdapter favouritesAdapter = new FavouritesAdapter(mapActivity, mapActivity.getMyApplication()
				.getFavorites().getFavouritePoints(), false);
		Dialog[] dlgHolder = new Dialog[1];
		OnItemClickListener click = getOnClickListener(target, favouritesAdapter, dlgHolder);
		OnDismissListener dismissListener = new DialogInterface.OnDismissListener() {

			@Override
			public void onDismiss(DialogInterface dialog) {
				if (target) {
					setupToSpinner(parentView);
				} else {
					setupFromSpinner(parentView);
				}
			}
		};
		favouritesAdapter.updateLocation(mapActivity.getMapLocation());
		FavoriteDialogs.showFavoritesDialog(mapActivity, favouritesAdapter, click, dismissListener, dlgHolder, true);
	}


	private OnItemClickListener getOnClickListener(final boolean target, final FavouritesAdapter favouritesAdapter,
			final Dialog[] dlg) {
		return new AdapterView.OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				FavouritePoint fp = favouritesAdapter.getItem(position);
				LatLon point = new LatLon(fp.getLatitude(), fp.getLongitude());
				if(target) {
					getTargets().navigateToPoint(point, true, -1, fp.getPointDescription());
				} else {
					getTargets().setStartPoint(point, true, fp.getPointDescription());
				}
				if(dlg != null && dlg.length > 0 && dlg[0] != null) {
					dlg[0].dismiss();
				}

				hideDialog();
				showDialog();
			}
		};
	}

	public static int getDirectionInfo() {
		return directionInfo;
	}
	
	public boolean isDialogVisible() {
		return dialog != null && dialog.isShowing();
	}

	public static boolean isControlVisible() {
		return controlVisible;
	}
	
	private void updateRouteButtons(final View mainView) {
		mainView.findViewById(R.id.RouteInfoControls).setVisibility(View.VISIBLE);
		final OsmandApplication ctx = mapActivity.getMyApplication();
		ImageView prev = (ImageView) mainView.findViewById(R.id.Prev);
		prev.setImageDrawable(ctx.getIconsCache().getContentIcon(R.drawable.ic_prev));
		if (directionInfo >= 0) {
			prev.setVisibility(View.VISIBLE);
			prev.setOnClickListener(new View.OnClickListener() {

				@Override
				public void onClick(View v) {
					if (directionInfo >= 0) {
						directionInfo--;
					}
					if (routingHelper.getRouteDirections() != null && directionInfo >= 0) {
						if (routingHelper.getRouteDirections().size() > directionInfo) {
							RouteDirectionInfo info = routingHelper.getRouteDirections().get(directionInfo);
							net.osmand.Location l = routingHelper.getLocationFromRouteDirection(info);
							contextMenu.setLocation(new LatLon(l.getLatitude(), l.getLongitude()),
									info.getDescriptionRoute(ctx));
							mapView.getAnimatedDraggingThread().startMoving(l.getLatitude(), l.getLongitude(),
									mapView.getZoom(), true);
						}
					}
					mapView.refreshMap();
					updateInfo(mainView);
				}

			});
		} else {
			prev.setVisibility(View.GONE);
		}
		ImageView next = (ImageView) mainView.findViewById(R.id.Next);
		next.setVisibility(View.VISIBLE);
		next.setImageDrawable(ctx.getIconsCache().getContentIcon(R.drawable.ic_next));
		next.setOnClickListener(new View.OnClickListener(){
			@Override
			public void onClick(View v) {
				if(routingHelper.getRouteDirections() != null && directionInfo < routingHelper.getRouteDirections().size() - 1){
					directionInfo++;
					RouteDirectionInfo info = routingHelper.getRouteDirections().get(directionInfo);
					net.osmand.Location l = routingHelper.getLocationFromRouteDirection(info);
					contextMenu.setLocation(new LatLon(l.getLatitude(), l.getLongitude()), info.getDescriptionRoute(ctx));
					mapView.getAnimatedDraggingThread().startMoving(l.getLatitude(), l.getLongitude(), mapView.getZoom(), true);
				}
				mapView.refreshMap();
				updateInfo(mainView);
			}
			
		});
		View info = mainView.findViewById(R.id.Info);
		info.setOnClickListener(new View.OnClickListener(){
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(mapView.getContext(), ShowRouteInfoActivity.class);
				intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
				mapView.getContext().startActivity(intent);
			}
		});
		
		TextView textView = (TextView) mainView.findViewById(R.id.InfoTextView);
		ImageView iconView = (ImageView) mainView.findViewById(R.id.InfoIcon);
		if(directionInfo >= 0) {
			iconView.setVisibility(View.GONE);
		} else {
			iconView.setImageDrawable(ctx.getIconsCache().getContentIcon(R.drawable.ic_action_info_dark));
			iconView.setVisibility(View.VISIBLE);
		}
		if (directionInfo >= 0 && routingHelper.getRouteDirections() != null
				&& directionInfo < routingHelper.getRouteDirections().size()) {
			RouteDirectionInfo ri = routingHelper.getRouteDirections().get(directionInfo);
			textView.setText((directionInfo + 1) + ". " + ri.getDescriptionRoutePart() + " " + OsmAndFormatter.getFormattedDistance(ri.distance, ctx));
		} else {
			textView.setText(ctx.getRoutingHelper().getGeneralRouteInformation().replace(",", ",\n"));
		}
	}

	private Button attachSimulateRoute(final View mainView, final OsmandApplication ctx) {
		final Button simulateRoute = null;
		final OsmAndLocationProvider loc = ctx.getLocationProvider();
		if(mapActivity.getRoutingHelper().isFollowingMode()) {
			simulateRoute.setVisibility(View.GONE);
		}
		if (OsmandPlugin.getEnabledPlugin(OsmandDevelopmentPlugin.class) == null) {
			simulateRoute.setVisibility(View.GONE);
		}
		simulateRoute.setText(loc.getLocationSimulation().isRouteAnimating() ? R.string.animate_route_off : R.string.animate_route);
		simulateRoute.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				mainView.findViewById(R.id.RouteInfoControls).setVisibility(View.GONE);
				if(loc.getLocationSimulation().isRouteAnimating()) {
					loc.getLocationSimulation().startStopRouteAnimation(mapActivity);
					hideDialog();
				} else {
					simulateRoute.setText(R.string.animate_route_off);
					loc.getLocationSimulation().startStopRouteAnimation(mapActivity);
				}
				
			}
		});
		return simulateRoute;
	}


	@Override
	public void newRouteIsCalculated(boolean newRoute, ValueHolder<Boolean> showToast) {
		directionInfo = -1;
		updateDialog();
		if(isDialogVisible()) {
			showToast.value = false;
		}
	}
	
	public String generateViaDescription() {
		TargetPointsHelper targets = getTargets();
		String via = "";
		List<TargetPoint> points = targets.getIntermediatePoints();
		if (points.size() == 0) {
			return via;
		}
		for (int i = 0; i < points.size(); i++) {
			if (i > 0) {
				via += "\n";
			}
			via += " " + getRoutePointDescription(points.get(i).point, points.get(i).getOnlyName());
		}
		return via;
	}
	
	public String getRoutePointDescription(double lat, double lon) {
		return mapActivity.getString(R.string.route_descr_lat_lon, lat, lon);
	}
    
	public String getRoutePointDescription(LatLon l, String d) {
		if(d != null && d.length() > 0) {
			return d.replace(':', ' ');
		}
		if(l != null) {
			return mapActivity.getString(R.string.route_descr_lat_lon, l.getLatitude(), l.getLongitude());
		}
		return "";
	}
    
	private Spinner setupFromSpinner( View view) {
		ArrayList<String> fromActions = new ArrayList<String>();
		fromActions.add(mapActivity.getString(R.string.route_descr_current_location));
		fromActions.add(mapActivity.getString(R.string.shared_string_favorite) + mapActivity.getString(R.string.shared_string_ellipsis));
		fromActions.add(mapActivity.getString(R.string.shared_string_select_on_map));
		fromActions.add(mapActivity.getString(R.string.shared_string_address) + mapActivity.getString(R.string.shared_string_ellipsis));
		
		TargetPoint start = getTargets().getPointToStart();
		if (start != null) {
			String oname = start.getOnlyName().length() > 0 ? start.getOnlyName()
					: (mapActivity.getString(R.string.route_descr_map_location) + " " + getRoutePointDescription(start.getLatitude(), start.getLongitude()));
			fromActions.add(oname);
		}
		final Spinner fromSpinner = ((Spinner) view.findViewById(R.id.FromSpinner));
		ArrayAdapter<String> fromAdapter = new ArrayAdapter<String>(view.getContext(), 
				android.R.layout.simple_spinner_item, 
				fromActions
				);
		fromAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		fromSpinner.setAdapter(fromAdapter);
		if(start != null) {
			fromSpinner.setSelection(fromActions.size() - 1);
		} else {
			if(mapActivity.getMyApplication().getLocationProvider().getLastKnownLocation() == null) {
				fromSpinner.setPromptId(R.string.search_poi_location);
			}

		}
		return fromSpinner;
	}
    
	private Spinner setupToSpinner(View view) {
		final Spinner toSpinner = ((Spinner) view.findViewById(R.id.ToSpinner));
		final TargetPointsHelper targets = getTargets();
		ArrayList<String> toActions = new ArrayList<String>();
		if (targets.getPointToNavigate() != null) {
			toActions.add(mapActivity.getString(R.string.route_descr_destination) + " "
					+ getRoutePointDescription(targets.getPointToNavigate().point, 
							targets.getPointToNavigate().getOnlyName()));
		} else {
			toSpinner.setPromptId(R.string.route_descr_select_destination);
			toActions.add(mapActivity.getString(R.string.route_descr_select_destination));			
		}
		toActions.add(mapActivity.getString(R.string.shared_string_favorite) + mapActivity.getString(R.string.shared_string_ellipsis));
		toActions.add(mapActivity.getString(R.string.shared_string_select_on_map));
		toActions.add(mapActivity.getString(R.string.shared_string_address) + mapActivity.getString(R.string.shared_string_ellipsis));
		
		ArrayAdapter<String> toAdapter = new ArrayAdapter<String>(view.getContext(), 
				android.R.layout.simple_spinner_item, 
				toActions
				);
		toAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		toSpinner.setAdapter(toAdapter);
		return toSpinner;
	}

	private TargetPointsHelper getTargets() {
		return mapActivity.getMyApplication().getTargetPointsHelper();
	}

	@Override
	public void routeWasCancelled() {
		directionInfo = -1;

	}
	
	
	public void showDialog() {
		final View ll = mapActivity.getLayoutInflater().inflate(R.layout.plan_route_info, null);
		updateInfo(ll);
		dialog = MapRoutePreferencesControl.showDialog(mapControlsLayer, mapActivity, ll, new OnDismissListener() {

			@Override
			public void onDismiss(DialogInterface d) {
				dialog = null;
			}
		});
	}
	
	public void hideDialog() {
		Dialog dialog = this.dialog;
		if (dialog != null) {
			if(dialog instanceof RoutePrepareDialog && 
				((RoutePrepareDialog) dialog).getListener() != null) {
				((RoutePrepareDialog) dialog).getListener().onDismiss(dialog);
				((RoutePrepareDialog) dialog).cancelDismissListener();
			}
			dialog.dismiss();
			this.dialog = null;
		}
	}

	public void setShowDialog() {
		showDialog = true;
	}
}

<code block>
package net.osmand.plus.activities;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.view.ActionMode;
import android.support.v7.widget.PopupMenu;
import android.support.v7.widget.SearchView;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import net.osmand.access.AccessibleToast;
import net.osmand.data.FavouritePoint;
import net.osmand.data.LatLon;
import net.osmand.data.PointDescription;
import net.osmand.plus.FavouritesDbHelper;
import net.osmand.plus.FavouritesDbHelper.FavoriteGroup;
import net.osmand.plus.GPXUtilities;
import net.osmand.plus.GPXUtilities.GPXFile;
import net.osmand.plus.IconsCache;
import net.osmand.plus.OsmAndFormatter;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.OsmandSettings;
import net.osmand.plus.R;
import net.osmand.plus.TargetPointsHelper;
import net.osmand.plus.base.FavoriteImageDrawable;
import net.osmand.plus.dialogs.DirectionsDialogs;
import net.osmand.plus.helpers.AndroidUiHelper;
import net.osmand.plus.helpers.ColorDialogs;
import net.osmand.plus.myplaces.FavoritesActivity;
import net.osmand.util.MapUtils;

import java.io.File;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import gnu.trove.list.array.TIntArrayList;


public class FavoritesTreeFragment extends OsmandExpandableListFragment {

	public static final int SEARCH_ID = -1;


	public static final int DELETE_ID = 2;
	public static final int DELETE_ACTION_ID = 3;
	public static final int SHARE_ID = 4;
	public static final int SELECT_DESTINATIONS_ID = 5;
	public static final int SELECT_DESTINATIONS_ACTION_MODE_ID = 6;

	private FavouritesAdapter favouritesAdapter = new FavouritesAdapter();;
	private FavouritesDbHelper helper;

	private boolean selectionMode = false;
	private Set<FavouritePoint> favoritesSelected = new LinkedHashSet<FavouritePoint>();
	private Set<FavoriteGroup> groupsToDelete = new LinkedHashSet<FavoriteGroup>();
	private ActionMode actionMode;
	private SearchView searchView;
	Drawable arrowImage;

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);

		helper = getMyApplication().getFavorites();
		favouritesAdapter.synchronizeGroups();
		setAdapter(favouritesAdapter);

		boolean light = getMyApplication().getSettings().isLightContent();
		arrowImage = getResources().getDrawable(R.drawable.ic_destination_arrow_white);
		arrowImage.mutate();
		if (light) {
			arrowImage.setColorFilter(getResources().getColor(R.color.color_distance), PorterDuff.Mode.MULTIPLY);
		} else {
			arrowImage.setColorFilter(getResources().getColor(R.color.color_distance), PorterDuff.Mode.MULTIPLY);
		}
	}

	private void deleteFavorites() {
		new AsyncTask<Void, Object, String>() {

			@Override
			protected void onPreExecute() {
				showProgressBar();
			};

			@Override
			protected void onPostExecute(String result) {
				hideProgressBar();
				favouritesAdapter.synchronizeGroups();
			}

			@Override
			protected String doInBackground(Void... params) {
				helper.delete(groupsToDelete, favoritesSelected);
				favoritesSelected.clear();
				groupsToDelete.clear();
				return getString(R.string.favourites_delete_multiple_succesful);
			}

		}.execute();

	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.favorites_tree, container, false);
		ExpandableListView listView = (ExpandableListView)view.findViewById(android.R.id.list);
		favouritesAdapter.synchronizeGroups();
		listView.setAdapter(favouritesAdapter);
		setListView(listView);
		setHasOptionsMenu(true);
		return view;
	}

	@Override
	public void onResume() {
		super.onResume();

		favouritesAdapter.synchronizeGroups();

		collapseTrees(5);




	}
	
	private void updateSelectionMode(ActionMode m) {
		if(favoritesSelected.size() > 0) {
			m.setTitle(favoritesSelected.size() + " " + getMyApplication().getString(R.string.shared_string_selected_lowercase));
		} else{
			m.setTitle("");
		}
	}

	@Override
	public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
		IconsCache iconsCache = getMyApplication().getIconsCache();
		if (selectionMode) {
			CheckBox ch = (CheckBox) v.findViewById(R.id.check_item);
			FavouritePoint model = favouritesAdapter.getChild(groupPosition, childPosition);
			ch.setChecked(!ch.isChecked());
			if (ch.isChecked()) {
				favoritesSelected.add(model);
			} else {
				favoritesSelected.remove(model);
			}
			updateSelectionMode(actionMode);
		} else {
			final FavouritePoint point = (FavouritePoint) favouritesAdapter.getChild(groupPosition, childPosition);
			showItemPopupOptionsMenu(point, v);
		}
		return true;
	}

	public static boolean editPoint(Context ctx, final FavouritePoint point, final Runnable callback) {
		OsmandApplication app = (OsmandApplication) ctx.getApplicationContext();
		Builder builder = new AlertDialog.Builder(ctx);
		builder.setTitle(R.string.favourites_context_menu_edit);
		final View v = LayoutInflater.from(ctx).inflate(R.layout.favorite_edit_dialog,
				null, false);
		final AutoCompleteTextView cat = (AutoCompleteTextView) v.findViewById(R.id.Category);
		final EditText editText = (EditText) v.findViewById(R.id.Name);
		final EditText editDescr = (EditText) v.findViewById(R.id.descr);
		builder.setView(v);
		editText.setText(point.getName());
		editDescr.setText(point.getDescription());
		cat.setText(point.getCategory());
		cat.setThreshold(1);
		final FavouritesDbHelper helper = app.getFavorites();
		List<FavoriteGroup> gs = helper.getFavoriteGroups();
		String[] list = new String[gs.size()];
		for(int i = 0; i < list.length; i++) {
			list[i] =gs.get(i).name;
		}
		cat.setAdapter(new ArrayAdapter<String>(ctx, R.layout.list_textview, list));
		builder.setNegativeButton(R.string.shared_string_cancel, null);
		builder.setPositiveButton(R.string.shared_string_apply, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				boolean edited = helper.editFavouriteName(point, editText.getText().toString().trim(), cat.getText()
						.toString(), editDescr.getText().toString());
				if (edited && callback != null) {
					callback.run();
					
				}

			}
		});
		builder.create().show();
		editText.requestFocus();
		return true;
	}

	private boolean deletePoint(final FavouritePoint point) {
		final Resources resources = this.getResources();
		Builder builder = new AlertDialog.Builder(getActivity());
		builder.setMessage(getString(R.string.favourites_remove_dialog_msg, point.getName()));
		builder.setNegativeButton(R.string.shared_string_no, null);
		builder.setPositiveButton(R.string.shared_string_yes, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				boolean deleted = helper.deleteFavourite(point);
				if (deleted) {
					AccessibleToast.makeText(
							getActivity(),
							MessageFormat.format(resources.getString(R.string.favourites_remove_dialog_success),
									point.getName()), Toast.LENGTH_SHORT).show();
					favouritesAdapter.synchronizeGroups();
				}

			}
		});
		builder.create().show();
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {




		if (item.getItemId() == SELECT_DESTINATIONS_ID) {
			selectDestinations();
			return true;
		} else if (item.getItemId() == SHARE_ID) {
			shareFavourites();
			return true;
		} else if (item.getItemId() == DELETE_ID) {
			enterDeleteMode();
			return true;
		} else if (item.getItemId() == DELETE_ACTION_ID) {
			deleteFavoritesAction();
			return true;
		} else {
			return super.onOptionsItemSelected(item);
		}
	}

	private void selectDestinations() {
		final TargetPointsHelper targetPointsHelper = getMyApplication().getTargetPointsHelper();
		if (targetPointsHelper.getIntermediatePoints().size() > 0) {
			final FragmentActivity act = getActivity();
			Builder builder = new AlertDialog.Builder(act);
			builder.setTitle(R.string.new_directions_point_dialog);
			builder.setItems(
					new String[] { act.getString(R.string.keep_intermediate_points),
							act.getString(R.string.clear_intermediate_points)},
					new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							if (which == 1) {
								targetPointsHelper.clearPointToNavigate(false);
							}
							enterIntermediatesMode();
						}
					});
			builder.show();
		} else {
			enterIntermediatesMode();
		}
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		menu.clear();
		MenuItem mi = createMenuItem(menu, SEARCH_ID, R.string.search_poi_filter, R.drawable.ic_action_search_dark,
				R.drawable.ic_action_search_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
		searchView = new SearchView(getActivity());
		FavoritesActivity.updateSearchView(getActivity(), searchView);
		MenuItemCompat.setActionView(mi, searchView);
		searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
			@Override
			public boolean onQueryTextSubmit(String query) {
				favouritesAdapter.getFilter().filter(query);
				return true;
			}

			@Override
			public boolean onQueryTextChange(String newText) {
				favouritesAdapter.getFilter().filter(newText);
				return true;
			}
		});
		MenuItemCompat.setOnActionExpandListener(mi, new MenuItemCompat.OnActionExpandListener() {
			@Override
			public boolean onMenuItemActionExpand(MenuItem item) {
				return true;
			}

			@Override
			public boolean onMenuItemActionCollapse(MenuItem item) {
				favouritesAdapter.setFilterResults(null);
				favouritesAdapter.synchronizeGroups();
				favouritesAdapter.notifyDataSetChanged();

				new Handler().postDelayed(new Runnable() {
					public void run() {
						hideProgressBar();
					}
				}, 100);
				return true;
			}
		});

		if (AndroidUiHelper.isOrientationPortrait(getActivity())) {
			menu = ((FavoritesActivity) getActivity()).getClearToolbar(true).getMenu();
		} else {
			((FavoritesActivity) getActivity()).getClearToolbar(false);
		}



		if (!MenuItemCompat.isActionViewExpanded(mi)) {
			createMenuItem(menu, SHARE_ID, R.string.shared_string_share, R.drawable.ic_action_gshare_dark,
					R.drawable.ic_action_gshare_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
			createMenuItem(menu, SELECT_DESTINATIONS_ID, R.string.select_destination_and_intermediate_points, R.drawable.ic_action_flage_dark,
					R.drawable.ic_action_flage_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
			createMenuItem(menu, DELETE_ID, R.string.shared_string_delete, R.drawable.ic_action_delete_dark,
					R.drawable.ic_action_delete_dark, MenuItemCompat.SHOW_AS_ACTION_ALWAYS);


			
		}
	}



	public void showProgressBar() {
		getActionBarActivity().setSupportProgressBarIndeterminateVisibility(true);
	}

	public void hideProgressBar() {
		getActionBarActivity().setSupportProgressBarIndeterminateVisibility(false);
	}
	
	private void enterIntermediatesMode() {
		actionMode = getActionBarActivity().startSupportActionMode(new ActionMode.Callback() {

			@Override
			public boolean onCreateActionMode(ActionMode mode, Menu menu) {
				enableSelectionMode(true);
				createMenuItem(menu, SELECT_DESTINATIONS_ACTION_MODE_ID, R.string.select_destination_and_intermediate_points,
						R.drawable.ic_action_flage_dark, R.drawable.ic_action_flage_dark,
						MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);
				favoritesSelected.clear();
				groupsToDelete.clear();
				favouritesAdapter.notifyDataSetInvalidated();
				updateSelectionMode(mode);
				return true;
			}

			@Override
			public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
				return false;
			}

			@Override
			public void onDestroyActionMode(ActionMode mode) {
				enableSelectionMode(false);
				favouritesAdapter.notifyDataSetInvalidated();
			}

			@Override
			public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
				if (item.getItemId() == SELECT_DESTINATIONS_ACTION_MODE_ID) {
					mode.finish();
					selectDestinationImpl();
				}
				return true;
			}
		});

	}
	
	private void selectDestinationImpl() {
		if(!favoritesSelected.isEmpty()) {
			final TargetPointsHelper targetPointsHelper = getMyApplication().getTargetPointsHelper();
			for(FavouritePoint fp : favoritesSelected) {
				targetPointsHelper.navigateToPoint(new LatLon(fp.getLatitude(), fp.getLongitude()), false, 
						targetPointsHelper.getIntermediatePoints().size() + 1, 
						new PointDescription(PointDescription.POINT_TYPE_FAVORITE, fp.getName()));		
			}
			if(getMyApplication().getRoutingHelper().isRouteCalculated()) {
				targetPointsHelper.updateRouteAndReferesh(true);
			}
			IntermediatePointsDialog.openIntermediatePointsDialog(getActivity(), getMyApplication(), true);

		}
	}

	private void enterDeleteMode() {

		actionMode = getActionBarActivity().startSupportActionMode(new ActionMode.Callback() {

			@Override
			public boolean onCreateActionMode(ActionMode mode, Menu menu) {
				enableSelectionMode(true);
				createMenuItem(menu, DELETE_ACTION_ID, R.string.shared_string_delete,
						R.drawable.ic_action_delete_dark, R.drawable.ic_action_delete_dark,
						MenuItemCompat.SHOW_AS_ACTION_IF_ROOM);
				favoritesSelected.clear();
				groupsToDelete.clear();
				favouritesAdapter.notifyDataSetInvalidated();
				updateSelectionMode(mode);
				return true;
			}

			@Override
			public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
				return false;
			}

			@Override
			public void onDestroyActionMode(ActionMode mode) {
				enableSelectionMode(false);
				favouritesAdapter.notifyDataSetInvalidated();
			}

			@Override
			public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
				if (item.getItemId() == DELETE_ACTION_ID) {
					mode.finish();
					deleteFavoritesAction();
				}
				return true;
			}

		});

	}

	private void enableSelectionMode(boolean selectionMode) {
		this.selectionMode = selectionMode;
		((FavoritesActivity)getActivity()).setToolbarVisibility(!selectionMode);
	}

	protected void openChangeGroupDialog(final FavoriteGroup group) {
		Builder bld = new AlertDialog.Builder(getActivity());
		View favEdit = getActivity().getLayoutInflater().inflate(R.layout.fav_group_edit, null);
        final TIntArrayList list = new TIntArrayList();
        final Spinner colorSpinner = (Spinner) favEdit.findViewById(R.id.ColorSpinner);
        final int intColor = group.color == 0? getResources().getColor(R.color.color_favorite) : group.color;
        ColorDialogs.setupColorSpinner(getActivity(), intColor, colorSpinner, list);
		
		final CheckBox checkBox = (CheckBox) favEdit.findViewById(R.id.Visibility);
		checkBox.setChecked(group.visible);
		bld.setTitle(R.string.edit_group);
		bld.setView(favEdit);
		bld.setNegativeButton(R.string.shared_string_cancel, null);
		bld.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				int clr = list.get(colorSpinner.getSelectedItemPosition());
				if(clr != intColor || group.visible != checkBox.isChecked()) {
					getMyApplication().getFavorites().editFavouriteGroup(group, clr, checkBox.isChecked());
					favouritesAdapter.notifyDataSetInvalidated();
				}
				
			}
		});
		bld.show();
		
	}

	private void deleteFavoritesAction() {
		if (groupsToDelete.size() + favoritesSelected.size() > 0) {

			Builder b = new AlertDialog.Builder(getActivity());
			b.setMessage(getString(R.string.favorite_delete_multiple, favoritesSelected.size(), groupsToDelete.size()));
			b.setPositiveButton(R.string.shared_string_delete, new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					if (actionMode != null) {
						actionMode.finish();
					}
					deleteFavorites();
				}
			});
			b.setNegativeButton(R.string.shared_string_cancel, null);
			b.show();
		}
	}


	private void shareFavourites() {
		if (favouritesAdapter.isEmpty()) {
			AccessibleToast.makeText(getActivity(), R.string.no_fav_to_save, Toast.LENGTH_LONG).show();
		} else {
			final AsyncTask<Void, Void, GPXFile> exportTask = new AsyncTask<Void, Void, GPXFile>() {
				@Override
				protected GPXFile doInBackground(Void... params) {
					return helper.asGpxFile();
				}

				@Override
				protected void onPreExecute() {
					showProgressBar();
				}

				@Override
				protected void onPostExecute(GPXFile gpxFile) {
					hideProgressBar();
					final Intent sendIntent = new Intent();
					sendIntent.setAction(Intent.ACTION_SEND);
					sendIntent.putExtra(Intent.EXTRA_TEXT, "Favourites.gpx:\n\n\n"+GPXUtilities.asString(gpxFile, getMyApplication()));
					sendIntent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share_fav_subject));
					sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(helper.getExternalFile()));

					sendIntent.setType("text/plain");
					startActivity(sendIntent);
				}
			};

			exportTask.execute();
		}
	}

	protected void export() {
		final File tosave = getMyApplication().getAppPath(FavouritesDbHelper.FILE_TO_SAVE);
		if (favouritesAdapter.isEmpty()) {
			AccessibleToast.makeText(getActivity(), R.string.no_fav_to_save, Toast.LENGTH_LONG).show();
		} else if (!tosave.getParentFile().exists()) {
			AccessibleToast.makeText(getActivity(), R.string.sd_dir_not_accessible, Toast.LENGTH_LONG).show();
		} else {
			final AsyncTask<Void, Void, String> exportTask = new AsyncTask<Void, Void, String>() {
				@Override
				protected String doInBackground(Void... params) {
					return helper.exportFavorites();
				}

				@Override
				protected void onPreExecute() {
					showProgressBar();
				}

				@Override
				protected void onPostExecute(String warning) {
					hideProgressBar();
					if (warning == null) {
						AccessibleToast.makeText(
								getActivity(),
								MessageFormat.format(getString(R.string.fav_saved_sucessfully),
										tosave.getAbsolutePath()), Toast.LENGTH_LONG).show();
					} else {
						AccessibleToast.makeText(getActivity(), warning, Toast.LENGTH_LONG).show();
					}
				};
			};

			if (tosave.exists()) {
				Builder bld = new AlertDialog.Builder(getActivity());
				bld.setPositiveButton(R.string.shared_string_yes, new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						exportTask.execute();
					}
				});
				bld.setNegativeButton(R.string.shared_string_no, null);
				bld.setMessage(R.string.fav_export_confirmation);
				bld.show();
			} else {
				exportTask.execute();
			}
		}
	}
	

	class FavouritesAdapter extends OsmandBaseExpandableListAdapter implements Filterable {

		Map<FavoriteGroup, List<FavouritePoint>> favoriteGroups = new LinkedHashMap<FavoriteGroup, List<FavouritePoint>>();
		List<FavoriteGroup> groups = new ArrayList<FavoriteGroup>();
		Filter myFilter;
		private Set<?> filter;
		
		public void deleteFavoritePoint(FavouritePoint p) {
			if (favoriteGroups.containsKey(p.getCategory())) {
				favoriteGroups.get(p.getCategory()).remove(p);
			}
			notifyDataSetChanged();
		}

		public void deleteCategory(String p) {
			favoriteGroups.remove(p);
			groups.remove(p);
			notifyDataSetChanged();
		}

		public void synchronizeGroups() {
			favoriteGroups.clear();
			groups.clear();
			List<FavoriteGroup> gs = helper.getFavoriteGroups();
			Set<?> flt = filter;
			for (FavoriteGroup key : gs) {
				boolean empty = true;
				if (flt == null || flt.contains(key)) {
					empty = false;
					favoriteGroups.put(key, new ArrayList<FavouritePoint>(key.points));
				} else {
					ArrayList<FavouritePoint> list = new ArrayList<FavouritePoint>();
					for (FavouritePoint p : key.points) {
						if (flt.contains(p)) {
							list.add(p);
							empty = false;
						}
					}
					favoriteGroups.put(key, list);
				}
				if(!empty) {
					groups.add(key);
				}
			}
			notifyDataSetChanged();
		}

		@Override
		public FavouritePoint getChild(int groupPosition, int childPosition) {
			return favoriteGroups.get(groups.get(groupPosition)).get(childPosition);
		}

		@Override
		public long getChildId(int groupPosition, int childPosition) {
			return groupPosition * 10000 + childPosition;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			return favoriteGroups.get(groups.get(groupPosition)).size();
		}

		@Override
		public FavoriteGroup getGroup(int groupPosition) {
			return groups.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			return groups.size();
		}

		@Override
		public long getGroupId(int groupPosition) {
			return groupPosition;
		}

		@Override
		public boolean hasStableIds() {
			return false;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return true;
		}

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
			View row = convertView;
			boolean checkBox = row != null && row.findViewById(R.id.check_item) instanceof CheckBox;
			boolean same = (selectionMode && checkBox) || (!selectionMode && !checkBox);
			if (row == null || !same) {
				LayoutInflater inflater = getActivity().getLayoutInflater();
				row = inflater.inflate(R.layout.expandable_list_item_category, parent, false);
				fixBackgroundRepeat(row);
			}
			adjustIndicator(groupPosition, isExpanded, row, getMyApplication().getSettings().isLightContent());
			TextView label = (TextView) row.findViewById(R.id.category_name);
			final FavoriteGroup model = getGroup(groupPosition);
			label.setText(model.name.length() == 0? getString(R.string.shared_string_favorites) : model.name);

			if (selectionMode) {
				final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
				ch.setVisibility(View.VISIBLE);
				ch.setChecked(groupsToDelete.contains(model));

				ch.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						if (ch.isChecked()) {
							groupsToDelete.add(model);
							List<FavouritePoint> fvs = model.points;
							if (fvs != null) {
								favoritesSelected.addAll(fvs);
							}
							favouritesAdapter.notifyDataSetInvalidated();
						} else {
							groupsToDelete.remove(model);
						}
						updateSelectionMode(actionMode);
					}
				});
			} else {
				final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
				ch.setVisibility(View.GONE);
			}
			final View ch = row.findViewById(R.id.options);
			if(!selectionMode) {
				((ImageView) ch).setImageDrawable(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_overflow_menu_white));
				ch.setVisibility(View.VISIBLE);
				ch.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						openChangeGroupDialog(model);
					}

				});
			} else {
				ch.setVisibility(View.GONE);
			}
			return row;
		}


		@Override
		public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView,
				ViewGroup parent) {
			View row = convertView;
			if (row == null) {
				LayoutInflater inflater = getActivity().getLayoutInflater();
				row = inflater.inflate(R.layout.favorites_list_item, parent, false);
			}

			TextView name = (TextView) row.findViewById(R.id.favourite_label);
			TextView distanceText = (TextView) row.findViewById(R.id.distance);
			ImageView icon = (ImageView) row.findViewById(R.id.favourite_icon);
			ImageView options = (ImageView) row.findViewById(R.id.options);
			options.setFocusable(false);
			options.setImageDrawable(getMyApplication().getIconsCache()
					.getContentIcon(R.drawable.ic_overflow_menu_white));
			options.setVisibility(View.VISIBLE);
			final FavouritePoint model = (FavouritePoint) getChild(groupPosition, childPosition);
			row.setTag(model);
			options.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View v) {
					showItemPopupOptionsMenu(model, v);
				}
			});
			icon.setImageDrawable(FavoriteImageDrawable.getOrCreate(getActivity(), model.getColor(), 0));
			LatLon lastKnownMapLocation = getMyApplication().getSettings().getLastKnownMapLocation();
			int dist = (int) (MapUtils.getDistance(model.getLatitude(), model.getLongitude(),
					lastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));
			String distance = OsmAndFormatter.getFormattedDistance(dist, getMyApplication()) + "  ";
			name.setText(model.getName(), TextView.BufferType.SPANNABLE);
			name.setTypeface(Typeface.DEFAULT, model.isVisible() ? Typeface.NORMAL : Typeface.ITALIC);
			distanceText.setText(distance);
			distanceText.setTextColor(getResources().getColor(R.color.color_distance));
			row.findViewById(R.id.group_image).setVisibility(View.GONE);

			ImageView direction = (ImageView) row.findViewById(R.id.direction);
			direction.setVisibility(View.VISIBLE);
			direction.setImageDrawable(arrowImage);

			final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
			if (selectionMode) {
				ch.setVisibility(View.VISIBLE);
				ch.setChecked(favoritesSelected.contains(model));
				row.findViewById(R.id.favourite_icon).setVisibility(View.GONE);
				ch.setOnClickListener(new View.OnClickListener() {

					@Override
					public void onClick(View v) {
						if (ch.isChecked()) {
							favoritesSelected.add(model);
						} else {
							favoritesSelected.remove(model);
							if (groupsToDelete.contains(model.getCategory())) {
								groupsToDelete.remove(model.getCategory());
								favouritesAdapter.notifyDataSetInvalidated();
							}
						}
						updateSelectionMode(actionMode);
					}
				});
			} else {
				row.findViewById(R.id.favourite_icon).setVisibility(View.VISIBLE);
				ch.setVisibility(View.GONE);
			}
			return row;
		}

		@Override
		public Filter getFilter() {
			if (myFilter == null) {
				myFilter = new FavoritesFilter();
			}
			return myFilter;
		}

		public void setFilterResults(Set<?> values) {
			this.filter = values;
			
		}
	}

	public class FavoritesFilter extends Filter {


		public FavoritesFilter() {
		}

		@Override
		protected FilterResults performFiltering(CharSequence constraint) {
			FilterResults results = new FilterResults();
			if (constraint == null || constraint.length() == 0) {
				results.values = null;
				results.count = 1;
			} else {
				Set<Object> filter = new HashSet<Object>(); 
				String cs = constraint.toString().toLowerCase();
				for(FavoriteGroup g : helper.getFavoriteGroups()) {
					if(g.name.toLowerCase().indexOf(cs) != -1) {
						filter.add(g);
					} else {
						for(FavouritePoint fp : g.points) {
							if(fp.getName().toLowerCase().indexOf(cs) != -1) {
								filter.add(fp);
							}
						}
					}
				}
				results.values = filter;
				results.count = filter.size();
			}
			return results;
		}

		@Override
		protected void publishResults(CharSequence constraint, FilterResults results) {
			synchronized (favouritesAdapter) {
				favouritesAdapter.setFilterResults((Set<?>) results.values);
				favouritesAdapter.synchronizeGroups();
			}
			favouritesAdapter.notifyDataSetChanged();
			if(constraint != null && constraint.length() > 1) {
				collapseTrees(5);
			}
		}
	}

	public void showItemPopupOptionsMenu(final FavouritePoint point, final View view) {
		final OsmandSettings settings = getMyApplication().getSettings();
		LatLon location = new LatLon(point.getLatitude(), point.getLongitude());
		final PopupMenu optionsMenu = new PopupMenu(getActivity(), view);
		DirectionsDialogs.createDirectionActionsPopUpMenu(optionsMenu, location, point,
				new PointDescription(PointDescription.POINT_TYPE_FAVORITE, point.getName()),
				settings.getLastKnownMapZoom(),
				getActivity(), true, false);

		MenuItem item = optionsMenu.getMenu().add(R.string.favourites_context_menu_edit)
				.setIcon(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_action_edit_dark));
		item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
			@Override
			public boolean onMenuItemClick(MenuItem item) {
				editPoint(getActivity(), point, new Runnable() {
					public void run() {
						favouritesAdapter.synchronizeGroups();
					}
				});
				return true;
			}
		});

		item = optionsMenu.getMenu().add(R.string.favourites_context_menu_delete)
				.setIcon(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_action_delete_dark));
		item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
			@Override
			public boolean onMenuItemClick(MenuItem item) {
				deletePoint(point);

				return true;
			}
		});

		optionsMenu.show();
	}
}

<code block>

package net.osmand.plus.activities;

import android.app.Activity;
import android.content.Intent;
import android.support.v7.widget.PopupMenu;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import net.osmand.data.FavouritePoint;
import net.osmand.data.LatLon;
import net.osmand.plus.OsmAndLocationProvider.OsmAndCompassListener;
import net.osmand.plus.OsmandApplication;
import net.osmand.plus.OsmandSettings;
import net.osmand.plus.R;
import net.osmand.plus.activities.search.SearchActivity;
import net.osmand.plus.activities.search.SearchActivity.SearchActivityChild;
import net.osmand.plus.base.FavoriteImageDrawable;
import net.osmand.plus.dashboard.DashLocationFragment;
import net.osmand.plus.dialogs.DirectionsDialogs;
import net.osmand.util.MapUtils;

import java.util.Comparator;
import java.util.List;

public class FavoritesListFragment extends OsmAndListFragment implements SearchActivityChild, OsmAndCompassListener {

	public static final String SELECT_FAVORITE_POINT_INTENT_KEY = "SELECT_FAVORITE_POINT_INTENT_KEY";
	public static final int SELECT_FAVORITE_POINT_RESULT_OK = 1;

	private FavouritesAdapter favouritesAdapter;

	private boolean selectFavoriteMode;
	private OsmandSettings settings;
	private boolean compassRegistered;



	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		Intent intent = activity.getIntent();
		if (intent != null) {
			selectFavoriteMode = intent.hasExtra(SELECT_FAVORITE_POINT_INTENT_KEY);
			if (intent.hasExtra(SearchActivity.SEARCH_LAT) && intent.hasExtra(SearchActivity.SEARCH_LON)) {
				double lat = intent.getDoubleExtra(SearchActivity.SEARCH_LAT, 0);
				double lon = intent.getDoubleExtra(SearchActivity.SEARCH_LON, 0);
				if (lat != 0 || lon != 0) {
					favouritesAdapter.location = new LatLon(lat, lon);
				}
			}
		}
		settings = ((OsmandApplication) getApplication()).getSettings();
		OsmandApplication app = (OsmandApplication) getApplication();
		favouritesAdapter = new FavouritesAdapter(activity, app.getFavorites().getFavouritePoints(),
				!selectFavoriteMode);
		setListAdapter(favouritesAdapter);
		setHasOptionsMenu(true);
	}

	private OsmandApplication getApplication() {
		return (OsmandApplication) getActivity().getApplication();
	}

	@Override
	public void onResume() {
		super.onResume();

		if (favouritesAdapter.location == null && getActivity() instanceof SearchActivity) {
			favouritesAdapter.location = ((SearchActivity) getActivity()).getSearchPoint();
		}
		if (favouritesAdapter.location == null) {
			favouritesAdapter.location = settings.getLastKnownMapLocation();
		}
		favouritesAdapter.screenOrientation = DashLocationFragment.getScreenOrientation(getActivity());
		locationUpdate(favouritesAdapter.location);
	}

	@Override
	public void locationUpdate(LatLon l) {
		if (getActivity() instanceof SearchActivity) {
			if (((SearchActivity) getActivity()).isSearchAroundCurrentLocation() && l != null) {
				if (!compassRegistered) {
					((OsmandApplication) getActivity().getApplication()).getLocationProvider().addCompassListener(this);
					compassRegistered = true;
				}
				favouritesAdapter.searchAroundLocation = true;
			} else {
				favouritesAdapter.searchAroundLocation = false;
			}
		}
		if (favouritesAdapter != null) {
			favouritesAdapter.updateLocation(l);
		}

	}

	@Override
	public void onPause() {
		super.onPause();
		if(getActivity() instanceof SearchActivity) {
			((OsmandApplication) getActivity().getApplication()).getLocationProvider().removeCompassListener(this);
			compassRegistered = false;
		}
	}

	public boolean isSelectFavoriteMode() {
		return selectFavoriteMode;
	}


	@Override
	public void onCreateOptionsMenu(Menu onCreate, MenuInflater inflater) {
		if (getActivity() instanceof SearchActivity) {
			((SearchActivity) getActivity()).getClearToolbar(false);
		}
	}

	@Override
	public void onListItemClick(ListView l, View v, int position, long id) {

		if (!isSelectFavoriteMode()) {
			FavouritePoint point = favouritesAdapter.getItem(position);
			showItemPopupOptionsMenu(point, getActivity(), v);
		} else {
			Intent intent = getActivity().getIntent();
			intent.putExtra(SELECT_FAVORITE_POINT_INTENT_KEY, favouritesAdapter.getItem(position));
			getActivity().setResult(SELECT_FAVORITE_POINT_RESULT_OK, intent);
			getActivity().finish();
		}
	}

	public static class FavouritesAdapter extends ArrayAdapter<FavouritePoint> {
		private Activity activity;
		private LatLon location;
		private OsmandApplication app;
		private boolean searchAroundLocation;
		private int screenOrientation;
		private Float heading;
		private boolean shoudShowMenuButton;

		public FavouritesAdapter(Activity activity, List<FavouritePoint> list,
								 boolean shoudShowMenuButton) {
			super(activity, R.layout.favorites_list_item, list);
			this.activity = activity;
			this.app = ((OsmandApplication) activity.getApplication());
			this.shoudShowMenuButton = shoudShowMenuButton;
		}

		public LatLon getLocation() {
			return location;
		}

		public void updateLocation(LatLon l) {
			location = l;
			sort(new Comparator<FavouritePoint>() {
				@Override
				public int compare(FavouritePoint object1, FavouritePoint object2) {
					if (location != null) {
						double d1 = MapUtils.getDistance(location, object1.getLatitude(), object1.getLongitude());
						double d2 = MapUtils.getDistance(location, object2.getLatitude(), object2.getLongitude());
						if (d1 == d2) {
							return 0;
						} else if (d1 > d2) {
							return 1;
						}
						return -1;
					} else {
						return getName(object1).compareTo(getName(object2));
					}
				}
			});
		}

		public String getName(FavouritePoint model) {
			return model.getName();
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View row = convertView;
			if (row == null) {
				LayoutInflater inflater = activity.getLayoutInflater(); 
				row = inflater.inflate(R.layout.favorites_list_item, parent, false);
			}

			TextView name = (TextView) row.findViewById(R.id.favourite_label);
			TextView distanceText = (TextView) row.findViewById(R.id.distance);
			ImageView icon = (ImageView) row.findViewById(R.id.favourite_icon);
			ImageView direction = (ImageView) row.findViewById(R.id.direction);
			ImageView giImage= (ImageView)row.findViewById(R.id.group_image);
			direction.setVisibility(View.VISIBLE);
			final FavouritePoint favorite = getItem(position);
			if (shoudShowMenuButton) {
				ImageButton options = (ImageButton) row.findViewById(R.id.options);
				options.setFocusable(false);
				options.setImageDrawable(((OsmandApplication) activity.getApplication())
						.getIconsCache().getContentIcon(R.drawable.ic_overflow_menu_white));
				options.setVisibility(View.VISIBLE);
				options.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						showItemPopupOptionsMenu(favorite, activity, v);
					}
				});
			}
			if (!favorite.getCategory().isEmpty()) {
				giImage.setVisibility(View.VISIBLE);
				giImage.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_small_group));
			} else {
				giImage.setVisibility(View.GONE);
			}
			((TextView) row.findViewById(R.id.group_name)).setText(favorite.getCategory());

			icon.setImageDrawable(FavoriteImageDrawable.getOrCreate(activity, favorite.getColor(), 0));
			DashLocationFragment.updateLocationView(!searchAroundLocation, location, heading, direction, distanceText,
					favorite.getLatitude(), favorite.getLongitude(), screenOrientation, app, activity);

			name.setText(getName(favorite));
			final CheckBox ch = (CheckBox) row.findViewById(R.id.check_item);
			icon.setVisibility(View.VISIBLE);
			ch.setVisibility(View.GONE);
			return row;
		}

	}

	public OsmandApplication getMyApplication() {
		return (OsmandApplication) getActivity().getApplication();
	}

	@Override
	public void updateCompassValue(float value) {


		float lastHeading = favouritesAdapter.heading != null ? favouritesAdapter.heading : 99;
		favouritesAdapter.heading = value;
		if (Math.abs(MapUtils.degreesDiff(lastHeading, favouritesAdapter.heading)) > 5) {
			favouritesAdapter.notifyDataSetChanged();
		} else {
			favouritesAdapter.heading = lastHeading;
		}
	}

	public static void showItemPopupOptionsMenu(FavouritePoint point, Activity activity, View view) {
		LatLon location = new LatLon(point.getLatitude(), point.getLongitude());
		final PopupMenu optionsMenu = new PopupMenu(activity, view);
		DirectionsDialogs.createDirectionActionsPopUpMenu(optionsMenu, location,
				point, point.getPointDescription(),
				((OsmandApplication) activity.getApplication()).getSettings().getLastKnownMapZoom(),
				activity, true, false);
		optionsMenu.show();
	}
}
