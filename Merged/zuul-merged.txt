
package com.netflix.zuul;

import com.netflix.zuul.filters.BaseFilter;


public interface FilterFactory {
    

    public BaseFilter newInstance(Class clazz) throws Exception;
}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.context.ZuulMessage;
import com.netflix.zuul.filters.BaseFilter;
import com.netflix.zuul.filters.BaseSyncFilter;
import com.netflix.zuul.filters.FilterRegistry;
import com.netflix.zuul.filters.ZuulFilter;
import com.netflix.zuul.groovy.GroovyCompiler;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Singleton;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Modifier;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.*;


@Singleton
public class FilterLoader
{
    private static final Logger LOG = LoggerFactory.getLogger(FilterLoader.class);

    private final ConcurrentHashMap<String, Long> filterClassLastModified = new ConcurrentHashMap<String, Long>();
    private final ConcurrentHashMap<String, String> filterClassCode = new ConcurrentHashMap<String, String>();
    private final ConcurrentHashMap<String, String> filterCheck = new ConcurrentHashMap<String, String>();
    private final ConcurrentHashMap<String, List<ZuulFilter>> hashFiltersByType = new ConcurrentHashMap<String, List<ZuulFilter>>();
    private final ConcurrentHashMap<String, ZuulFilter> filtersByNameAndType = new ConcurrentHashMap<>();

    private FilterRegistry filterRegistry = new FilterRegistry();

    private DynamicCodeCompiler compiler = new GroovyCompiler();
    
    static FilterFactory FILTER_FACTORY = new DefaultFilterFactory();


    public void setCompiler(DynamicCodeCompiler compiler) {
        this.compiler = compiler;
    }


    public void setFilterRegistry(FilterRegistry r) {
        this.filterRegistry = r;
    }


    public void setFilterFactory(FilterFactory factory) {
        FILTER_FACTORY = factory;
    }



    public ZuulFilter getFilter(String sCode, String sName) throws Exception {

        if (filterCheck.get(sName) == null) {
            filterCheck.putIfAbsent(sName, sName);
            if (!sCode.equals(filterClassCode.get(sName))) {
                LOG.info("reloading code " + sName);
                filterRegistry.remove(sName);
            }
        }
        ZuulFilter filter = filterRegistry.get(sName);
        if (filter == null) {
            Class clazz = compiler.compile(sCode, sName);
            if (!Modifier.isAbstract(clazz.getModifiers())) {
                filter = FILTER_FACTORY.newInstance(clazz);
            }
        }
        return filter;

    }


    public int filterInstanceMapSize() {
        return filterRegistry.size();
    }



    public boolean putFilter(File file) throws Exception {
        String sName = file.getAbsolutePath();
        if (filterClassLastModified.get(sName) != null && (file.lastModified() != filterClassLastModified.get(sName))) {
            LOG.debug("reloading filter " + sName);
            filterRegistry.remove(sName);
        }
        ZuulFilter filter = filterRegistry.get(sName);
        if (filter == null) {
            Class clazz = compiler.compile(file);
            if (!Modifier.isAbstract(clazz.getModifiers())) {
                filter = FILTER_FACTORY.newInstance(clazz);
                List<ZuulFilter> list = hashFiltersByType.get(filter.filterType());
                if (list != null) {
                    hashFiltersByType.remove(filter.filterType()); 
                }

                String nameAndType = filter.filterType() + ":" + filter.filterName();
                filtersByNameAndType.put(nameAndType, filter);

                filterRegistry.put(file.getAbsolutePath() + file.getName(), filter);
                filterClassLastModified.put(sName, file.lastModified());
                return true;
            }
        }

        return false;
    }


    public List<ZuulFilter> getFiltersByType(String filterType) {

        List<ZuulFilter> list = hashFiltersByType.get(filterType);
        if (list != null) return list;

        list = new ArrayList<ZuulFilter>();

        Collection<ZuulFilter> filters = filterRegistry.getAllFilters();
        for (Iterator<ZuulFilter> iterator = filters.iterator(); iterator.hasNext(); ) {
            ZuulFilter filter = iterator.next();
            if (filter.filterType().equals(filterType)) {
                list.add(filter);
            }
        }


        Collections.sort(list, new Comparator<ZuulFilter>() {
            @Override
            public int compare(ZuulFilter o1, ZuulFilter o2) {
                return o1.filterOrder() - o2.filterOrder();
            }
        });

        hashFiltersByType.putIfAbsent(filterType, list);
        return list;
    }

    public ZuulFilter getFilterByNameAndType(String name, String type)
    {
        if (name == null || type == null)
            return null;

        String nameAndType = type + ":" + name;
        return filtersByNameAndType.get(nameAndType);
    }


    public static class TestZuulFilter extends BaseSyncFilter {

        public TestZuulFilter() {
            super();
        }

        @Override
        public String filterType() {
            return "test";
        }

        @Override
        public int filterOrder() {
            return 0;
        }

        @Override
        public boolean shouldFilter(ZuulMessage msg) {
            return false;
        }

        @Override
        public ZuulMessage apply(ZuulMessage msg) {
            return null;
        }
    }


    public static class UnitTest {

        @Mock
        File file;

        @Mock
        DynamicCodeCompiler compiler;

        @Mock
        FilterRegistry registry;

        FilterLoader loader;

        TestZuulFilter filter = new TestZuulFilter();

        @Before
        public void before() throws Exception
        {
            MockitoAnnotations.initMocks(this);

            loader = spy(new FilterLoader());
            loader.setCompiler(compiler);
            loader.setFilterRegistry(registry);

            doReturn(TestZuulFilter.class).when(compiler).compile(file);
            when(file.getAbsolutePath()).thenReturn("/filters/in/SomeFilter.groovy");
        }

        @Test
        public void testGetFilterFromFile() throws Exception {
            assertTrue(loader.putFilter(file));
            verify(registry).put(any(String.class), any(BaseFilter.class));
        }

        @Test
        public void testGetFiltersByType() throws Exception {
            assertTrue(loader.putFilter(file));

            verify(registry).put(any(String.class), any(ZuulFilter.class));

            final List<ZuulFilter> filters = new ArrayList<ZuulFilter>();
            filters.add(filter);
            when(registry.getAllFilters()).thenReturn(filters);

            List<ZuulFilter> list = loader.getFiltersByType("test");
            assertTrue(list != null);
            assertTrue(list.size() == 1);
            ZuulFilter filter = list.get(0);
            assertTrue(filter != null);
            assertTrue(filter.filterType().equals("test"));
        }


        @Test
        public void testGetFilterFromString() throws Exception {
            String string = "";
            doReturn(TestZuulFilter.class).when(compiler).compile(string, string);
            ZuulFilter filter = loader.getFilter(string, string);

            assertNotNull(filter);
            assertTrue(filter.getClass() == TestZuulFilter.class);

        }


    }


}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.filters.BaseFilter;


public class DefaultFilterFactory implements FilterFactory {


    @Override
    public BaseFilter newInstance(Class clazz) throws InstantiationException, IllegalAccessException {
        return (BaseFilter) clazz.newInstance();
    }

}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.groovy.GroovyFileFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;


@Singleton
public class FilterFileManager {

    private static final Logger LOG = LoggerFactory.getLogger(FilterFileManager.class);

    Thread poller;
    boolean bRunning = true;

    @Inject
    private FilterFileManagerConfig config;

    @Inject
    private FilterLoader filterLoader;


    @PostConstruct
    public void init() throws Exception
    {
        manageFiles();
        startPoller();
    }


    @PreDestroy
    public void shutdown() {
        stopPoller();
    }


    void stopPoller() {
        bRunning = false;
    }

    void startPoller() {
        poller = new Thread("GroovyFilterFileManagerPoller") {
            public void run() {
                while (bRunning) {
                    try {
                        sleep(config.getPollingIntervalSeconds() * 1000);
                        manageFiles();
                    }
                    catch (Exception e) {
                        LOG.error("Error checking and/or loading filter files from Poller thread.", e);
                    }
                }
            }
        };
        poller.start();
    }


    public File getDirectory(String sPath) {
        File  directory = new File(sPath);
        if (!directory.isDirectory()) {
            URL resource = FilterFileManager.class.getClassLoader().getResource(sPath);
            try {
                directory = new File(resource.toURI());
            } catch (Exception e) {
                LOG.error("Error accessing directory in classloader. path=" + sPath, e);
            }
            if (!directory.isDirectory()) {
                throw new RuntimeException(directory.getAbsolutePath() + " is not a valid directory");
            }
        }
        return directory;
    }


    List<File> getFiles() {
        List<File> list = new ArrayList<File>();
        for (String sDirectory : config.getLocations()) {
            if (sDirectory != null) {
                File directory = getDirectory(sDirectory);
                File[] aFiles = directory.listFiles(config.getFilenameFilter());
                if (aFiles != null) {
                    list.addAll(Arrays.asList(aFiles));
                }
            }
        }
        return list;
    }


    void processGroovyFiles(List<File> aFiles) throws Exception {

        for (File file : aFiles) {
            filterLoader.putFilter(file);
        }
    }

    void manageFiles()
    {
        try {
            List<File> aFiles = getFiles();
            processGroovyFiles(aFiles);
        }
        catch (Exception e) {
            String msg = "Error updating groovy filters from disk!";
            LOG.error(msg, e);
            throw new RuntimeException(msg, e);
        }
    }

    public static class FilterFileManagerConfig
    {
        private String[] locations;
        private int pollingIntervalSeconds;
        private FilenameFilter filenameFilter;

        public FilterFileManagerConfig(String[] locations, int pollingIntervalSeconds, FilenameFilter filenameFilter) {
            this.locations = locations;
            this.pollingIntervalSeconds = pollingIntervalSeconds;
            this.filenameFilter = filenameFilter;
        }

        public FilterFileManagerConfig(String[] locations, int pollingIntervalSeconds) {
            this(locations, pollingIntervalSeconds, new GroovyFileFilter());
        }

        public String[] getLocations() {
            return locations;
        }
        public int getPollingIntervalSeconds() {
            return pollingIntervalSeconds;
        }
        public FilenameFilter getFilenameFilter() {
            return filenameFilter;
        }
    }


    @RunWith(MockitoJUnitRunner.class)
    public static class UnitTest {
        @Mock
        private File nonGroovyFile;
        @Mock
        private File groovyFile;

        @Mock
        private File directory;

        @Before
        public void before() {
            MockitoAnnotations.initMocks(this);
        }


        @Test
        public void testFileManagerInit() throws Exception
        {
            FilterFileManagerConfig config = new FilterFileManagerConfig(new String[]{"test", "test1"}, 1);
            FilterFileManager manager = new FilterFileManager();
            manager.config = config;

            manager = spy(manager);
            doNothing().when(manager).manageFiles();

            manager.init();
            verify(manager, atLeast(1)).manageFiles();
            verify(manager, times(1)).startPoller();
            assertNotNull(manager.poller);

        }

    }

}

<code block>

package com.netflix.zuul.init;

import com.google.inject.AbstractModule;
import com.netflix.config.ConfigurationManager;
import com.netflix.zuul.FilterFileManager;
import com.netflix.zuul.FilterProcessor;
import com.netflix.zuul.FilterUsageNotifier;
import org.apache.commons.configuration.AbstractConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class ZuulFiltersModule extends AbstractModule
{
    private static final Logger LOG = LoggerFactory.getLogger(ZuulFiltersModule.class);

    @Override
    protected void configure() {
        LOG.info("Starting Groovy Filter file manager");


        final AbstractConfiguration config = ConfigurationManager.getConfigInstance();
        String[] filterLocations = config.getStringArray("zuul.filters.locations");
        if (filterLocations == null || filterLocations.length == 0) {

            filterLocations = "inbound,outbound,endpoint".split(",");
        }
        LOG.info("Using filter locations: ");
        for (String location : filterLocations) {
            LOG.info("  " + location);
        }


        FilterFileManager.FilterFileManagerConfig filterConfig = new FilterFileManager.FilterFileManagerConfig(filterLocations, 5);
        bind(FilterFileManager.FilterFileManagerConfig.class).toInstance(filterConfig);
        bind(FilterUsageNotifier.class).to(FilterProcessor.BasicFilterUsageNotifier.class);

        LOG.info("Groovy Filter file manager started");
    }
}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.filters.ZuulFilter;


public interface FilterFactory {
    

    public ZuulFilter newInstance(Class clazz) throws Exception;
}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.context.ZuulMessage;
import com.netflix.zuul.filters.BaseFilter;
import com.netflix.zuul.filters.BaseSyncFilter;
import com.netflix.zuul.filters.FilterRegistry;
import com.netflix.zuul.filters.ZuulFilter;
import com.netflix.zuul.groovy.GroovyCompiler;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Singleton;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Modifier;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.*;


@Singleton
public class FilterLoader
{
    private static final Logger LOG = LoggerFactory.getLogger(FilterLoader.class);

    private final ConcurrentHashMap<String, Long> filterClassLastModified = new ConcurrentHashMap<String, Long>();
    private final ConcurrentHashMap<String, String> filterClassCode = new ConcurrentHashMap<String, String>();
    private final ConcurrentHashMap<String, String> filterCheck = new ConcurrentHashMap<String, String>();
    private final ConcurrentHashMap<String, List<ZuulFilter>> hashFiltersByType = new ConcurrentHashMap<String, List<ZuulFilter>>();
    private final ConcurrentHashMap<String, ZuulFilter> filtersByNameAndType = new ConcurrentHashMap<>();

    private FilterRegistry filterRegistry = new FilterRegistry();

    private DynamicCodeCompiler compiler = new GroovyCompiler();
    
    static FilterFactory FILTER_FACTORY = new DefaultFilterFactory();


    public void setCompiler(DynamicCodeCompiler compiler) {
        this.compiler = compiler;
    }


    public void setFilterRegistry(FilterRegistry r) {
        this.filterRegistry = r;
    }


    public void setFilterFactory(FilterFactory factory) {
        FILTER_FACTORY = factory;
    }



    public ZuulFilter getFilter(String sCode, String sName) throws Exception {

        if (filterCheck.get(sName) == null) {
            filterCheck.putIfAbsent(sName, sName);
            if (!sCode.equals(filterClassCode.get(sName))) {
                LOG.info("reloading code " + sName);
                filterRegistry.remove(sName);
            }
        }
        ZuulFilter filter = filterRegistry.get(sName);
        if (filter == null) {
            Class clazz = compiler.compile(sCode, sName);
            if (!Modifier.isAbstract(clazz.getModifiers())) {
                filter = FILTER_FACTORY.newInstance(clazz);
            }
        }
        return filter;

    }


    public int filterInstanceMapSize() {
        return filterRegistry.size();
    }



    public boolean putFilter(File file) throws Exception {
        String sName = file.getAbsolutePath();
        if (filterClassLastModified.get(sName) != null && (file.lastModified() != filterClassLastModified.get(sName))) {
            LOG.debug("reloading filter " + sName);
            filterRegistry.remove(sName);
        }
        ZuulFilter filter = filterRegistry.get(sName);
        if (filter == null) {
            Class clazz = compiler.compile(file);
            if (!Modifier.isAbstract(clazz.getModifiers())) {
                filter = FILTER_FACTORY.newInstance(clazz);
                putFilter(sName, filter, file.lastModified());
                return true;
            }
        }

        return false;
    }

    private void putFilter(String sName, ZuulFilter filter, long lastModified)
    {
        List<ZuulFilter> list = hashFiltersByType.get(filter.filterType());
        if (list != null) {
            hashFiltersByType.remove(filter.filterType()); 
        }

        String nameAndType = filter.filterType() + ":" + filter.filterName();
        filtersByNameAndType.put(nameAndType, filter);

        filterRegistry.put(sName, filter);
        filterClassLastModified.put(sName, lastModified);
    }

    public List<ZuulFilter> putFiltersForClasses(String[] classNames)
    {
        ArrayList<ZuulFilter> newFilters = new ArrayList<>();
        for (String className : classNames)
        {
            try {
                newFilters.add(putFilterForClassName(className));
            }
            catch (Exception e) {
                LOG.error("Error putting filter for className=" + className, e);
            }
        }
        return newFilters;
    }

    public ZuulFilter putFilterForClassName(String className) throws ClassNotFoundException, Exception
    {
        Class clazz = Class.forName(className);
        if (! ZuulFilter.class.isAssignableFrom(clazz)) {
            throw new IllegalArgumentException("Specified filter class does not implement ZuulFilter interface!");
        }
        else {
            ZuulFilter filter = FILTER_FACTORY.newInstance(clazz);
            putFilter(className, filter, System.currentTimeMillis());
            return filter;
        }
    }


    public List<ZuulFilter> getFiltersByType(String filterType) {

        List<ZuulFilter> list = hashFiltersByType.get(filterType);
        if (list != null) return list;

        list = new ArrayList<ZuulFilter>();

        Collection<ZuulFilter> filters = filterRegistry.getAllFilters();
        for (Iterator<ZuulFilter> iterator = filters.iterator(); iterator.hasNext(); ) {
            ZuulFilter filter = iterator.next();
            if (filter.filterType().equals(filterType)) {
                list.add(filter);
            }
        }


        Collections.sort(list, new Comparator<ZuulFilter>() {
            @Override
            public int compare(ZuulFilter o1, ZuulFilter o2) {
                return o1.filterOrder() - o2.filterOrder();
            }
        });

        hashFiltersByType.putIfAbsent(filterType, list);
        return list;
    }

    public ZuulFilter getFilterByNameAndType(String name, String type)
    {
        if (name == null || type == null)
            return null;

        String nameAndType = type + ":" + name;
        return filtersByNameAndType.get(nameAndType);
    }


    public static class TestZuulFilter extends BaseSyncFilter {

        public TestZuulFilter() {
            super();
        }

        @Override
        public String filterType() {
            return "test";
        }

        @Override
        public int filterOrder() {
            return 0;
        }

        @Override
        public boolean shouldFilter(ZuulMessage msg) {
            return false;
        }

        @Override
        public ZuulMessage apply(ZuulMessage msg) {
            return null;
        }
    }


    public static class UnitTest {

        @Mock
        File file;

        @Mock
        DynamicCodeCompiler compiler;

        @Mock
        FilterRegistry registry;

        FilterLoader loader;

        TestZuulFilter filter = new TestZuulFilter();

        @Before
        public void before() throws Exception
        {
            MockitoAnnotations.initMocks(this);

            loader = spy(new FilterLoader());
            loader.setCompiler(compiler);
            loader.setFilterRegistry(registry);

            doReturn(TestZuulFilter.class).when(compiler).compile(file);
            when(file.getAbsolutePath()).thenReturn("/filters/in/SomeFilter.groovy");
        }

        @Test
        public void testGetFilterFromFile() throws Exception {
            assertTrue(loader.putFilter(file));
            verify(registry).put(any(String.class), any(BaseFilter.class));
        }

        @Test
        public void testGetFiltersByType() throws Exception {
            assertTrue(loader.putFilter(file));

            verify(registry).put(any(String.class), any(ZuulFilter.class));

            final List<ZuulFilter> filters = new ArrayList<ZuulFilter>();
            filters.add(filter);
            when(registry.getAllFilters()).thenReturn(filters);

            List<ZuulFilter> list = loader.getFiltersByType("test");
            assertTrue(list != null);
            assertTrue(list.size() == 1);
            ZuulFilter filter = list.get(0);
            assertTrue(filter != null);
            assertTrue(filter.filterType().equals("test"));
        }


        @Test
        public void testGetFilterFromString() throws Exception {
            String string = "";
            doReturn(TestZuulFilter.class).when(compiler).compile(string, string);
            ZuulFilter filter = loader.getFilter(string, string);

            assertNotNull(filter);
            assertTrue(filter.getClass() == TestZuulFilter.class);

        }


    }


}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.filters.ZuulFilter;


public class DefaultFilterFactory implements FilterFactory {


    @Override
    public ZuulFilter newInstance(Class clazz) throws InstantiationException, IllegalAccessException {
        return (ZuulFilter) clazz.newInstance();
    }

}

<code block>

package com.netflix.zuul;

import com.netflix.zuul.groovy.GroovyFileFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;


@Singleton
public class FilterFileManager {

    private static final Logger LOG = LoggerFactory.getLogger(FilterFileManager.class);

    Thread poller;
    boolean bRunning = true;

    @Inject
    private FilterFileManagerConfig config;

    @Inject
    private FilterLoader filterLoader;


    @PostConstruct
    public void init() throws Exception
    {
        filterLoader.putFiltersForClasses(config.getClassNames());
        manageFiles();
        startPoller();
    }


    @PreDestroy
    public void shutdown() {
        stopPoller();
    }


    void stopPoller() {
        bRunning = false;
    }

    void startPoller() {
        poller = new Thread("GroovyFilterFileManagerPoller") {
            public void run() {
                while (bRunning) {
                    try {
                        sleep(config.getPollingIntervalSeconds() * 1000);
                        manageFiles();
                    }
                    catch (Exception e) {
                        LOG.error("Error checking and/or loading filter files from Poller thread.", e);
                    }
                }
            }
        };
        poller.start();
    }


    public File getDirectory(String sPath) {
        File  directory = new File(sPath);
        if (!directory.isDirectory()) {
            URL resource = FilterFileManager.class.getClassLoader().getResource(sPath);
            try {
                directory = new File(resource.toURI());
            } catch (Exception e) {
                LOG.error("Error accessing directory in classloader. path=" + sPath, e);
            }
            if (!directory.isDirectory()) {
                throw new RuntimeException(directory.getAbsolutePath() + " is not a valid directory");
            }
        }
        return directory;
    }


    List<File> getFiles() {
        List<File> list = new ArrayList<File>();
        for (String sDirectory : config.getDirectories()) {
            if (sDirectory != null) {
                File directory = getDirectory(sDirectory);
                File[] aFiles = directory.listFiles(config.getFilenameFilter());
                if (aFiles != null) {
                    list.addAll(Arrays.asList(aFiles));
                }
            }
        }
        return list;
    }


    void processGroovyFiles(List<File> aFiles) throws Exception {

        for (File file : aFiles) {
            filterLoader.putFilter(file);
        }
    }

    void manageFiles()
    {
        try {
            List<File> aFiles = getFiles();
            processGroovyFiles(aFiles);
        }
        catch (Exception e) {
            String msg = "Error updating groovy filters from disk!";
            LOG.error(msg, e);
            throw new RuntimeException(msg, e);
        }
    }


    public static class FilterFileManagerConfig
    {
        private String[] directories;
        private String[] classNames;
        private int pollingIntervalSeconds;
        private FilenameFilter filenameFilter;

        public FilterFileManagerConfig(String[] directories, String[] classNames, int pollingIntervalSeconds, FilenameFilter filenameFilter) {
            this.directories = directories;
            this.classNames = classNames;
            this.pollingIntervalSeconds = pollingIntervalSeconds;
            this.filenameFilter = filenameFilter;
        }

        public FilterFileManagerConfig(String[] directories, String[] classNames, int pollingIntervalSeconds) {
            this(directories, classNames, pollingIntervalSeconds, new GroovyFileFilter());
        }

        public String[] getDirectories() {
            return directories;
        }
        public String[] getClassNames()
        {
            return classNames;
        }
        public int getPollingIntervalSeconds() {
            return pollingIntervalSeconds;
        }
        public FilenameFilter getFilenameFilter() {
            return filenameFilter;
        }
    }


    @RunWith(MockitoJUnitRunner.class)
    public static class UnitTest
    {
        @Mock
        private File nonGroovyFile;
        @Mock
        private File groovyFile;
        @Mock
        private File directory;
        @Mock
        private FilterLoader filterLoader;

        @Before
        public void before() {
            MockitoAnnotations.initMocks(this);
        }

        @Test
        public void testFileManagerInit() throws Exception
        {
            FilterFileManagerConfig config = new FilterFileManagerConfig(new String[]{"test", "test1"}, new String[]{"com.netflix.blah.SomeFilter"}, 1);
            FilterFileManager manager = new FilterFileManager();
            manager.config = config;
            manager.filterLoader = filterLoader;

            manager = spy(manager);
            doNothing().when(manager).manageFiles();

            manager.init();
            verify(manager, atLeast(1)).manageFiles();
            verify(manager, times(1)).startPoller();
            assertNotNull(manager.poller);
        }
    }
}

<code block>

package com.netflix.zuul.init;

import com.google.inject.AbstractModule;
import com.netflix.config.ConfigurationManager;
import com.netflix.zuul.FilterFileManager;
import com.netflix.zuul.FilterProcessor;
import com.netflix.zuul.FilterUsageNotifier;
import org.apache.commons.configuration.AbstractConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class ZuulFiltersModule extends AbstractModule
{
    private static final Logger LOG = LoggerFactory.getLogger(ZuulFiltersModule.class);

    @Override
    protected void configure() {
        LOG.info("Starting Groovy Filter file manager");


        final AbstractConfiguration config = ConfigurationManager.getConfigInstance();
        String[] filterLocations = config.getStringArray("zuul.filters.locations");
        if (filterLocations == null || filterLocations.length == 0) {

            filterLocations = "inbound,outbound,endpoint".split(",");
        }
        LOG.info("Using filter locations: ");
        for (String location : filterLocations) {
            LOG.info("  " + location);
        }


        String[] filterClassNames = config.getStringArray("zuul.filters.classes");
        if (filterClassNames == null) {
            filterClassNames = new String[0];
        }
        LOG.info("Using filter classnames: ");
        for (String className : filterClassNames) {
            LOG.info("  " + className);
        }


        FilterFileManager.FilterFileManagerConfig filterConfig =
                new FilterFileManager.FilterFileManagerConfig(filterLocations, filterClassNames, 5);
        bind(FilterFileManager.FilterFileManagerConfig.class).toInstance(filterConfig);
        bind(FilterUsageNotifier.class).to(FilterProcessor.BasicFilterUsageNotifier.class);

        LOG.info("Groovy Filter file manager started");
    }
}
